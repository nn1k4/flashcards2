–§–∞–π–ª TODO2.txt, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —è –ø—ã—Ç–∞–ª—Å—è —Ä–µ—à–∏—Ç—å, –Ω–æ –ø–æ–∫–∞ –Ω–µ —Ä–µ—à–∏–ª.
–í –∫–æ–Ω—Ü–µ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ —è –≤—ã—Ä–∞–±–æ—Ç–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è - –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤—É, 
–Ω–æ —Å –∂—ë—Å—Ç–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å —Å –§–∞–∑—ã 2. 
–Ø —Ö–æ—á—É –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ "–º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–§–∞–∑–∞ 2 —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –§–∞–∑—ã 1)".
–Ω—É–∂–Ω–æ:

–°–æ–∑–¥–∞–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
```
# üèóÔ∏è –ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π retry-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

## üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –§–∞–∑–∞ 2 —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –§–∞–∑—ã 1

–ö–∞–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ –≤ TODO2.txt, –Ω–∞—á–∏–Ω–∞–µ–º —Å—Ä–∞–∑—É —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –≤–∑—è–≤ —Ç–æ–ª—å–∫–æ `error-handler.ts` –∏–∑ –§–∞–∑—ã 1.

## üìÖ –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ (3 –¥–Ω—è)

### üìã –î–µ–Ω—å 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π (4-6 —á–∞—Å–æ–≤)

#### –®–∞–≥ 1.1: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
```bash
# –í –ø–∞–ø–∫–µ client/src/
mkdir -p utils services
```

–†–µ–∑—É–ª—å—Ç–∞—Ç:
```
client/src/
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îî‚îÄ‚îÄ error-handler.ts      # –ù–û–í–´–ô - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ ApiClient.ts          # –ù–û–í–´–ô - –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å —Å–æ–±—ã—Ç–∏—è–º–∏  
‚îî‚îÄ‚îÄ hooks/
    ‚îî‚îÄ‚îÄ useRetryQueue.ts      # –ù–û–í–´–ô - –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å retry
```

#### –®–∞–≥ 1.2: –°–æ–∑–¥–∞–Ω–∏–µ error-handler.ts
**–§–∞–π–ª**: `client/src/utils/error-handler.ts`

```typescript
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ API
export enum ErrorType {
  PROXY_UNAVAILABLE = 'proxy_unavailable',    // –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω  
  NETWORK_ERROR = 'network_error',            // –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  API_OVERLOADED = 'api_overloaded',          // API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (529)
  RATE_LIMITED = 'rate_limited',              // –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (429)
  AUTHENTICATION = 'authentication',          // –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º (401, 403)
  INSUFFICIENT_QUOTA = 'insufficient_quota',  // –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (402)
  UNKNOWN = 'unknown'                         // –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
}

export interface ErrorInfo {
  type: ErrorType;
  code?: number;
  message: string;
  originalError?: any;
  retryable: boolean;
  userMessage: string;           // –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  recommendation: string;        // –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  retryAfter?: number;          // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–º—Å)
  severity: 'low' | 'medium' | 'high' | 'critical';
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
export function analyzeError(error: any): ErrorInfo {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:', error);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
  if (error?.response?.status || error?.status) {
    const status = error.response?.status || error.status;
    return analyzeHttpError(status, error);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ network –æ—à–∏–±–æ–∫
  if (error?.code || error?.message) {
    return analyzeNetworkError(error);
  }

  // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.UNKNOWN,
    message: error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    originalError: error,
    retryable: true,
    userMessage: 'üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    recommendation: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç',
    severity: 'medium'
  };
}

function analyzeHttpError(status: number, error: any): ErrorInfo {
  switch (status) {
    case 429:
      return {
        type: ErrorType.RATE_LIMITED,
        code: 429,
        message: 'Rate limit exceeded',
        originalError: error,
        retryable: true,
        userMessage: 'üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Claude API',
        recommendation: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π',
        retryAfter: extractRetryAfter(error),
        severity: 'medium'
      };

    case 529:
      return {
        type: ErrorType.API_OVERLOADED,
        code: 529,
        message: 'Service temporarily overloaded',
        originalError: error,
        retryable: true,
        userMessage: 'üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
        recommendation: '–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        severity: 'high'
      };

    case 401:
    case 403:
      return {
        type: ErrorType.AUTHENTICATION,
        code: status,
        message: 'Authentication failed',
        originalError: error,
        retryable: false,
        userMessage: 'üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API',
        recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞',
        severity: 'critical'
      };

    case 402:
      return {
        type: ErrorType.INSUFFICIENT_QUOTA,
        code: 402,
        message: 'Insufficient quota',
        originalError: error,
        retryable: false,
        userMessage: 'üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ',
        recommendation: '–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Anthropic',
        severity: 'critical'
      };

    case 500:
    case 502:
    case 503:
    case 504:
      return {
        type: ErrorType.API_OVERLOADED,
        code: status,
        message: 'Server error',
        originalError: error,
        retryable: true,
        userMessage: 'üî¥ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Claude API',
        recommendation: '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç',
        severity: 'high'
      };

    default:
      return {
        type: ErrorType.UNKNOWN,
        code: status,
        message: `HTTP ${status}`,
        originalError: error,
        retryable: status >= 500,
        userMessage: `üî¥ –û—à–∏–±–∫–∞ HTTP ${status}`,
        recommendation: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
        severity: 'medium'
      };
  }
}

function analyzeNetworkError(error: any): ErrorInfo {
  const errorCode = error.code?.toUpperCase() || '';
  const errorMessage = error.message?.toLowerCase() || '';

  // –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  if (errorCode === 'ECONNREFUSED' || errorMessage.includes('econnrefused')) {
    return {
      type: ErrorType.PROXY_UNAVAILABLE,
      message: 'Connection refused to proxy',
      originalError: error,
      retryable: true,
      userMessage: 'üü† –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      recommendation: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π "npm start" –≤ –ø–∞–ø–∫–µ server',
      severity: 'high'
    };
  }

  // –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  if (errorCode.includes('ENOTFOUND') || errorCode.includes('ECONNRESET') || 
      errorMessage.includes('network error') || errorMessage.includes('timeout')) {
    return {
      type: ErrorType.NETWORK_ERROR,
      message: 'Network connectivity issues',
      originalError: error,
      retryable: true,
      userMessage: 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º',
      recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
      severity: 'medium'
    };
  }

  // Fallback –¥–ª—è network –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.NETWORK_ERROR,
    message: error.message || 'Network error',
    originalError: error,
    retryable: true,
    userMessage: 'üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
    recommendation: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É',
    severity: 'medium'
  };
}

function extractRetryAfter(error: any): number | undefined {
  const retryAfter = error?.response?.headers?.['retry-after'];
  if (retryAfter) {
    const seconds = parseInt(retryAfter, 10);
    if (!isNaN(seconds)) {
      return seconds * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    }
  }
  return undefined;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function getRetryDelay(errorType: ErrorType, attempt: number, retryAfter?: number): number {
  // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∫–∞–∑–∞–ª Retry-After, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (retryAfter) {
    return retryAfter;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const configs = {
    [ErrorType.API_OVERLOADED]: { base: 10000, multiplier: 1.5 }, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫
    [ErrorType.RATE_LIMITED]: { base: 5000, multiplier: 2 },      // –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫  
    [ErrorType.PROXY_UNAVAILABLE]: { base: 2000, multiplier: 1.8 }, // –ø—Ä–æ–∫—Å–∏
    [ErrorType.NETWORK_ERROR]: { base: 1000, multiplier: 2 },     // –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    [ErrorType.UNKNOWN]: { base: 1000, multiplier: 2 }            // –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  };

  const config = configs[errorType] || configs[ErrorType.UNKNOWN];
  const delay = config.base * Math.pow(config.multiplier, attempt - 1);
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - 60 —Å–µ–∫—É–Ω–¥
  return Math.min(delay, 60000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function isRetryable(errorType: ErrorType): boolean {
  const nonRetryableTypes = [
    ErrorType.AUTHENTICATION,
    ErrorType.INSUFFICIENT_QUOTA
  ];
  
  return !nonRetryableTypes.includes(errorType);
}
```

#### –®–∞–≥ 1.3: –°–æ–∑–¥–∞–Ω–∏–µ ApiClient.ts  
**–§–∞–π–ª**: `client/src/services/ApiClient.ts`

```typescript
// –ú–æ–¥—É–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ retry
import { callClaude } from '../claude';
import { analyzeError, ErrorInfo, getRetryDelay, isRetryable, ErrorType } from '../utils/error-handler';

// –ü—Ä–æ—Å—Ç–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è EventEmitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Node.js
class SimpleEventEmitter {
  private events: Map<string, Function[]> = new Map();

  on(event: string, listener: Function): void {
    if (!this.events.has(event)) {
      this.events.set(event, []);
    }
    this.events.get(event)!.push(listener);
  }

  off(event: string, listener: Function): void {
    const listeners = this.events.get(event);
    if (listeners) {
      const index = listeners.indexOf(listener);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
  }

  emit(event: string, ...args: any[]): void {
    const listeners = this.events.get(event);
    if (listeners) {
      listeners.forEach(listener => {
        try {
          listener(...args);
        } catch (error) {
          console.error(`Error in event listener for ${event}:`, error);
        }
      });
    }
  }

  removeAllListeners(event?: string): void {
    if (event) {
      this.events.delete(event);
    } else {
      this.events.clear();
    }
  }
}

export interface ApiClientOptions {
  maxRetries?: number;
  debug?: boolean;
  enableEvents?: boolean;
}

export interface ApiClientStats {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  retriesPerformed: number;
  lastRequestTime: number;
  errorsByType: Record<string, number>;
}

export class ApiClient extends SimpleEventEmitter {
  private options: Required<ApiClientOptions>;
  private stats: ApiClientStats;

  constructor(options: ApiClientOptions = {}) {
    super();
    
    this.options = {
      maxRetries: 5,
      debug: false,
      enableEvents: true,
      ...options
    };

    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {}
    };

    if (this.options.debug) {
      console.log('üöÄ ApiClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', this.options);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry
   */
  async request(prompt: string, options: { chunkInfo?: string } = {}): Promise<string> {
    this.stats.totalRequests++;
    this.stats.lastRequestTime = Date.now();

    if (this.options.debug) {
      console.log(`üì§ ApiClient: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ 1/${this.options.maxRetries})`);
    }

    for (let attempt = 1; attempt <= this.options.maxRetries; attempt++) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if (this.options.enableEvents) {
          this.emit('requestStart', { 
            attempt, 
            maxRetries: this.options.maxRetries, 
            chunkInfo: options.chunkInfo 
          });
        }

        const result = await callClaude(prompt);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if (result.startsWith('[ERROR:')) {
          const errorData = JSON.parse(result.slice(7, -1));
          throw errorData;
        }

        // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.stats.successfulRequests++;
        
        if (this.options.enableEvents) {
          this.emit('requestSuccess', { 
            attempt, 
            result: result.substring(0, 100) + '...', 
            chunkInfo: options.chunkInfo 
          });
        }

        if (this.options.debug) {
          console.log(`‚úÖ ApiClient: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ ${attempt} –ø–æ–ø—ã—Ç–æ–∫`);
        }

        return result;

      } catch (error) {
        const errorInfo = analyzeError(error);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.errorsByType[errorInfo.type] = (this.stats.errorsByType[errorInfo.type] || 0) + 1;

        if (this.options.debug) {
          console.log(`‚ùå ApiClient: –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, errorInfo.userMessage);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (this.options.enableEvents) {
          this.emit('requestError', { 
            attempt, 
            maxRetries: this.options.maxRetries,
            errorInfo, 
            chunkInfo: options.chunkInfo,
            willRetry: attempt < this.options.maxRetries && isRetryable(errorInfo.type)
          });

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫  
          if (errorInfo.type === ErrorType.RATE_LIMITED) {
            this.emit('rateLimited', errorInfo);
          } else if (errorInfo.type === ErrorType.API_OVERLOADED) {
            this.emit('apiOverloaded', errorInfo);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (attempt >= this.options.maxRetries || !isRetryable(errorInfo.type)) {
          this.stats.failedRequests++;
          
          if (this.options.enableEvents) {
            this.emit('requestFailed', { 
              finalAttempt: attempt, 
              errorInfo, 
              chunkInfo: options.chunkInfo 
            });
          }

          throw errorInfo;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥–µ–º
        const delay = getRetryDelay(errorInfo.type, attempt, errorInfo.retryAfter);
        
        if (this.options.debug) {
          console.log(`‚è≥ ApiClient: –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        }

        if (this.options.enableEvents) {
          this.emit('retryDelay', { 
            attempt: attempt + 1, 
            delay, 
            errorType: errorInfo.type,
            chunkInfo: options.chunkInfo 
          });
        }

        this.stats.retriesPerformed++;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    throw new Error('Unexpected end of retry loop');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStats(): ApiClientStats {
    return { ...this.stats };
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats(): void {
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {}
    };

    if (this.options.debug) {
      console.log('üìä ApiClient: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
   */
  async healthCheck(): Promise<{ status: 'ok' | 'error'; message: string }> {
    try {
      await this.request('Test connection', { chunkInfo: 'health-check' });
      return { status: 'ok', message: 'API –¥–æ—Å—Ç—É–ø–µ–Ω' };
    } catch (error) {
      const errorInfo = error as ErrorInfo;
      return { 
        status: 'error', 
        message: errorInfo.userMessage 
      };
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const apiClient = new ApiClient({
  debug: process.env.NODE_ENV === 'development',
  enableEvents: true
});
```

#### –®–∞–≥ 1.4: –°–æ–∑–¥–∞–Ω–∏–µ useRetryQueue.ts
**–§–∞–π–ª**: `client/src/hooks/useRetryQueue.ts`

```typescript
// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é retry —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ localStorage
import { useState, useCallback, useEffect } from 'react';
import { ErrorInfo } from '../utils/error-handler';
import { apiClient } from '../services/ApiClient';

export interface QueueItem {
  id: string;
  chunk: string;
  errorInfo: ErrorInfo;
  attempts: number;
  timestamp: number;
  chunkInfo?: string;
  lastAttemptTime?: number;
}

export interface RetryQueueStats {
  totalItems: number;
  processing: boolean;
  processed: number;
  failed: number;
  lastProcessTime?: number;
}

export interface UseRetryQueueReturn {
  queue: QueueItem[];
  stats: RetryQueueStats;
  enqueue: (chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => void;
  processQueue: (onProgress?: (current: number, total: number) => void) => Promise<{
    processed: number;
    successful: number;
    failed: number;
  }>;
  removeFromQueue: (id: string) => void;
  clearQueue: () => void;
  isProcessing: boolean;
}

const STORAGE_KEY = 'latvian-app-retry-queue';
const MAX_QUEUE_SIZE = 50; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

export function useRetryQueue(): UseRetryQueueReturn {
  const [queue, setQueue] = useState<QueueItem[]>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) {
        const parsed = JSON.parse(saved);
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å retry: ${parsed.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return parsed;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage:', error);
    }
    return [];
  });

  const [isProcessing, setIsProcessing] = useState(false);
  const [stats, setStats] = useState<RetryQueueStats>({
    totalItems: 0,
    processing: false,
    processed: 0,
    failed: 0
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(queue));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setStats(prev => ({
        ...prev,
        totalItems: queue.length
      }));
      
      console.log(`üíæ –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ localStorage:', error);
    }
  }, [queue]);

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  const enqueue = useCallback((chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => {
    const item: QueueItem = {
      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      chunk,
      errorInfo,
      attempts: 0,
      timestamp: Date.now(),
      chunkInfo
    };

    setQueue(prevQueue => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞–Ω–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const existingIndex = prevQueue.findIndex(
        existingItem => existingItem.chunk === chunk
      );

      if (existingIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const updatedQueue = [...prevQueue];
        updatedQueue[existingIndex] = {
          ...updatedQueue[existingIndex],
          errorInfo,
          timestamp: Date.now(),
          chunkInfo
        };
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏: ${item.id}`);
        return updatedQueue;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const newQueue = [...prevQueue, item];
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      if (newQueue.length > MAX_QUEUE_SIZE) {
        console.warn(`‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –£–¥–∞–ª—è—é—Ç—Å—è —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.`);
        return newQueue.slice(-MAX_QUEUE_SIZE);
      }

      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å retry: ${item.id} (${errorInfo.userMessage})`);
      return newQueue;
    });
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const processQueue = useCallback(async (
    onProgress?: (current: number, total: number) => void
  ): Promise<{ processed: number; successful: number; failed: number }> => {
    
    if (isProcessing) {
      console.warn('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return { processed: 0, successful: 0, failed: 0 };
    }

    if (queue.length === 0) {
      console.log('‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å retry –ø—É—Å—Ç–∞');
      return { processed: 0, successful: 0, failed: 0 };
    }

    setIsProcessing(true);
    setStats(prev => ({ ...prev, processing: true, processed: 0, failed: 0 }));

    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

    const results = {
      processed: 0,
      successful: 0,
      failed: 0
    };

    const queueCopy = [...queue];
    const successfulIds: string[] = [];

    for (let i = 0; i < queueCopy.length; i++) {
      const item = queueCopy[i];
      
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        onProgress?.(i + 1, queueCopy.length);
        
        setStats(prev => ({
          ...prev,
          processed: i + 1
        }));

        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}/${queueCopy.length}: ${item.id}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        item.attempts++;
        item.lastAttemptTime = Date.now();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ApiClient
        const result = await apiClient.request(item.chunk, { 
          chunkInfo: item.chunkInfo || `retry-queue-item-${i + 1}` 
        });

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${item.id}`);
        
        successfulIds.push(item.id);
        results.successful++;

      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item.id}:`, error);
        results.failed++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –æ—á–µ—Ä–µ–¥–∏
        if (error && typeof error === 'object') {
          item.errorInfo = error as ErrorInfo;
        }
      }

      results.processed++;
    }

    // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if (successfulIds.length > 0) {
      setQueue(prevQueue => 
        prevQueue.filter(item => !successfulIds.includes(item.id))
      );
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${successfulIds.length} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    setIsProcessing(false);
    setStats(prev => ({ 
      ...prev, 
      processing: false, 
      lastProcessTime: Date.now() 
    }));

    console.log(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, results);
    return results;
  }, [queue, isProcessing]);

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  const removeFromQueue = useCallback((id: string) => {
    setQueue(prevQueue => {
      const filtered = prevQueue.filter(item => item.id !== id);
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${id}`);
      return filtered;
    });
  }, []);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const clearQueue = useCallback(() => {
    setQueue([]);
    setStats(prev => ({
      ...prev,
      totalItems: 0,
      processed: 0,
      failed: 0
    }));
    console.log('üßπ –û—á–µ—Ä–µ–¥—å retry –æ—á–∏—â–µ–Ω–∞');
  }, []);

  return {
    queue,
    stats,
    enqueue,
    processQueue,
    removeFromQueue,
    clearQueue,
    isProcessing
  };
}
```

### üìã –î–µ–Ω—å 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π (6-8 —á–∞—Å–æ–≤)

#### –®–∞–≥ 2.1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts
–ù–∞–π—Ç–∏ –≤ `client/src/hooks/useProcessing.ts` –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å retry queue.

**–í –∏–º–ø–æ—Ä—Ç—ã –¥–æ–±–∞–≤–∏—Ç—å:**
```typescript
import { useRetryQueue } from './useRetryQueue';
import { analyzeError, ErrorType } from '../utils/error-handler';
import { apiClient } from '../services/ApiClient';
```

**–í —Ñ—É–Ω–∫—Ü–∏—é useProcessing –¥–æ–±–∞–≤–∏—Ç—å:**
```typescript
const retryQueue = useRetryQueue();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π ApiClient
useEffect(() => {
  const handleRequestError = (eventData: any) => {
    const { errorInfo, chunkInfo, willRetry } = eventData;
    
    // –ï—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ retry, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    if (!willRetry && errorInfo.retryable) {
      console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫');
      // –ù–ï —Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—à–∏–±–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å  
      retryQueue.enqueue(chunkInfo?.originalChunk || '', errorInfo, chunkInfo);
    }
  };

  apiClient.on('requestError', handleRequestError);
  
  return () => {
    apiClient.off('requestError', handleRequestError);
  };
}, [retryQueue.enqueue]);

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry queue
const processRetryQueue = useCallback(async (
  onProgress?: (current: number, total: number) => void
) => {
  return await retryQueue.processQueue(onProgress);
}, [retryQueue.processQueue]);
```

**–í–µ—Ä–Ω—É—Ç—å –≤ return –æ–±—ä–µ–∫—Ç–µ:**
```typescript
return {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—Ç—ã
  processRetryQueue,
  retryQueue: {
    queue: retryQueue.queue,
    stats: retryQueue.stats,
    isProcessing: retryQueue.isProcessing,
    clearQueue: retryQueue.clearQueue
  }
};
```

#### –®–∞–≥ 2.2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar –≤ App.tsx  
–ù–∞–π—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç APIStatusBar –≤ `client/src/App.tsx` –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å retry queue.

**–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π APIStatusBar:**
```typescript
interface APIStatusBarProps {
  flashcards: FlashcardNew[];
  retryQueue?: {
    queue: any[];
    stats: any;
    isProcessing: boolean;
  };
  onRetryProcessing?: () => Promise<any>;
}

const APIStatusBar: React.FC<APIStatusBarProps> = ({ 
  flashcards, 
  retryQueue, 
  onRetryProcessing 
}) => {
  // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const cardsNeedingReprocessing = flashcards.filter(card =>
    (card as any).needsReprocessing === true
  );

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º retry queue
  const totalProblems = retryQueue ? retryQueue.queue.length : cardsNeedingReprocessing.length;
  
  if (totalProblems === 0) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º –∏–∑ retry queue
  const problemTypes = retryQueue ? 
    retryQueue.queue.map(item => item.errorInfo?.type).filter(Boolean) :
    [];

  const hasApiOverload = problemTypes.includes('api_overloaded');
  const hasRateLimit = problemTypes.includes('rate_limited');
  const hasNetworkErrors = problemTypes.includes('network_error') || problemTypes.includes('proxy_unavailable');

  const getMessage = () => {
    if (hasApiOverload) return 'üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω';
    if (hasRateLimit) return 'üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';  
    if (hasNetworkErrors) return 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º';
    return `üîÑ ${totalProblems} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
  };

  const getRecommendation = () => {
    if (hasApiOverload) return '–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç';
    if (hasRateLimit) return '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π';
    if (hasNetworkErrors) return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞';
    return '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤';
  };

  return (
    <div style={{ 
      background: 'rgba(255,255,255,0.1)', 
      padding: '12px', 
      borderRadius: '8px', 
      margin: '10px 0' 
    }}>
      <div style={{ marginBottom: '8px' }}>
        <strong>{getMessage()}</strong>
        {retryQueue?.isProcessing && (
          <span style={{ marginLeft: '10px', color: '#4CAF50' }}>
            üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...
          </span>
        )}
      </div>
      
      <div style={{ fontSize: '14px', opacity: 0.8, marginBottom: '10px' }}>
        {getRecommendation()}
      </div>

      {retryQueue && retryQueue.queue.length > 0 && (
        <div style={{ fontSize: '12px', marginBottom: '10px' }}>
          <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:</strong>
          {retryQueue.queue.slice(0, 3).map((item, index) => (
            <div key={item.id} style={{ marginLeft: '10px', opacity: 0.7 }}>
              ‚Ä¢ {item.chunk.substring(0, 50)}...
            </div>
          ))}
          {retryQueue.queue.length > 3 && (
            <div style={{ marginLeft: '10px', opacity: 0.5 }}>
              ... –∏ –µ—â–µ {retryQueue.queue.length - 3}
            </div>
          )}
        </div>
      )}

      <button
        onClick={onRetryProcessing}
        disabled={retryQueue?.isProcessing}
        style={{
          background: retryQueue?.isProcessing ? '#666' : '#4CAF50',
          color: 'white',
          border: 'none',
          padding: '8px 16px',
          borderRadius: '4px',
          cursor: retryQueue?.isProcessing ? 'not-allowed' : 'pointer'
        }}
      >
        {retryQueue?.isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É'}
      </button>
    </div>
  );
};
```

#### –®–∞–≥ 2.3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ App.tsx –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ props
–í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ App –¥–æ–±–∞–≤–∏—Ç—å:

```typescript
// –í –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ useProcessing:
const {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
  processRetryQueue,
  retryQueue
} = useProcessing(inputText, setMode);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ retry
const [retryInProgress, setRetryInProgress] = React.useState(false);

const handleRetryProcessing = React.useCallback(async () => {
  if (retryInProgress || !processRetryQueue) return;
  
  setRetryInProgress(true);
  try {
    const results = await processRetryQueue((current, total) => {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞: ${current}/${total}`);
    });
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã retry:', results);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ retry:', error);
  } finally {
    setRetryInProgress(false);
  }
}, [processRetryQueue, retryInProgress]);

// –í JSX –æ–±–Ω–æ–≤–∏—Ç—å APIStatusBar:
<APIStatusBar 
  flashcards={flashcards}
  retryQueue={retryQueue}
  onRetryProcessing={handleRetryProcessing}
/>
```

### üìã –î–µ–Ω—å 3: –û—Ç–ª–∞–¥–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (4-6 —á–∞—Å–æ–≤)

#### –®–∞–≥ 3.1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
1. **–ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞**: `npm run dev` –≤ client, `npm start` –≤ server  
2. **–¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏**: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞
3. **–¢–µ—Å—Ç —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø—Ä–æ–∫—Å–∏**: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å retry queue
4. **–¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏**: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å

#### –®–∞–≥ 3.2: –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º  
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å console.log –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—é

#### –®–∞–≥ 3.3: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤ production)
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ localStorage
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤

## ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏

–ü–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —É –≤–∞—Å –±—É–¥–µ—Ç:

1. **‚úÖ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç —á–µ—Ç–∫—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
2. **‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å**: –û—á–µ—Ä–µ–¥—å retry —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
3. **‚úÖ –°–æ–±—ã—Ç–∏—è**: ApiClient –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
4. **‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
5. **‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ batch**: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–§–∞–∑–∞ 3)

–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é:
- Batch processing –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
- Prompt caching –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π retry

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏

1. **–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**: –°—Ç–∞—Ä—ã–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
2. **–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ**: –ú–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ  
3. **–û—Ç–∫–∞—Ç**: –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
4. **–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å**: –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
```
–Ø —Å–æ–∑–¥–∞–ª –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã retry-—Å–∏—Å—Ç–µ–º—ã. –ü–ª–∞–Ω –≤–∫–ª—é—á–∞–µ—Ç:

3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª—è:

error-handler.ts - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
ApiClient.ts - –º–æ–¥—É–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å —Å–æ–±—ã—Ç–∏—è–º–∏
useRetryQueue.ts - —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é


3-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:

–î–µ–Ω—å 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π
–î–µ–Ω—å 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
–î–µ–Ω—å 3: –û—Ç–ª–∞–¥–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è


–ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏, —Å—Ç—Ä–æ–∫–∞–º–∏ –∫–æ–¥–∞ –∏ –º–µ—Å—Ç–∞–º–∏ –≤—Å—Ç–∞–≤–∫–∏

–®–∞–≥ 1.2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è - error-handler.ts
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª client/src/utils/error-handler.ts –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ –∫–æ–¥:
```
// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ API
export enum ErrorType {
  PROXY_UNAVAILABLE = "proxy_unavailable", // –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  NETWORK_ERROR = "network_error", // –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  API_OVERLOADED = "api_overloaded", // API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (529)
  RATE_LIMITED = "rate_limited", // –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (429)
  AUTHENTICATION = "authentication", // –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º (401, 403)
  INSUFFICIENT_QUOTA = "insufficient_quota", // –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (402)
  UNKNOWN = "unknown", // –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
}

export interface ErrorInfo {
  type: ErrorType;
  code?: number;
  message: string;
  originalError?: any;
  retryable: boolean;
  userMessage: string; // –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  recommendation: string; // –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  retryAfter?: number; // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–º—Å)
  severity: "low" | "medium" | "high" | "critical";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
export function analyzeError(error: any): ErrorInfo {
  console.log("üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:", error);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
  if (error?.response?.status || error?.status) {
    const status = error.response?.status || error.status;
    return analyzeHttpError(status, error);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ network –æ—à–∏–±–æ–∫
  if (error?.code || error?.message) {
    return analyzeNetworkError(error);
  }

  // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.UNKNOWN,
    message: error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    originalError: error,
    retryable: true,
    userMessage: "üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    recommendation: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
    severity: "medium",
  };
}

function analyzeHttpError(status: number, error: any): ErrorInfo {
  switch (status) {
    case 429:
      return {
        type: ErrorType.RATE_LIMITED,
        code: 429,
        message: "Rate limit exceeded",
        originalError: error,
        retryable: true,
        userMessage: "üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Claude API",
        recommendation: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π",
        retryAfter: extractRetryAfter(error),
        severity: "medium",
      };

    case 529:
      return {
        type: ErrorType.API_OVERLOADED,
        code: 529,
        message: "Service temporarily overloaded",
        originalError: error,
        retryable: true,
        userMessage: "üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        recommendation: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        severity: "high",
      };

    case 401:
    case 403:
      return {
        type: ErrorType.AUTHENTICATION,
        code: status,
        message: "Authentication failed",
        originalError: error,
        retryable: false,
        userMessage: "üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API",
        recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
        severity: "critical",
      };

    case 402:
      return {
        type: ErrorType.INSUFFICIENT_QUOTA,
        code: 402,
        message: "Insufficient quota",
        originalError: error,
        retryable: false,
        userMessage: "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ",
        recommendation: "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Anthropic",
        severity: "critical",
      };

    case 500:
    case 502:
    case 503:
    case 504:
      return {
        type: ErrorType.API_OVERLOADED,
        code: status,
        message: "Server error",
        originalError: error,
        retryable: true,
        userMessage: "üî¥ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Claude API",
        recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
        severity: "high",
      };

    default:
      return {
        type: ErrorType.UNKNOWN,
        code: status,
        message: `HTTP ${status}`,
        originalError: error,
        retryable: status >= 500,
        userMessage: `üî¥ –û—à–∏–±–∫–∞ HTTP ${status}`,
        recommendation: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        severity: "medium",
      };
  }
}

function analyzeNetworkError(error: any): ErrorInfo {
  const errorCode = error.code?.toUpperCase() || "";
  const errorMessage = error.message?.toLowerCase() || "";

  // –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  if (errorCode === "ECONNREFUSED" || errorMessage.includes("econnrefused")) {
    return {
      type: ErrorType.PROXY_UNAVAILABLE,
      message: "Connection refused to proxy",
      originalError: error,
      retryable: true,
      userMessage: "üü† –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
      recommendation: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π "npm start" –≤ –ø–∞–ø–∫–µ server',
      severity: "high",
    };
  }

  // –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  if (
    errorCode.includes("ENOTFOUND") ||
    errorCode.includes("ECONNRESET") ||
    errorMessage.includes("network error") ||
    errorMessage.includes("timeout")
  ) {
    return {
      type: ErrorType.NETWORK_ERROR,
      message: "Network connectivity issues",
      originalError: error,
      retryable: true,
      userMessage: "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º",
      recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
      severity: "medium",
    };
  }

  // Fallback –¥–ª—è network –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.NETWORK_ERROR,
    message: error.message || "Network error",
    originalError: error,
    retryable: true,
    userMessage: "üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
    recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
    severity: "medium",
  };
}

function extractRetryAfter(error: any): number | undefined {
  const retryAfter = error?.response?.headers?.["retry-after"];
  if (retryAfter) {
    const seconds = parseInt(retryAfter, 10);
    if (!isNaN(seconds)) {
      return seconds * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    }
  }
  return undefined;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function getRetryDelay(errorType: ErrorType, attempt: number, retryAfter?: number): number {
  // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∫–∞–∑–∞–ª Retry-After, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (retryAfter) {
    return retryAfter;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const configs = {
    [ErrorType.API_OVERLOADED]: { base: 10000, multiplier: 1.5 }, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫
    [ErrorType.RATE_LIMITED]: { base: 5000, multiplier: 2 }, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫
    [ErrorType.PROXY_UNAVAILABLE]: { base: 2000, multiplier: 1.8 }, // –ø—Ä–æ–∫—Å–∏
    [ErrorType.NETWORK_ERROR]: { base: 1000, multiplier: 2 }, // –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    [ErrorType.UNKNOWN]: { base: 1000, multiplier: 2 }, // –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  };

  const config = configs[errorType] || configs[ErrorType.UNKNOWN];
  const delay = config.base * Math.pow(config.multiplier, attempt - 1);

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - 60 —Å–µ–∫—É–Ω–¥
  return Math.min(delay, 60000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function isRetryable(errorType: ErrorType): boolean {
  const nonRetryableTypes = [ErrorType.AUTHENTICATION, ErrorType.INSUFFICIENT_QUOTA];

  return !nonRetryableTypes.includes(errorType);
}

```

–ü–†–û–ì–†–ï–°–°: –î–µ–Ω—å 1, –®–∞–≥ 1.2 –∑–∞–≤–µ—Ä—à–µ–Ω
–°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –°–æ–∑–¥–∞–Ω–∏–µ services/ApiClient.ts
–®–∞–≥ 1.3: –°–æ–∑–¥–∞–Ω–∏–µ ApiClient.ts
üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è ApiClient
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª client/src/services/ApiClient.ts –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ –∫–æ–¥:
```
// –ú–æ–¥—É–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ retry
import { callClaude } from "../claude";
import {
  analyzeError,
  ErrorInfo,
  getRetryDelay,
  isRetryable,
  ErrorType,
} from "../utils/error-handler";

// –ü—Ä–æ—Å—Ç–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è EventEmitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Node.js
class SimpleEventEmitter {
  private events: Map<string, Function[]> = new Map();

  on(event: string, listener: Function): void {
    if (!this.events.has(event)) {
      this.events.set(event, []);
    }
    this.events.get(event)!.push(listener);
  }

  off(event: string, listener: Function): void {
    const listeners = this.events.get(event);
    if (listeners) {
      const index = listeners.indexOf(listener);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
  }

  emit(event: string, ...args: any[]): void {
    const listeners = this.events.get(event);
    if (listeners) {
      listeners.forEach(listener => {
        try {
          listener(...args);
        } catch (error) {
          console.error(`Error in event listener for ${event}:`, error);
        }
      });
    }
  }

  removeAllListeners(event?: string): void {
    if (event) {
      this.events.delete(event);
    } else {
      this.events.clear();
    }
  }
}

export interface ApiClientOptions {
  maxRetries?: number;
  debug?: boolean;
  enableEvents?: boolean;
}

export interface ApiClientStats {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  retriesPerformed: number;
  lastRequestTime: number;
  errorsByType: Record<string, number>;
}

export class ApiClient extends SimpleEventEmitter {
  private options: Required<ApiClientOptions>;
  private stats: ApiClientStats;

  constructor(options: ApiClientOptions = {}) {
    super();

    this.options = {
      maxRetries: 5,
      debug: false,
      enableEvents: true,
      ...options,
    };

    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {},
    };

    if (this.options.debug) {
      console.log("üöÄ ApiClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:", this.options);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry
   */
  async request(prompt: string, options: { chunkInfo?: string } = {}): Promise<string> {
    this.stats.totalRequests++;
    this.stats.lastRequestTime = Date.now();

    if (this.options.debug) {
      console.log(`üì§ ApiClient: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ 1/${this.options.maxRetries})`);
    }

    for (let attempt = 1; attempt <= this.options.maxRetries; attempt++) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if (this.options.enableEvents) {
          this.emit("requestStart", {
            attempt,
            maxRetries: this.options.maxRetries,
            chunkInfo: options.chunkInfo,
          });
        }

        const result = await callClaude(prompt);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if (result.startsWith("[ERROR:")) {
          const errorData = JSON.parse(result.slice(7, -1));
          throw errorData;
        }

        // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.stats.successfulRequests++;

        if (this.options.enableEvents) {
          this.emit("requestSuccess", {
            attempt,
            result: result.substring(0, 100) + "...",
            chunkInfo: options.chunkInfo,
          });
        }

        if (this.options.debug) {
          console.log(`‚úÖ ApiClient: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ ${attempt} –ø–æ–ø—ã—Ç–æ–∫`);
        }

        return result;
      } catch (error) {
        const errorInfo = analyzeError(error);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.errorsByType[errorInfo.type] =
          (this.stats.errorsByType[errorInfo.type] || 0) + 1;

        if (this.options.debug) {
          console.log(`‚ùå ApiClient: –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, errorInfo.userMessage);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (this.options.enableEvents) {
          this.emit("requestError", {
            attempt,
            maxRetries: this.options.maxRetries,
            errorInfo,
            chunkInfo: options.chunkInfo,
            willRetry: attempt < this.options.maxRetries && isRetryable(errorInfo.type),
          });

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
          if (errorInfo.type === ErrorType.RATE_LIMITED) {
            this.emit("rateLimited", errorInfo);
          } else if (errorInfo.type === ErrorType.API_OVERLOADED) {
            this.emit("apiOverloaded", errorInfo);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (attempt >= this.options.maxRetries || !isRetryable(errorInfo.type)) {
          this.stats.failedRequests++;

          if (this.options.enableEvents) {
            this.emit("requestFailed", {
              finalAttempt: attempt,
              errorInfo,
              chunkInfo: options.chunkInfo,
            });
          }

          throw errorInfo;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥–µ–º
        const delay = getRetryDelay(errorInfo.type, attempt, errorInfo.retryAfter);

        if (this.options.debug) {
          console.log(`‚è≥ ApiClient: –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        }

        if (this.options.enableEvents) {
          this.emit("retryDelay", {
            attempt: attempt + 1,
            delay,
            errorType: errorInfo.type,
            chunkInfo: options.chunkInfo,
          });
        }

        this.stats.retriesPerformed++;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    throw new Error("Unexpected end of retry loop");
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStats(): ApiClientStats {
    return { ...this.stats };
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats(): void {
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {},
    };

    if (this.options.debug) {
      console.log("üìä ApiClient: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
   */
  async healthCheck(): Promise<{ status: "ok" | "error"; message: string }> {
    try {
      await this.request("Test connection", { chunkInfo: "health-check" });
      return { status: "ok", message: "API –¥–æ—Å—Ç—É–ø–µ–Ω" };
    } catch (error) {
      const errorInfo = error as ErrorInfo;
      return {
        status: "error",
        message: errorInfo.userMessage,
      };
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const apiClient = new ApiClient({
  debug: process.env.NODE_ENV === "development",
  enableEvents: true,
});

```
–ü–†–û–ì–†–ï–°–°: –î–µ–Ω—å 1, –®–∞–≥ 1.3 –∑–∞–≤–µ—Ä—à–µ–Ω
–°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –°–æ–∑–¥–∞–Ω–∏–µ hooks/useRetryQueue.ts

–®–∞–≥ 1.4: –°–æ–∑–¥–∞–Ω–∏–µ useRetryQueue.ts
üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ö—É–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è retry –æ—á–µ—Ä–µ–¥—å—é
–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª client/src/hooks/useRetryQueue.ts –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç—É–¥–∞ –∫–æ–¥:
```
// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é retry —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ localStorage
import { useState, useCallback, useEffect } from "react";
import { ErrorInfo } from "../utils/error-handler";
import { apiClient } from "../services/ApiClient";

export interface QueueItem {
  id: string;
  chunk: string;
  errorInfo: ErrorInfo;
  attempts: number;
  timestamp: number;
  chunkInfo?: string;
  lastAttemptTime?: number;
}

export interface RetryQueueStats {
  totalItems: number;
  processing: boolean;
  processed: number;
  failed: number;
  lastProcessTime?: number;
}

export interface UseRetryQueueReturn {
  queue: QueueItem[];
  stats: RetryQueueStats;
  enqueue: (chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => void;
  processQueue: (onProgress?: (current: number, total: number) => void) => Promise<{
    processed: number;
    successful: number;
    failed: number;
  }>;
  removeFromQueue: (id: string) => void;
  clearQueue: () => void;
  isProcessing: boolean;
}

const STORAGE_KEY = "latvian-app-retry-queue";
const MAX_QUEUE_SIZE = 50; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

export function useRetryQueue(): UseRetryQueueReturn {
  const [queue, setQueue] = useState<QueueItem[]>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) {
        const parsed = JSON.parse(saved);
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å retry: ${parsed.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return parsed;
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage:", error);
    }
    return [];
  });

  const [isProcessing, setIsProcessing] = useState(false);
  const [stats, setStats] = useState<RetryQueueStats>({
    totalItems: 0,
    processing: false,
    processed: 0,
    failed: 0,
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(queue));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setStats(prev => ({
        ...prev,
        totalItems: queue.length,
      }));

      console.log(`üíæ –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ localStorage:", error);
    }
  }, [queue]);

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  const enqueue = useCallback((chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => {
    const item: QueueItem = {
      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      chunk,
      errorInfo,
      attempts: 0,
      timestamp: Date.now(),
      chunkInfo,
    };

    setQueue(prevQueue => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞–Ω–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const existingIndex = prevQueue.findIndex(existingItem => existingItem.chunk === chunk);

      if (existingIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const updatedQueue = [...prevQueue];
        updatedQueue[existingIndex] = {
          ...updatedQueue[existingIndex],
          errorInfo,
          timestamp: Date.now(),
          chunkInfo,
        };
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏: ${item.id}`);
        return updatedQueue;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const newQueue = [...prevQueue, item];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      if (newQueue.length > MAX_QUEUE_SIZE) {
        console.warn(`‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –£–¥–∞–ª—è—é—Ç—Å—è —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.`);
        return newQueue.slice(-MAX_QUEUE_SIZE);
      }

      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å retry: ${item.id} (${errorInfo.userMessage})`);
      return newQueue;
    });
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const processQueue = useCallback(
    async (
      onProgress?: (current: number, total: number) => void
    ): Promise<{ processed: number; successful: number; failed: number }> => {
      if (isProcessing) {
        console.warn("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        return { processed: 0, successful: 0, failed: 0 };
      }

      if (queue.length === 0) {
        console.log("‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å retry –ø—É—Å—Ç–∞");
        return { processed: 0, successful: 0, failed: 0 };
      }

      setIsProcessing(true);
      setStats(prev => ({ ...prev, processing: true, processed: 0, failed: 0 }));

      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      const results = {
        processed: 0,
        successful: 0,
        failed: 0,
      };

      const queueCopy = [...queue];
      const successfulIds: string[] = [];

      for (let i = 0; i < queueCopy.length; i++) {
        const item = queueCopy[i];

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          onProgress?.(i + 1, queueCopy.length);

          setStats(prev => ({
            ...prev,
            processed: i + 1,
          }));

          console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}/${queueCopy.length}: ${item.id}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          item.attempts++;
          item.lastAttemptTime = Date.now();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ApiClient
          const result = await apiClient.request(item.chunk, {
            chunkInfo: item.chunkInfo || `retry-queue-item-${i + 1}`,
          });

          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${item.id}`);

          successfulIds.push(item.id);
          results.successful++;
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item.id}:`, error);
          results.failed++;

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –æ—á–µ—Ä–µ–¥–∏
          if (error && typeof error === "object") {
            item.errorInfo = error as ErrorInfo;
          }
        }

        results.processed++;
      }

      // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      if (successfulIds.length > 0) {
        setQueue(prevQueue => prevQueue.filter(item => !successfulIds.includes(item.id)));
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${successfulIds.length} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      }

      setIsProcessing(false);
      setStats(prev => ({
        ...prev,
        processing: false,
        lastProcessTime: Date.now(),
      }));

      console.log(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, results);
      return results;
    },
    [queue, isProcessing]
  );

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  const removeFromQueue = useCallback((id: string) => {
    setQueue(prevQueue => {
      const filtered = prevQueue.filter(item => item.id !== id);
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${id}`);
      return filtered;
    });
  }, []);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const clearQueue = useCallback(() => {
    setQueue([]);
    setStats(prev => ({
      ...prev,
      totalItems: 0,
      processed: 0,
      failed: 0,
    }));
    console.log("üßπ –û—á–µ—Ä–µ–¥—å retry –æ—á–∏—â–µ–Ω–∞");
  }, []);

  return {
    queue,
    stats,
    enqueue,
    processQueue,
    removeFromQueue,
    clearQueue,
    isProcessing,
  };
}

```
 –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º.
–°–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É, –î–µ–Ω—å 2 –≤–∫–ª—é—á–∞–µ—Ç:

–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å retry queue
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar –≤ App.tsx –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å retry queue
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ App.tsx –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ props

–ù–∞—á–Ω—É —Å –ø–µ—Ä–≤–æ–≥–æ –∏ —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —à–∞–≥–∞ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ useProcessing.ts —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏.

–ù–∞—á–∏–Ω–∞–µ–º –î–µ–Ω—å 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
üìã –î–µ–Ω—å 2, –®–∞–≥ 2.1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts
–°–µ–π—á–∞—Å –º—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π useProcessing.ts. –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π —à–∞–≥!
–ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª client/src/hooks/useProcessing.ts –∏ –Ω–∞–π–¥–µ–º, –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º useProcessing.ts:
–Ø —Å–æ–∑–¥–∞–ª –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å useProcessing.ts —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π. –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:

–í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å useRetryQueue
–ü–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —á–µ—Ä–µ–∑ error-handler
–ù–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é processRetryQueue
–ü–æ–ª–Ω—ã–π return –æ–±—ä–µ–∫—Ç —Å –Ω–æ–≤—ã–º–∏ retry —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–°–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–æ –¥–æ–±–∞–≤–∏–ª –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª.
```
import React from "react";
import type { FlashcardNew, AppMode, AppState, ProcessingProgress } from "../types";
import { callClaude } from "../claude";
import { textToCards, mergeCardsByBaseForm, splitIntoSentences } from "../utils/cardUtils";

// –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { useRetryQueue } from "./useRetryQueue";
import { analyzeError, ErrorType } from "../utils/error-handler";
import { apiClient } from "../services/ApiClient";

// –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–†–û–ï–ö–¢–ê
import { defaultConfig } from "../config";

export function useProcessing(inputText: string, setMode: (mode: AppMode) => void) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [state, setState] = React.useState<AppState>("input");
  const [flashcards, setFlashcards] = React.useState<FlashcardNew[]>([]);
  const [translationText, setTranslationText] = React.useState("");
  const [processingProgress, setProcessingProgress] = React.useState<ProcessingProgress>({
    current: 0,
    total: 0,
    step: "",
  });
  const [formTranslations, setFormTranslations] = React.useState<Map<string, string>>(new Map());

  // –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è retry queue –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const retryQueue = useRetryQueue();

  // –ù–û–í–û–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
  React.useEffect(() => {
    const handleRequestError = (eventData: any) => {
      const { errorInfo, chunkInfo, willRetry } = eventData;

      console.log("üîç ApiClient error event:", {
        errorType: errorInfo.type,
        willRetry,
        chunkInfo: chunkInfo?.description || "unknown-chunk",
      });

      // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π retry –∏—Å—á–µ—Ä–ø–∞–Ω –∏ –æ—à–∏–±–∫–∞ retryable, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      if (!willRetry && errorInfo.retryable && chunkInfo?.originalChunk) {
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫");
        retryQueue.enqueue(
          chunkInfo.originalChunk,
          errorInfo,
          chunkInfo.description || `chunk-${Date.now()}`
        );
      }
    };

    const handleRateLimit = (errorInfo: any) => {
      console.warn("‚ö†Ô∏è Rate limit –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
    };

    const handleApiOverload = (errorInfo: any) => {
      console.warn("‚ö†Ô∏è API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient
    apiClient.on("requestError", handleRequestError);
    apiClient.on("rateLimited", handleRateLimit);
    apiClient.on("apiOverloaded", handleApiOverload);

    return () => {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      apiClient.off("requestError", handleRequestError);
      apiClient.off("rateLimited", handleRateLimit);
      apiClient.off("apiOverloaded", handleApiOverload);
    };
  }, [retryQueue.enqueue]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const saveFormTranslations = React.useCallback((cards: FlashcardNew[]) => {
    cards.forEach(card => {
      if (card.base_form && card.translations && card.translations.length > 0) {
        const translation = card.translations[0];
        setFormTranslations(prev => new Map(prev.set(card.base_form, translation)));
      }
    });
  }, []);

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ—à–∏–±–æ–∫
  const processChunkWithContext = React.useCallback(
    async (
      chunk: string,
      chunkIndex: number,
      totalChunks: number,
      contextChunks?: string[]
    ): Promise<FlashcardNew[]> => {
      console.log(
        `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${chunkIndex + 1}/${totalChunks}: "${chunk.substring(0, 50)}..."`
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º contextChunks –Ω–∞ undefined –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const safeContextChunks = contextChunks || [];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
      let contextText = "";
      if (safeContextChunks.length > 1) {
        const prevChunk = chunkIndex > 0 ? safeContextChunks[chunkIndex - 1] : "";
        const nextChunk =
          chunkIndex < safeContextChunks.length - 1 ? safeContextChunks[chunkIndex + 1] : "";

        if (prevChunk || nextChunk) {
          contextText = `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${prevChunk}\n–°–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${nextChunk}`;
        }
      }

      // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      const config = defaultConfig.processing;

      const prompt = config.enablePhraseExtraction
        ? // –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢: —Å—Ç—Ä–æ–≥–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ—Ç–µ
          `Analyze these Latvian sentences systematically for Russian learners: "${chunk}"\n\n` +
          `STEP 1: Extract EVERY INDIVIDUAL WORD (mandatory):\n` +
          `- Include absolutely ALL words from the text, no exceptions\n` +
          `- Even small words like "ir", "ar", "≈°odien", "ƒºoti", "agri"\n` +
          `- Different forms of same word (grib AND negrib as separate entries)\n` +
          `- Pronouns, prepositions, adverbs - everything\n\n` +
          `STEP 2: Add meaningful phrases (bonus):\n` +
          `- Common collocations (iebiezinƒÅtais piens = —Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ)\n` +
          `- Compound expressions (dzim≈°anas diena = –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)\n` +
          `- Prepositional phrases (pie cep≈°anas = –∑–∞ –≤—ã–ø–µ—á–∫–æ–π)\n\n` +
          `CRITICAL REQUIREMENTS:\n` +
          `1. Count words in original text and ensure SAME number of individual words in output\n` +
          `2. Every single word must appear as individual entry\n` +
          `3. Then add phrases as additional entries\n` +
          `4. Mark each entry with item_type: "word" or "phrase"\n\n` +
          `For each item create:\n` +
          `- front: exact form from text\n` +
          `- back: Russian translation of this specific form\n` +
          `- base_form: dictionary form\n` +
          `- base_translation: Russian translation of dictionary form\n` +
          `- word_form_translation: translation of the specific form\n` +
          `- original_phrase: the sentence containing it\n` +
          `- phrase_translation: Russian translation of the sentence\n` +
          `- text_forms: [form from text]\n` +
          `- item_type: "word" or "phrase"\n\n` +
          `EXAMPLES:\n` +
          `Word: {"front": "agri", "back": "—Ä–∞–Ω–æ", "item_type": "word"}\n` +
          `Word: {"front": "≈°odien", "back": "—Å–µ–≥–æ–¥–Ω—è", "item_type": "word"}\n` +
          `Word: {"front": "grib", "back": "—Ö–æ—á–µ—Ç", "item_type": "word"}\n` +
          `Phrase: {"front": "dzim≈°anas diena", "back": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "item_type": "phrase"}\n\n` +
          `VERIFICATION: Text has approximately ${chunk.split(/\s+/).filter(w => w.length > 0).length} words.\n` +
          `Your response must include AT LEAST ${Math.floor(chunk.split(/\s+/).filter(w => w.length > 0).length * 0.9)} individual word entries.\n\n` +
          `Context: ${contextText}\n\n` +
          `Return valid JSON array of objects.`
        : // –°–¢–ê–†–´–ô –ü–†–û–ú–ü–¢: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ (—Ç–æ–∂–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π)
          `Extract EVERY individual word from these Latvian sentences: "${chunk}"\n\n` +
          `CRITICAL: Include absolutely ALL words - no exceptions!\n` +
          `- Small words: ir, ar, uz, pie, ≈°odien, agri, ƒºoti\n` +
          `- All verb forms: grib, negrib, pamostas, dodas\n` +
          `- All pronouns: vi≈Üa, vi≈Üas, sev\n` +
          `- Everything without exception\n\n` +
          `Target: approximately ${chunk.split(/\s+/).filter(w => w.length > 0).length} word entries.\n\n` +
          `Create vocabulary cards for Russian learners:\n` +
          `- front: exact word form from text\n` +
          `- back: translation of this specific word form in Russian\n` +
          `- base_form: dictionary form\n` +
          `- base_translation: translation of dictionary form\n` +
          `- word_form_translation: translation of the specific form\n` +
          `- original_phrase: the sentence containing the word\n` +
          `- phrase_translation: Russian translation of the sentence\n` +
          `- text_forms: array with the word form\n\n` +
          `CRITICAL: word_form_translation must match the specific form.\n` +
          `Example: "mammai" ‚Üí "–º–∞–º–µ" (not "–º–∞–º–∞")\n\n` +
          `Context: ${contextText}\n\n` +
          `Return valid JSON array of objects.`;

      try {
        // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ApiClient —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞–Ω–∫–µ
        const raw = await apiClient.request(prompt, {
          chunkInfo: {
            description: `chunk-${chunkIndex + 1}-of-${totalChunks}`,
            originalChunk: chunk,
            index: chunkIndex,
            total: totalChunks,
          },
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
        if (raw.startsWith("[ERROR:")) {
          const errorData = JSON.parse(raw.slice(7, -1));
          const errorInfo = analyzeError(errorData);

          console.log("üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:", errorInfo.userMessage);

          // –°–æ–∑–¥–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const errorCard: FlashcardNew = {
            id: `error_${Date.now()}_${Math.random()}`,
            base_form: `error_${errorInfo.type}_${Date.now()}`,
            word_type: "other",
            translations: [errorInfo.userMessage],
            contexts: [
              {
                latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
                russian: errorInfo.recommendation,
                word_in_context: errorInfo.type,
              },
            ],
            visible: true,
            needsReprocessing: true, // –§–ª–∞–≥ –¥–ª—è APIStatusBar
          };

          return [errorCard];
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude
        const cleanedText = raw
          .replace(/```json\s*/g, "")
          .replace(/```\s*$/g, "")
          .trim();

        const parsed = JSON.parse(cleanedText);
        const cardsArray = Array.isArray(parsed) ? parsed : [parsed];

        const processedCards = textToCards(cardsArray).map(card => ({
          ...card,
          id: card.id || `${Date.now()}_${Math.random()}`,
          visible: true,
          needsReprocessing: false, // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
        }));

        console.log(
          `‚úÖ –ß–∞–Ω–∫ ${chunkIndex + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${processedCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        saveFormTranslations(processedCards);

        return processedCards;
      } catch (error) {
        // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º error-handler –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
        const errorInfo = analyzeError(error);

        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, errorInfo.userMessage);

        // –°–æ–∑–¥–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorCard: FlashcardNew = {
          id: `error_${Date.now()}_${Math.random()}`,
          base_form: `error_${errorInfo.type}_${Date.now()}`,
          word_type: "other",
          translations: [errorInfo.userMessage],
          contexts: [
            {
              latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
              russian: errorInfo.recommendation,
              word_in_context: errorInfo.type,
            },
          ],
          visible: true,
          needsReprocessing: true, // –§–ª–∞–≥ –¥–ª—è APIStatusBar
        };

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ retryable, –æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ retry queue —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è ApiClient
        // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return [errorCard];
      }
    },
    [saveFormTranslations]
  );

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry queue —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const processRetryQueue = React.useCallback(
    async (onProgress?: (current: number, total: number) => void) => {
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É retry queue");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setState("loading");

      // –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressCallback = (current: number, total: number) => {
        setProcessingProgress({
          current,
          total,
          step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${current}/${total}`,
        });
        onProgress?.(current, total);
      };

      try {
        const results = await retryQueue.processQueue(progressCallback);

        console.log("üèÅ Retry queue –æ–±—Ä–∞–±–æ—Ç–∞–Ω:", results);

        // –ï—Å–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (results.successful > 0) {
          setState("ready");
        }

        return results;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ retry queue:", error);
        throw error;
      } finally {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setProcessingProgress({ current: 0, total: 0, step: "" });
      }
    },
    [retryQueue.processQueue]
  );

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—á–∞–Ω–∫-–∑–∞-—á–∞–Ω–∫–æ–º)
  const processText = React.useCallback(async () => {
    if (!inputText.trim()) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞:", inputText.substring(0, 100) + "...");

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    setState("loading");
    setFlashcards([]);
    setTranslationText("");
    setFormTranslations(new Map());

    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const sentences = splitIntoSentences(inputText);
      console.log(`üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∏ –ø–æ 3
      const chunks = [];
      for (let i = 0; i < sentences.length; i += 3) {
        const chunk = sentences
          .slice(i, i + 3)
          .join(" ")
          .trim();
        if (chunk) chunks.push(chunk);
      }

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      setProcessingProgress({
        current: 0,
        total: chunks.length,
        step: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...",
      });

      const allCards: FlashcardNew[] = [];
      const translationParts: string[] = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      for (let i = 0; i < chunks.length; i++) {
        setProcessingProgress({
          current: i + 1,
          total: chunks.length,
          step: `–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${chunks.length}`,
        });

        console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${i + 1}/${chunks.length}`);

        const chunkCards = await processChunkWithContext(chunks[i], i, chunks.length, chunks);

        if (chunkCards && chunkCards.length > 0) {
          allCards.push(...chunkCards);

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ —á–∞–Ω–∫–∞ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
          const validCards = chunkCards.filter(card => !card.needsReprocessing);
          if (validCards.length > 0 && validCards[0].contexts?.[0]?.russian) {
            translationParts.push(validCards[0].contexts[0].russian);
          }
        }

        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
        await new Promise(resolve => setTimeout(resolve, 1000));
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ base_form
      const mergedCards = mergeCardsByBaseForm(allCards);

      console.log(
        `üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${mergedCards.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${allCards.length} –æ–±—â–∏—Ö`
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setFlashcards(mergedCards);
      setTranslationText(translationParts.join(" "));
      setState("ready");
      setMode("flashcards");
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
      setState("input");
      setProcessingProgress({
        current: 0,
        total: 0,
        step: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      });
    }
  }, [inputText, processChunkWithContext, setMode]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const updateCard = React.useCallback((id: string, updates: Partial<FlashcardNew>) => {
    setFlashcards(prev => prev.map(card => (card.id === id ? { ...card, ...updates } : card)));
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ${id}:`, updates);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const toggleCardVisibility = React.useCallback((id: string) => {
    setFlashcards(prev =>
      prev.map(card => (card.id === id ? { ...card, visible: !card.visible } : card))
    );
    console.log(`üëÅÔ∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ ${id}`);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const deleteCard = React.useCallback((id: string) => {
    setFlashcards(prev => prev.filter(card => card.id !== id));
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ ${id}`);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const addNewCard = React.useCallback((newCard: Omit<FlashcardNew, "id">) => {
    const cardWithId = {
      ...newCard,
      id: `new_${Date.now()}_${Math.random()}`,
      visible: true,
      needsReprocessing: false,
    };
    setFlashcards(prev => [...prev, cardWithId]);
    console.log("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞:", cardWithId.base_form);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const clearAll = React.useCallback(() => {
    console.log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");

    setFlashcards([]);
    setTranslationText("");
    setFormTranslations(new Map());
    setState("input");
    setProcessingProgress({ current: 0, total: 0, step: "" });

    // –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º retry queue –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    retryQueue.clearQueue();
  }, [retryQueue.clearQueue]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,

    // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞)
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,

    // –ù–û–í–û–ï: Retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    processRetryQueue,
    retryQueue: {
      queue: retryQueue.queue,
      stats: retryQueue.stats,
      isProcessing: retryQueue.isProcessing,
      clearQueue: retryQueue.clearQueue,
      removeFromQueue: retryQueue.removeFromQueue,
    },
  };
}

```
üìù –®–∞–≥ 2.2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar –≤ App.tsx
–¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏–º App.tsx –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å retry queue:
```
bla
import React from "react";
import type { AppMode } from "./types";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import Header from "./components/Header";
import ModeSelector from "./components/ModeSelector";
import Footer from "./components/Footer";
import TextInputView from "./components/TextInputView";
import FlashcardsView from "./components/FlashcardsView";
import ReadingView from "./components/ReadingView";
import TranslationView from "./components/TranslationView";
import EditView from "./components/EditView";

// –ò–º–ø–æ—Ä—Ç —Ö—É–∫–æ–≤
import { useProcessing } from "./hooks/useProcessing";
import { useKeyboardNavigation } from "./hooks/useKeyboardNavigation";
import { useFileOperations } from "./hooks/useFileOperations";

interface APIStatusBarProps {
  flashcards: FlashcardNew[];
  onRetryProcessing?: () => void;
}
const APIStatusBar: React.FC<APIStatusBarProps> = ({ flashcards, onRetryProcessing }) => {
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const cardsNeedingReprocessing = flashcards.filter(
    card =>
      (card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
      card.base_translation?.includes("[Translation needed:") ||
      card.phrase_translation?.includes("[Chunk translation needed:") ||
      card.front?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") ||
      card.front?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç") ||
      card.front?.includes("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
  );

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  if (cardsNeedingReprocessing.length === 0) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
  const hasOverloadErrors = cardsNeedingReprocessing.some(
    card =>
      card.front?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") || card.back?.includes("API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω")
  );

  const hasRateLimitErrors = cardsNeedingReprocessing.some(card =>
    card.front?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç")
  );

  const hasCriticalErrors = cardsNeedingReprocessing.some(
    card => card.front?.includes("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏") || card.front?.includes("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
  );

  const getStatusInfo = () => {
    if (hasOverloadErrors) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`,
        suggestion: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
      };
    } else if (hasRateLimitErrors) {
      return {
        color: "bg-yellow-100 border-yellow-400 text-yellow-700",
        icon: "üü°",
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤.`,
        suggestion: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      };
    } else if (hasCriticalErrors) {
      return {
        color: "bg-orange-100 border-orange-400 text-orange-700",
        icon: "üü†",
        title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`,
        suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
      };
    } else {
      return {
        color: "bg-blue-100 border-blue-400 text-blue-700",
        icon: "‚ÑπÔ∏è",
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        suggestion: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
      };
    }
  };

  const statusInfo = getStatusInfo();

  return (
    <div className={`border rounded-lg p-4 mb-4 ${statusInfo.color}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-lg">{statusInfo.icon}</span>
            <h3 className="font-semibold">{statusInfo.title}</h3>
          </div>

          <p className="mb-2">{statusInfo.message}</p>

          {statusInfo.suggestion && (
            <p className="text-sm opacity-80 mb-3">{statusInfo.suggestion}</p>
          )}

          {cardsNeedingReprocessing.length > 0 && (
            <div className="text-sm mb-3">
              <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:</strong>
              <div className="mt-1 max-h-20 overflow-y-auto">
                {cardsNeedingReprocessing.slice(0, 3).map((card, index) => (
                  <div key={index} className="text-xs opacity-75">
                    ‚Ä¢ {card.original_phrase?.substring(0, 60)}...
                  </div>
                ))}
                {cardsNeedingReprocessing.length > 3 && (
                  <div className="text-xs opacity-75">
                    ... –∏ –µ—â–µ {cardsNeedingReprocessing.length - 3}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex flex-col gap-2 ml-4">
          <button
            onClick={() => {
              if (onRetryProcessing) {
                onRetryProcessing();
              } else {
                alert(
                  `–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤. –ü–æ–∫–∞ —á—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.`
                );
              }
            }}
            className="px-4 py-2 bg-white border border-current rounded hover:bg-opacity-80 text-sm font-medium transition-colors"
            title={`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤`}
          >
            üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
          </button>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ dev —Ä–µ–∂–∏–º–µ */}
      {process.env.NODE_ENV === "development" && (
        <div className="mt-3 pt-3 border-t border-current border-opacity-30 text-xs opacity-60">
          <div>–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {cardsNeedingReprocessing.length}</div>
          <div>
            –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {hasOverloadErrors ? "overload " : ""}
            {hasRateLimitErrors ? "rate-limit " : ""}
            {hasCriticalErrors ? "critical " : ""}
          </div>
        </div>
      )}
    </div>
  );
};
// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
const LatvianLearningApp: React.FC = () => {
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
  const [mode, setMode] = React.useState<AppMode>("text");
  const [inputText, setInputText] = React.useState("");
  const [currentIndex, setCurrentIndex] = React.useState(0);
  const [flipped, setFlipped] = React.useState(false);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [currentPage, setCurrentPage] = React.useState(0);

  // –•—É–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const {
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations, // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è setFormTranslations
  } = useProcessing(inputText, setMode);

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const onDataLoad = React.useCallback(
    (data: ExportData) => {
      setInputText(data.inputText);
      setFlashcards(data.flashcards);
      setTranslationText(data.translationText);

      // –ö–†–ò–¢–ò–ß–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º formTranslations –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (data.formTranslations && Array.isArray(data.formTranslations)) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        const restoredFormTranslations = new Map(data.formTranslations);
        console.log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º –∏–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞:", restoredFormTranslations.size);

        // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ window –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ö—É–∫
        window.tempFormTranslations = restoredFormTranslations;
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö formTranslations, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫
        const rebuiltFormTranslations = new Map<string, string>();

        data.flashcards.forEach(card => {
          if (Array.isArray(card.contexts)) {
            card.contexts.forEach(context => {
              if (Array.isArray(context.text_forms)) {
                context.text_forms.forEach(form => {
                  const cleanForm = form
                    .toLowerCase()
                    .trim()
                    .replace(/[.,!?;:]/g, "");
                  if (cleanForm && !rebuiltFormTranslations.has(cleanForm)) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º base_translation –∫–∞–∫ fallback
                    rebuiltFormTranslations.set(cleanForm, card.base_translation);
                  }
                });
              }
            });
          }
        });

        console.log("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫:", rebuiltFormTranslations.size);
        window.tempFormTranslations = rebuiltFormTranslations;
      }

      // –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ 'ready' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–æ–≤
      setState("ready");

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º UI —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setCurrentIndex(0);
      setFlipped(false);
      setSearchTerm("");
      setCurrentPage(0);
      setMode("flashcards");

      console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã, —Ä–µ–∂–∏–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã");
    },
    [setFlashcards, setTranslationText, setState, setFormTranslations] // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ setFormTranslations
  );

  // –•—É–∫ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
  const { exportData, importData } = useFileOperations({
    flashcards,
    inputText,
    translationText,
    formTranslations,
    onDataLoad,
  });

  // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const hideCurrentCard = React.useCallback(() => {
    const visibleCards = flashcards.filter(card => card.visible !== false);
    const currentCard = visibleCards[currentIndex];

    if (currentCard) {
      const cardIndex = flashcards.findIndex(card => card === currentCard);
      console.log(`üîÑ –°–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É ${cardIndex}: ${currentCard.base_form}`);

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º React.startTransition –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      React.startTransition(() => {
        toggleCardVisibility(cardIndex);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ —Å–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        setTimeout(() => {
          const newVisibleCards = flashcards.filter((card, idx) => {
            if (idx === cardIndex) return false; // –°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            return card.visible !== false;
          });

          console.log(`üìä –û—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: ${newVisibleCards.length}`);

          if (newVisibleCards.length === 0) {
            setCurrentIndex(0);
            setFlipped(false);
          } else if (currentIndex >= newVisibleCards.length) {
            setCurrentIndex(newVisibleCards.length - 1);
            setFlipped(false);
          } else {
            setFlipped(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º flip –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
          }
        }, 0); // –ú–∏–∫—Ä–æ–∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
      });
    }
  }, [flashcards, currentIndex, toggleCardVisibility, setCurrentIndex, setFlipped]);

  // –•—É–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  const { shortcuts } = useKeyboardNavigation({
    mode,
    state,
    flashcards,
    currentIndex,
    flipped,
    onIndexChange: setCurrentIndex,
    onFlip: setFlipped,
    onHideCard: hideCurrentCard,
  });

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const handleClear = React.useCallback(() => {
    setInputText("");
    setCurrentIndex(0);
    setFlipped(false);
    setSearchTerm("");
    setCurrentPage(0);
    setMode("text");
    clearAll();

    // –û—á–∏—â–∞–µ–º file input
    const fileInput = document.getElementById("import-file-input") as HTMLInputElement;
    if (fileInput) {
      fileInput.value = "";
    }
  }, [clearAll]);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const isProcessed = state === "ready";

  return (
    <div className="min-h-screen flex flex-col" style={{ backgroundColor: "#6A9BCC" }}>
      <div className="flex-1 flex flex-col items-center justify-center py-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="w-full max-w-6xl mx-auto px-8 mb-8">
          <Header onImport={importData} onExport={exportData} isProcessed={isProcessed} />
        </div>

        {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–æ–≤ */}
        <ModeSelector
          mode={mode}
          onChange={setMode}
          onClear={handleClear}
          isProcessed={isProcessed}
        />

        <APIStatusBar flashcards={flashcards} />

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="flex-1 flex items-center justify-center w-full">
          {mode === "text" && (
            <TextInputView
              inputText={inputText}
              onChange={setInputText}
              onProcessText={async () => {
                await processText();
                console.log("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫...");
                setMode("flashcards");
              }}
              state={state}
              processingProgress={processingProgress}
            />
          )}

          {mode === "flashcards" && (
            <FlashcardsView
              flashcards={flashcards}
              currentIndex={currentIndex}
              flipped={flipped}
              onIndexChange={setCurrentIndex}
              onFlip={setFlipped}
              onHideCard={hideCurrentCard}
              keyboardShortcuts={shortcuts}
            />
          )}

          {mode === "reading" && (
            <ReadingView
              inputText={inputText}
              formTranslations={formTranslations}
              flashcards={flashcards}
            />
          )}

          {mode === "translation" && <TranslationView translationText={translationText} />}

          {mode === "edit" && (
            <EditView
              flashcards={flashcards}
              searchTerm={searchTerm}
              currentPage={currentPage}
              formTranslations={formTranslations}
              onSearchChange={setSearchTerm}
              onPageChange={setCurrentPage}
              onCardUpdate={updateCard}
              onToggleVisibility={toggleCardVisibility}
              onDeleteCard={deleteCard}
              onAddCard={addNewCard}
            />
          )}
        </div>

        {/* –§—É—Ç–µ—Ä —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ */}
        <Footer step={processingProgress.step} showDebug={process.env.NODE_ENV === "development"} />
      </div>
    </div>
  );
};

export default LatvianLearningApp;

```
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –º—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –≤ client\src\components\Footer.tsx
–ø–æ—Å–∫–æ–ª—å–∫—É: –í —Ñ–∞–π–ª–µ Footer.tsx –Ω–∞ —Å—Ç—Ä–æ–∫–µ 18 –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞ Cannot read properties of undefined (reading 'includes') –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä step –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, –∞ –º–µ—Ç–æ–¥ includes() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏.
–†–µ—à–µ–Ω–∏–µ –±—ã–ª–æ —Ç–∞–∫–∏–º:
–∑–∞–º–µ–Ω–∏–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥:
```
const isOverloaded = step === "Overloaded" || step.includes("529") || step.includes("Overloaded");
const isCreditBalance = step === "credit balance" || step.includes("credit balance");
const isNoConnection = step === "no connection" || !navigator.onLine;
const isGeneralError = step === "error" && !isOverloaded && !isCreditBalance && !isNoConnection;
```
–Ω–∞ —ç—Ç–æ—Ç:
```
// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ step –Ω–∞ undefined –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º includes()
const safeStep = step || "";
const isOverloaded = safeStep === "Overloaded" || safeStep.includes("529") || safeStep.includes("Overloaded");
const isCreditBalance = safeStep === "credit balance" || safeStep.includes("credit balance");
const isNoConnection = safeStep === "no connection" || !navigator.onLine;
const isGeneralError = safeStep === "error" && !isOverloaded && !isCreditBalance && !isNoConnection;
```

–ó–∞—Ç–µ–º –≤–Ω–µ—Å–ª–∏ –ø—Ä–∞–≤–∫–∏ –≤ client\src\components\TextInputView.tsx
–ø–æ—Ç–æ–º—É —á—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –æ—Ä—à–∏–±–∫–∞ –û—à–∏–±–∫–∞: TextInputView.tsx:107 - onChange is not a function
–ú—ã –∏—Å–ø—Ä–∞–≤–∏–ª–∏  –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–ø—Å–æ–≤ –≤ TextInputView –∑–∞–º–µ–Ω–∏–≤ —ç—Ç—É —á–∞—Ç—å –∫–æ–¥–∞:
```
interface TextInputViewProps extends BaseComponentProps {
  inputText: string; // —Ç–µ–∫—É—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  onChange: (text: string) => void; // —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚ùå
  onProcess: () => void; // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚ùå
  state: AppState; // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  processingProgress: ProcessingProgress; // –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
}
```
–Ω–∞ —ç—Ç—É 
```
interface TextInputViewProps extends BaseComponentProps {
  inputText: string; // —Ç–µ–∫—É—â–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
  setInputText: (text: string) => void; // —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ‚úÖ
  onProcessText: () => void; // —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚úÖ
  state: AppState; // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  processingProgress: ProcessingProgress; // –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
}
```
–∏—Å–ø—Ä–∞–≤–∏–≤ —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞:
```
onChange={(e) => onChange(e.target.value)}
```
–Ω–∞ —ç—Ç—É:
```
onChange={(e) => setInputText(e.target.value)}
```
–∏ –∫–Ω–æ–ø–∫—É –Ω–∞:
```
onClick={onProcessText}  // –≤–º–µ—Å—Ç–æ onProcess
```
–∏—Å–ø—Ä–∞–≤–∏–≤ —ç—Ç—É —á–∞—Å—Ç—å –∫–æ–¥–∞:
```
export const TextInputView: React.FC<TextInputViewProps> = ({
  inputText,
  onChange,
  onProcess,
  state,
  processingProgress,
  className = "",
  "data-testid": testId,
}) => {
```
–Ω–∞ —ç—Ç—É:
```
export const TextInputView: React.FC<TextInputViewProps> = ({
  inputText,
  setInputText,
  onProcessText,
  state,
  processingProgress,
  className = "",
  "data-testid": testId,
}) => {
```
–ü–†–û–ì–†–ï–°–°: –î–µ–Ω—å 2, –®–∞–≥–∏ 2.1-2.2 –∑–∞–≤–µ—Ä—à–µ–Ω—ã
–°–õ–ï–î–£–Æ–©–ò–ô –®–ê–ì: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π