–ó–¥–µ—Å—å —è –ø—ã—Ç–∞—é—Å—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ —è –æ–±–Ω–∞—Ä—É–∂–∏–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã:
https://apidog.com/blog/claude-api-rate-limits/
https://www.cursor-ide.com/blog/claude-api-429-error-fix-en

-------------------
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Claude API  –∏
—Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç—Ç–æ–π –µ–µ —á–∞—Å—Ç–∏ https://docs.anthropic.com/en/api/messages
–∑–∞–≥—É–≥–ª–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API Claude, —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–≤—à–∏—Å—å –Ω–∞

-  Exponential backoff —Å retry-after header
-  Rate limit monitoring —á–µ—Ä–µ–∑ response headers
-  Graceful degradation –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
-  User-friendly error messages –≤–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
-  Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤

–ò–∑—É—á–∏ —Ç–µ–∫—É—â—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞  –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞:

1. –û–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤ API
2. –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
3. Proxy —Å–µ—Ä–≤–µ—Ä
4. –õ–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤

–í –ø—Ä–æ—à–ª–æ–º —á–∞—Ç–µ –º—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
1. –°–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ —Å –æ—á–µ—Ä–µ–¥—å—é
2. –°–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ fallback-–∞–º–∏
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ –º–æ–¥—É–ª–∏

- –í —Ñ—É–Ω–∫—Ü–∏–∏ callClaude  –≤ client/src/claude.ts –º—ã —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª–∏:
	- Exponential backoff –¥–ª—è retry –ª–æ–≥–∏–∫–∏
	- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ rate limit headers
	- –°–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É 529/429 –æ—à–∏–±–æ–∫

- –í —Ñ—É–Ω–∫—Ü–∏–∏ processChunkWithContext –≤ client/src/hooks/useProcessing.ts
	-  –ü–æ–Ω—è—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	- –§–ª–∞–≥–∏ needsReprocessing –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
	- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –æ—à–∏–±–æ–∫

- –¥–æ–±–∞–≤–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç 	APIStatusBar –≤ client/src/App.tsx
	–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ API
     –ö–Ω–æ–ø–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

   - –∏–Ω—Ç–µ–≥–∏—Ä–æ–≤–∞–ª–∏ APIStatusBar –≤ JSX
		- –î–æ–±–∞–≤–∏–ª–∏ <APIStatusBar flashcards={flashcards} /> –≤ client\src\App.tsx –∏ –ø–µ—Ä–µ–¥–∞–ª–∏  flashcards –∫–∞–∫ props

–¢–µ–ø–µ—Ä—å –≤–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
	```
	[Translation needed: pamostas]
	[Chunk translation needed: Anna pamostas agri...]
	```
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã —É–≤–∏–¥–µ—Ç—å:
	–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç:

		üî¥ –ü–æ–Ω—è—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–±–∞—Ä: "Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. 2 —á–∞–Ω–∫–∞ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
		üîÑ –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è: "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"
		‚è±Ô∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç"
		üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å –ø—Ä–µ–≤—å—é—à–∫–∞–º–∏ —Ç–µ–∫—Å—Ç–∞

–ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –†–ï–ê–õ–ò–ó–ê–¶–ò–ò

–ß—Ç–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ:

1. claude.ts: Exponential backoff —Å jitter, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ rate limit headers, –æ–±—Ä–∞–±–æ—Ç–∫–∞ 529/429 –æ—à–∏–±–æ–∫
–ò–∑—É—á–∏ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
	https://apidog.com/blog/claude-api-rate-limits/
	https://www.cursor-ide.com/blog/claude-api-429-error-fix-en
2. useProcessing.ts: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–Ω—è—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ `needsReprocessing`
3. APIStatusBar: –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

–¢–æ—á–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:

–ü–†–ï–î–õ–ê–ì–ê–ï–ú–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø

1. –ß–µ—Ä–Ω–æ–≤–∏–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π Retry-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ claude.ts
```
// –£–õ–£–ß–®–ï–ù–ò–ï 1: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è retry-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≤ client/src/claude.ts
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 15 (–ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤)

interface RetryConfig {
  maxRetries: number;
  baseDelay: number;
  maxDelay: number;
  jitterFactor: number;
  retryableErrors: Set<number>;
  specialCases: Map<number, RetryStrategy>;
}

interface RetryStrategy {
  maxRetries: number;
  baseDelay: number;
  backoffMultiplier: number;
  respectRetryAfter: boolean;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
const RETRY_CONFIG: RetryConfig = {
  maxRetries: 5, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 3 –¥–æ 5
  baseDelay: 1000,
  maxDelay: 60000, // max 1 –º–∏–Ω—É—Ç–∞
  jitterFactor: 0.1,
  retryableErrors: new Set([429, 500, 502, 503, 504, 529]),
  specialCases: new Map([
    // 529 (overloaded) - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    [529, {
      maxRetries: 7,
      baseDelay: 5000, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫—É–Ω–¥
      backoffMultiplier: 1.5, // –º–µ–¥–ª–µ–Ω–Ω–µ–µ —á–µ–º –æ–±—ã—á–Ω–æ
      respectRetryAfter: true,
    }],
    // 429 (rate limit) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è
    [429, {
      maxRetries: 5,
      baseDelay: 2000,
      backoffMultiplier: 2,
      respectRetryAfter: true,
    }],
    // 500-504 (server errors) - –±—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    [500, {
      maxRetries: 3,
      baseDelay: 1000,
      backoffMultiplier: 2,
      respectRetryAfter: false,
    }],
  ])
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
const calculateAdaptiveDelay = (
  attempt: number,
  statusCode: number,
  retryAfter?: string
): number => {
  const strategy = RETRY_CONFIG.specialCases.get(statusCode);

  if (!strategy) {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    const exponentialDelay = Math.min(
      RETRY_CONFIG.baseDelay * Math.pow(2, attempt - 1),
      RETRY_CONFIG.maxDelay
    );

    // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
    const jitter = exponentialDelay * RETRY_CONFIG.jitterFactor * Math.random();
    return exponentialDelay + jitter;
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  if (strategy.respectRetryAfter && retryAfter) {
    const retryAfterMs = parseInt(retryAfter) * 1000;
    console.log(`üïê Using Retry-After header: ${retryAfterMs}ms for status ${statusCode}`);
    return retryAfterMs;
  }

  const strategicDelay = Math.min(
    strategy.baseDelay * Math.pow(strategy.backoffMultiplier, attempt - 1),
    RETRY_CONFIG.maxDelay
  );

  // –î–æ–±–∞–≤–ª—è–µ–º jitter
  const jitter = strategicDelay * RETRY_CONFIG.jitterFactor * Math.random();
  return strategicDelay + jitter;
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–µ–Ω –ª–∏ retry –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞
const shouldRetry = (statusCode: number, attempt: number): boolean => {
  if (!RETRY_CONFIG.retryableErrors.has(statusCode)) {
    return false;
  }

  const strategy = RETRY_CONFIG.specialCases.get(statusCode);
  const maxRetries = strategy?.maxRetries || RETRY_CONFIG.maxRetries;

  return attempt <= maxRetries;
};

// –ó–ê–ú–ï–ù–ò–¢–¨ retry —Ü–∏–∫–ª –≤ —Ñ—É–Ω–∫—Ü–∏–∏ callClaude (—Å—Ç—Ä–æ–∫–∏ ~79-150)
// –í–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞:
for (let attempt = 1; attempt <= maxRetries; attempt++) {
  try {
    console.log(`\nüöÄ Attempt ${attempt}/${maxRetries}`);

    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è ...

    const response = await fetch("http://localhost:3001/api/claude", {
      method: "POST",
      headers: {
        "content-type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    const requestTime = Date.now() - attemptStartTime;
    console.log(`üì° HTTP response received in ${formatDuration(requestTime)}`);

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ rate limits
    monitorRateLimits(response);

    // –ù–û–í–û–ï: –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç–∞–º
    const requestsRemaining = response.headers.get("anthropic-ratelimit-requests-remaining");
    if (requestsRemaining && parseInt(requestsRemaining) < 3) {
      console.warn(`‚ö†Ô∏è WARNING: Only ${requestsRemaining} requests remaining!`);
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    if (!response.ok) {
      console.error(`‚ùå HTTP Error: ${response.status} ${response.statusText}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ retry
      if (shouldRetry(response.status, attempt)) {
        const retryAfter = response.headers.get("retry-after");
        const delay = calculateAdaptiveDelay(attempt, response.status, retryAfter || undefined);

        console.log(`üîÑ Retrying (attempt ${attempt}): status ${response.status}, delay ${formatDuration(delay)}`);
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      } else {
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –Ω–µ-retryable –æ—à–∏–±–æ–∫
        let errorText: string;
        try {
          errorText = await response.text();
        } catch {
          errorText = `HTTP ${response.status} - Unable to read response body`;
        }
        return `[Error: HTTP ${response.status}: ${errorText}]`;
      }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

  } catch (err) {
    lastError = err;
    const error = err as Error;

    console.error(`üí• Error in attempt ${attempt}:`, error.message);

    // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ retry
    if (shouldRetry(0, attempt)) { // 0 = network error
      const delay = calculateAdaptiveDelay(attempt, 0);
      console.log(`‚è≥ Network error, waiting ${formatDuration(delay)} before retry...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    } else {
      break;
    }
  }
}
```
2. –ß–µ—Ä–Ω–æ–≤–∏–∫ –º–µ—Ö–∞–Ω–∏–∑–º–∞ retry –æ—á–µ—Ä–µ–¥–∏ –≤ useProcessing.ts
```
// –£–õ–£–ß–®–ï–ù–ò–ï 2: –ú–µ—Ö–∞–Ω–∏–∑–º retry –æ—á–µ—Ä–µ–¥–∏ –≤ client/src/hooks/useProcessing.ts
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∞ ~5)

interface FailedChunk {
  id: string;
  text: string;
  attempt: number;
  lastError: string;
  errorType: 'overload' | 'rate_limit' | 'network' | 'other';
  timestamp: number;
  originalIndex: number;
}

interface RetryQueueState {
  queue: FailedChunk[];
  isProcessing: boolean;
  totalRetried: number;
  successfulRetries: number;
}

// –î–æ–±–∞–≤–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ö—É–∫–∞ useProcessing (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ~12)
const [retryQueue, setRetryQueue] = React.useState<RetryQueueState>({
  queue: [],
  isProcessing: false,
  totalRetried: 0,
  successfulRetries: 0,
});

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
const classifyError = (errorMessage: string): FailedChunk['errorType'] => {
  if (errorMessage.includes('overloaded') || errorMessage.includes('529')) {
    return 'overload';
  }
  if (errorMessage.includes('rate limit') || errorMessage.includes('429')) {
    return 'rate_limit';
  }
  if (errorMessage.includes('network') || errorMessage.includes('fetch')) {
    return 'network';
  }
  return 'other';
};

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å retry
const addToRetryQueue = React.useCallback((chunkText: string, error: string, originalIndex: number) => {
  const failedChunk: FailedChunk = {
    id: `retry_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    text: chunkText,
    attempt: 1,
    lastError: error,
    errorType: classifyError(error),
    timestamp: Date.now(),
    originalIndex,
  };

  setRetryQueue(prev => ({
    ...prev,
    queue: [...prev.queue, failedChunk],
  }));

  console.log(`üìù Added chunk to retry queue: ${failedChunk.errorType} error`);
}, []);

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry –æ—á–µ—Ä–µ–¥–∏
const processRetryQueue = React.useCallback(async (onProgress?: (current: number, total: number) => void) => {
  if (retryQueue.isProcessing || retryQueue.queue.length === 0) {
    return;
  }

  console.log(`üîÑ Starting retry queue processing: ${retryQueue.queue.length} chunks`);

  setRetryQueue(prev => ({ ...prev, isProcessing: true }));

  const queueCopy = [...retryQueue.queue];
  let successCount = 0;
  let failedChunks: FailedChunk[] = [];

  for (let i = 0; i < queueCopy.length; i++) {
    const chunk = queueCopy[i];

    // –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    onProgress?.(i + 1, queueCopy.length);

    try {
      console.log(`üîÑ Retry attempt ${chunk.attempt} for chunk ${chunk.id}`);

      // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
      const delay = getRetryDelay(chunk.errorType, chunk.attempt);
      if (delay > 0) {
        console.log(`‚è≥ Waiting ${delay}ms before retry (${chunk.errorType})`);
        await new Promise(resolve => setTimeout(resolve, delay));
      }

      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–∞
      const result = await processChunkWithContext(chunk.text);

      if (result && result.length > 0) {
        // –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        const successCards = result.filter(card =>
          !card.front?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') &&
          !card.front?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') &&
          !card.front?.includes('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏')
        );

        if (successCards.length > 0) {
          // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–µ
          setFlashcards(prev => {
            const updated = [...prev];
            // –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            const cardsToReplace = updated.filter(card =>
              card.base_form?.includes('retry_needed') ||
              card.base_form?.includes('rate_limit') ||
              card.base_form?.includes('Error in chunk')
            );

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            const cleanedCards = updated.filter(card =>
              !card.base_form?.includes('retry_needed') &&
              !card.base_form?.includes('rate_limit') &&
              !card.base_form?.includes('Error in chunk')
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            return [...cleanedCards, ...mergeCardsByBaseForm(successCards)];
          });

          successCount++;
          console.log(`‚úÖ Retry successful for chunk ${chunk.id}: ${successCards.length} cards`);
        } else {
          throw new Error('No valid cards produced after retry');
        }
      } else {
        throw new Error('Empty result from retry processing');
      }

    } catch (error) {
      console.error(`‚ùå Retry failed for chunk ${chunk.id}:`, error);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      const updatedChunk = {
        ...chunk,
        attempt: chunk.attempt + 1,
        lastError: error instanceof Error ? error.message : 'Unknown retry error',
        timestamp: Date.now(),
      };

      // –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
      if (updatedChunk.attempt <= getMaxRetries(chunk.errorType)) {
        failedChunks.push(updatedChunk);
      } else {
        console.warn(`‚ö†Ô∏è Max retries exceeded for chunk ${chunk.id}, giving up`);
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
  setRetryQueue(prev => ({
    queue: failedChunks,
    isProcessing: false,
    totalRetried: prev.totalRetried + queueCopy.length,
    successfulRetries: prev.successfulRetries + successCount,
  }));

  console.log(`üèÅ Retry queue completed: ${successCount}/${queueCopy.length} successful`);

  return {
    total: queueCopy.length,
    successful: successCount,
    remaining: failedChunks.length,
  };
}, [retryQueue.queue, retryQueue.isProcessing, processChunkWithContext, setFlashcards]);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
const getRetryDelay = (errorType: FailedChunk['errorType'], attempt: number): number => {
  const baseDelays = {
    overload: 10000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è overload
    rate_limit: 5000, // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è rate limit
    network: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è network
    other: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–æ—á–∏—Ö
  };

  const base = baseDelays[errorType];
  const exponential = base * Math.pow(1.5, attempt - 1);
  const jitter = exponential * 0.1 * Math.random();

  return Math.min(exponential + jitter, 60000); // max 1 –º–∏–Ω—É—Ç–∞
};

const getMaxRetries = (errorType: FailedChunk['errorType']): number => {
  const maxRetries = {
    overload: 5, // –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è overload
    rate_limit: 4,
    network: 3,
    other: 2,
  };

  return maxRetries[errorType];
};

// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è processChunkWithContext –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è retry queue
// –í —Ñ—É–Ω–∫—Ü–∏–∏ processChunkWithContext (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 48) –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ retry –∫–∞—Ä—Ç–æ—á–µ–∫:

// –ë–´–õ–û:
// const retryCards: FlashcardOld[] = [
//   {
//     front: `–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`,
//     back: `API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
//     ...
//   }
// ];

// –°–¢–ê–õ–û:
if (raw.includes("[Error: Claude API temporarily overloaded") || raw.includes("HTTP Error 529")) {
  console.log("‚ö†Ô∏è API overload detected - adding to retry queue");

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å retry –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ—à–∏–±–∫–æ–π
  addToRetryQueue(chunk, "API overloaded (529)", 0);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É-–º–∞—Ä–∫–µ—Ä
  const placeholderCards: FlashcardOld[] = [{
    front: `–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`,
    back: `–ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
    base_form: `retry_needed_${Date.now()}`,
    base_translation: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`,
    original_phrase: chunk,
    phrase_translation: `–¢–µ–∫—Å—Ç: "${chunk.substring(0, 100)}${chunk.length > 100 ? "..." : ""}"`,
    text_forms: [`retry_needed`],
    visible: true,
    needsReprocessing: true,
  }];

  return normalizeCards(placeholderCards);
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è rate limit –æ—à–∏–±–æ–∫:
if (raw.includes("[Error: Rate limit exceeded") || raw.includes("HTTP Error 429")) {
  console.log("‚ö†Ô∏è Rate limit detected - adding to retry queue");

  addToRetryQueue(chunk, "Rate limit exceeded (429)", 0);

  const placeholderCards: FlashcardOld[] = [{
    front: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤`,
    back: `–ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
    base_form: `rate_limit_${Date.now()}`,
    base_translation: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`,
    original_phrase: chunk,
    phrase_translation: `–¢–µ–∫—Å—Ç: "${chunk.substring(0, 100)}${chunk.length > 100 ? "..." : ""}"`,
    text_forms: [`rate_limit`],
    visible: true,
    needsReprocessing: true,
  }];

  return normalizeCards(placeholderCards);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ö—É–∫–∞
return {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ...

  // –ù–û–í–û–ï: —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å retry queue
  processRetryQueue,
  retryQueue,
  clearRetryQueue: React.useCallback(() => {
    setRetryQueue({
      queue: [],
      isProcessing: false,
      totalRetried: 0,
      successfulRetries: 0,
    });
  }, []),
};
```
3. –ß–µ—Ä–Ω–æ–≤–∏–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ APIStatusBar —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
```
// –£–õ–£–ß–®–ï–ù–ò–ï 3: –£–ª—É—á—à–µ–Ω–Ω—ã–π APIStatusBar –≤ client/src/App.tsx
// –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç APIStatusBar

interface APIStatusBarProps {
  flashcards: FlashcardNew[];
  onRetryProcessing: () => Promise<{ total: number; successful: number; remaining: number; }>;
  retryQueue?: {
    queue: any[];
    isProcessing: boolean;
    totalRetried: number;
    successfulRetries: number;
  };
}

const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  onRetryProcessing,
  retryQueue
}) => {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry
  const [isRetrying, setIsRetrying] = React.useState(false);
  const [retryProgress, setRetryProgress] = React.useState<{
    current: number;
    total: number;
  } | null>(null);
  const [lastRetryResult, setLastRetryResult] = React.useState<{
    total: number;
    successful: number;
    remaining: number;
    timestamp: number;
  } | null>(null);

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const cardsNeedingReprocessing = flashcards.filter(
    card =>
      (card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
      card.base_translation?.includes("[Translation needed:") ||
      card.phrase_translation?.includes("[Chunk translation needed:") ||
      card.base_form?.includes("retry_needed") ||
      card.base_form?.includes("rate_limit") ||
      card.base_form?.includes("Error in chunk") ||
      card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") ||
      card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç") ||
      card.base_translation?.includes("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
  );

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
  if (cardsNeedingReprocessing.length === 0 && (!retryQueue || retryQueue.queue.length === 0)) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
  const hasOverloadErrors = cardsNeedingReprocessing.some(
    card =>
      card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") ||
      card.base_translation?.includes("API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω") ||
      card.base_form?.includes("retry_needed")
  );

  const hasRateLimitErrors = cardsNeedingReprocessing.some(
    card =>
      card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç") ||
      card.base_form?.includes("rate_limit")
  );

  const hasCriticalErrors = cardsNeedingReprocessing.some(
    card =>
      card.base_translation?.includes("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏") ||
      card.base_translation?.includes("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
  );

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
  const handleRetry = async () => {
    if (isRetrying || !onRetryProcessing) return;

    try {
      setIsRetrying(true);
      setRetryProgress({ current: 0, total: cardsNeedingReprocessing.length });

      console.log(`üîÑ Starting retry processing: ${cardsNeedingReprocessing.length} cards`);

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é retry —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
      const result = await onRetryProcessing();

      setLastRetryResult({
        ...result,
        timestamp: Date.now(),
      });

      console.log(`‚úÖ Retry completed: ${result.successful}/${result.total} successful`);

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (result.successful === result.total) {
        // –í—Å–µ —É—Å–ø–µ—à–Ω–æ
        setTimeout(() => {
          setLastRetryResult(null);
        }, 5000); // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      } else if (result.successful > 0) {
        // –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ
        setTimeout(() => {
          setLastRetryResult(null);
        }, 10000); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º —É—Å–ø–µ—Ö–µ
      }

    } catch (error) {
      console.error('‚ùå Retry processing failed:', error);
      setLastRetryResult({
        total: cardsNeedingReprocessing.length,
        successful: 0,
        remaining: cardsNeedingReprocessing.length,
        timestamp: Date.now(),
      });
    } finally {
      setIsRetrying(false);
      setRetryProgress(null);
    }
  };

  const getStatusInfo = () => {
    if (isRetrying) {
      return {
        color: "bg-blue-100 border-blue-400 text-blue-700",
        icon: "üîÑ",
        title: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
        message: retryProgress
          ? `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ${retryProgress.current} –∏–∑ ${retryProgress.total} —á–∞–Ω–∫–æ–≤`
          : "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...",
        suggestion: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
      };
    }

    if (lastRetryResult) {
      const { total, successful, remaining } = lastRetryResult;
      if (successful === total) {
        return {
          color: "bg-green-100 border-green-400 text-green-700",
          icon: "‚úÖ",
          title: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
          message: `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successful} –∏–∑ ${total} —á–∞–Ω–∫–æ–≤`,
          suggestion: "–í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
        };
      } else if (successful > 0) {
        return {
          color: "bg-yellow-100 border-yellow-400 text-yellow-700",
          icon: "‚ö†Ô∏è",
          title: "–ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
          message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successful} –∏–∑ ${total} —á–∞–Ω–∫–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å ${remaining} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö.`,
          suggestion: "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞–Ω–∫–æ–≤.",
        };
      } else {
        return {
          color: "bg-red-100 border-red-400 text-red-700",
          icon: "‚ùå",
          title: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞",
          message: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ ${total} —á–∞–Ω–∫–æ–≤`,
          suggestion: "–í–æ–∑–º–æ–∂–Ω–æ, API –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        };
      }
    }

    if (hasOverloadErrors) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`,
        suggestion: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
      };
    } else if (hasRateLimitErrors) {
      return {
        color: "bg-yellow-100 border-yellow-400 text-yellow-700",
        icon: "üü°",
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤.`,
        suggestion: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
      };
    } else if (hasCriticalErrors) {
      return {
        color: "bg-orange-100 border-orange-400 text-orange-700",
        icon: "üü†",
        title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`,
        suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
      };
    } else {
      return {
        color: "bg-blue-100 border-blue-400 text-blue-700",
        icon: "‚ÑπÔ∏è",
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        message: `${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        suggestion: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
      };
    }
  };

  const statusInfo = getStatusInfo();

  return (
    <div className={`border rounded-lg p-4 mb-4 ${statusInfo.color}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-lg">{statusInfo.icon}</span>
            <h3 className="font-semibold">{statusInfo.title}</h3>
          </div>

          <p className="mb-2">{statusInfo.message}</p>

          {statusInfo.suggestion && (
            <p className="text-sm opacity-80 mb-3">{statusInfo.suggestion}</p>
          )}

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è retry */}
          {isRetrying && retryProgress && (
            <div className="mb-3">
              <div className="w-full bg-white bg-opacity-50 rounded-full h-2">
                <div
                  className="bg-current h-2 rounded-full transition-all duration-300"
                  style={{
                    width: `${Math.round((retryProgress.current / retryProgress.total) * 100)}%`
                  }}
                ></div>
              </div>
              <div className="text-xs mt-1 opacity-75">
                {Math.round((retryProgress.current / retryProgress.total) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ
              </div>
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ retry */}
          {retryQueue && retryQueue.queue.length > 0 && (
            <div className="text-sm mb-3 bg-white bg-opacity-20 rounded p-2">
              <strong>–û—á–µ—Ä–µ–¥—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong>
              <div className="mt-1">
                üìã –í –æ—á–µ—Ä–µ–¥–∏: {retryQueue.queue.length} —á–∞–Ω–∫–æ–≤
                {retryQueue.totalRetried > 0 && (
                  <span className="ml-2">
                    ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ: {retryQueue.successfulRetries}/{retryQueue.totalRetried}
                  </span>
                )}
              </div>
            </div>
          )}

          {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ */}
          {cardsNeedingReprocessing.length > 0 && !isRetrying && (
            <div className="text-sm mb-3">
              <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:</strong>
              <div className="mt-1 max-h-20 overflow-y-auto">
                {cardsNeedingReprocessing.slice(0, 3).map((card, index) => {
                  const preview = card.contexts?.[0]?.original_phrase || card.base_form || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞–Ω–∫";
                  return (
                    <div key={index} className="text-xs opacity-75">
                      ‚Ä¢ {preview.substring(0, 60)}...
                    </div>
                  );
                })}
                {cardsNeedingReprocessing.length > 3 && (
                  <div className="text-xs opacity-75">
                    ... –∏ –µ—â–µ {cardsNeedingReprocessing.length - 3}
                  </div>
                )}
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="flex flex-col gap-2 ml-4">
          {!lastRetryResult || (lastRetryResult && lastRetryResult.remaining > 0) ? (
            <button
              onClick={handleRetry}
              disabled={isRetrying || cardsNeedingReprocessing.length === 0}
              className={`px-4 py-2 rounded transition-colors text-sm font-medium ${
                isRetrying || cardsNeedingReprocessing.length === 0
                  ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                  : "bg-white border border-current hover:bg-opacity-80"
              }`}
              title={
                isRetrying
                  ? "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."
                  : `–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤`
              }
            >
              {isRetrying ? "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..." : "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"}
            </button>
          ) : (
            <button
              onClick={() => setLastRetryResult(null)}
              className="px-4 py-2 bg-white border border-current rounded hover:bg-opacity-80 text-sm font-medium transition-colors"
            >
              ‚úÖ –û–ö
            </button>
          )}
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ dev —Ä–µ–∂–∏–º–µ */}
      {process.env.NODE_ENV === "development" && (
        <div className="mt-3 pt-3 border-t border-current border-opacity-30 text-xs opacity-60">
          <div>–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {cardsNeedingReprocessing.length}</div>
          <div>
            –¢–∏–ø—ã –æ—à–∏–±–æ–∫: {hasOverloadErrors ? "overload " : ""}
            {hasRateLimitErrors ? "rate-limit " : ""}
            {hasCriticalErrors ? "critical " : ""}
          </div>
          {retryQueue && (
            <div>
              –û—á–µ—Ä–µ–¥—å retry: {retryQueue.queue.length} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏,
              {retryQueue.isProcessing ? " –æ–±—Ä–∞–±–æ—Ç–∫–∞..." : " –ø—Ä–æ—Å—Ç–æ–π"}
            </div>
          )}
        </div>
      )}
    </div>
  );
};
```
–ò—Ç–∞–∫ –º—ã —Å–æ–∑–¥–∞–ª–∏ —É –∂–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏  3 –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤:

–£–ª—É—á—à–µ–Ω–Ω–∞—è retry-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è claude.ts
–ú–µ—Ö–∞–Ω–∏–∑–º retry –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è useProcessing.ts
–£–ª—É—á—à–µ–Ω–Ω—ã–π APIStatusBar —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é retry

–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å:

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ App.tsx
–£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è proxy —Å–µ—Ä–≤–µ—Ä–∞
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ—à–∏–±–æ–∫
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã

–°–Ω–∞—á–∞–ª–∞ –Ω–∞–±—Ä–æ—Å–∞–π —á–µ—Ä–Ω–æ–≤–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ App.tsx, –∑–∞—Ç–µ–º –Ω–∞–±—Ä–æ—Å–∞–π —É–ª—É—á—à–µ–Ω–∏—è proxy —Å–µ—Ä–≤–µ—Ä–∞.

4. –ß–µ—Ä–Ω–æ–≤–∏–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤ App.tsx
```
// –£–õ–£–ß–®–ï–ù–ò–ï 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ –≤ client/src/App.tsx
// –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

// –í –∏–º–ø–æ—Ä—Ç–∞—Ö useProcessing –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è (—Å—Ç—Ä–æ–∫–∞ ~10)
const {
  state,
  flashcards,
  translationText,
  processingProgress,
  formTranslations,
  processText,
  updateCard,
  toggleCardVisibility,
  deleteCard,
  addNewCard,
  clearAll,
  setFlashcards,
  setTranslationText,
  setState,
  setFormTranslations,

  // –ù–û–í–û–ï: –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è retry
  processRetryQueue,
  retryQueue,
  clearRetryQueue,
} = useProcessing(inputText, setMode);

// –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è retry –ø—Ä–æ—Ü–µ—Å—Å–∞ (–ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ~20)
const [retryInProgress, setRetryInProgress] = React.useState(false);
const [retryStats, setRetryStats] = React.useState<{
  totalAttempts: number;
  successfulRetries: number;
  lastRetryTime: number;
} | null>(null);

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç APIStatusBar
const handleRetryProcessing = React.useCallback(async () => {
  if (retryInProgress || !processRetryQueue) {
    console.warn('‚ö†Ô∏è Retry already in progress or processRetryQueue not available');
    return { total: 0, successful: 0, remaining: 0 };
  }

  try {
    setRetryInProgress(true);
    console.log('üöÄ Starting retry processing from App.tsx');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const progressCallback = (current: number, total: number) => {
      console.log(`üìä Retry progress: ${current}/${total}`);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ UI
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É retry –æ—á–µ—Ä–µ–¥–∏
    const result = await processRetryQueue(progressCallback);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    setRetryStats({
      totalAttempts: (retryStats?.totalAttempts || 0) + result.total,
      successfulRetries: (retryStats?.successfulRetries || 0) + result.successful,
      lastRetryTime: Date.now(),
    });

    console.log(`‚úÖ Retry processing completed:`, result);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (result.successful > 0) {
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      console.log(`üéâ Successfully processed ${result.successful} chunks!`);

      // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ø–µ—à–Ω–æ, –æ—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –æ—à–∏–±–∫–∏
      if (result.remaining === 0) {
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        setTimeout(() => {
          setMode("flashcards");
        }, 1000);
      }
    }

    return result;

  } catch (error) {
    console.error('‚ùå Error in handleRetryProcessing:', error);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    return {
      total: retryQueue?.queue?.length || 0,
      successful: 0,
      remaining: retryQueue?.queue?.length || 0,
    };
  } finally {
    setRetryInProgress(false);
  }
}, [processRetryQueue, retryInProgress, retryStats, retryQueue, setMode]);

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ retry –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const handleClearWithRetry = React.useCallback(() => {
  // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  setInputText("");
  setCurrentIndex(0);
  setFlipped(false);
  setSearchTerm("");
  setCurrentPage(0);
  setMode("text");
  clearAll();

  // –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º retry –¥–∞–Ω–Ω—ã–µ
  if (clearRetryQueue) {
    clearRetryQueue();
  }
  setRetryInProgress(false);
  setRetryStats(null);

  // –û—á–∏—â–∞–µ–º file input
  const fileInput = document.getElementById("import-file-input") as HTMLInputElement;
  if (fileInput) {
    fileInput.value = "";
  }

  console.log('üßπ All data cleared including retry queue');
}, [clearAll, clearRetryQueue]);

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π retry –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
const onDataLoadWithRetry = React.useCallback(
  (data: ExportData) => {
    // –û—á–∏—â–∞–µ–º retry —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (clearRetryQueue) {
      clearRetryQueue();
    }
    setRetryInProgress(false);
    setRetryStats(null);

    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    onDataLoad(data);

    console.log('üì• Data loaded, retry state cleared');
  },
  [onDataLoad, clearRetryQueue]
);

// –û–±–Ω–æ–≤–ª—è–µ–º —Ö—É–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const { exportData, importData } = useFileOperations({
  flashcards,
  inputText,
  translationText,
  formTranslations,
  onDataLoad: onDataLoadWithRetry, // –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å retry
});

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É—á–∏—Ç—ã–≤–∞–µ–º retry –æ—á–µ—Ä–µ–¥—å)
const isProcessed = state === "ready";
const hasRetryableData = retryQueue && retryQueue.queue.length > 0;

// –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π APIStatusBar —Å retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
// –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π <APIStatusBar flashcards={flashcards} /> –Ω–∞:
const renderAPIStatusBar = () => {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º status bar –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ò–õ–ò retry –æ—á–µ—Ä–µ–¥—å
  const needsRetryProcessing = flashcards.some(card =>
    (card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
    card.base_translation?.includes("[Translation needed:") ||
    card.phrase_translation?.includes("[Chunk translation needed:") ||
    card.base_form?.includes("retry_needed") ||
    card.base_form?.includes("rate_limit") ||
    card.base_form?.includes("Error in chunk")
  );

  if (!needsRetryProcessing && (!retryQueue || retryQueue.queue.length === 0)) {
    return null;
  }

  return (
    <APIStatusBar
      flashcards={flashcards}
      onRetryProcessing={handleRetryProcessing}
      retryQueue={retryQueue}
    />
  );
};

// –í JSX, –∑–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π APIStatusBar:
// <APIStatusBar flashcards={flashcards} />
// –ù–ê:
{renderAPIStatusBar()}

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å retry —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
const renderRetryStats = () => {
  if (!retryStats || (!retryStats.totalAttempts && !hasRetryableData)) {
    return null;
  }

  return (
    <div className="w-full max-w-6xl mx-auto px-8 mb-4">
      <div className="bg-white/10 rounded-lg p-3 text-white text-sm">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <span>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</span>
            {retryStats.totalAttempts > 0 && (
              <span>
                –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫: {retryStats.successfulRetries}/{retryStats.totalAttempts}
              </span>
            )}
            {hasRetryableData && (
              <span>–í –æ—á–µ—Ä–µ–¥–∏: {retryQueue?.queue?.length || 0}</span>
            )}
          </div>

          {retryStats.lastRetryTime && (
            <span className="text-xs opacity-75">
              –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {new Date(retryStats.lastRetryTime).toLocaleTimeString()}
            </span>
          )}
        </div>
      </div>
    </div>
  );
};

// –í –æ—Å–Ω–æ–≤–Ω–æ–º return JSX, –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ Header –∏ –ø–µ—Ä–µ–¥ ModeSelector:
{renderRetryStats()}

// –û–ë–ù–û–í–õ–ï–ù–ò–ï: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ Clear –¥–ª—è —É—á–µ—Ç–∞ retry –¥–∞–Ω–Ω—ã—Ö
// –í ModeSelector –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:
<ModeSelector
  mode={mode}
  onChange={setMode}
  onClear={handleClearWithRetry} // –û–ë–ù–û–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å retry
  isProcessed={isProcessed}
/>

// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: Keyboard shortcuts –¥–ª—è retry (–≤ useKeyboardNavigation)
// –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π shortcut –≤ –º–∞—Å—Å–∏–≤ shortcuts (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
const retryShortcut = React.useCallback((e: KeyboardEvent) => {
  // Ctrl+R –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ retry
  if (e.ctrlKey && e.key === 'r' && hasRetryableData && !retryInProgress) {
    e.preventDefault();
    handleRetryProcessing();
  }
}, [hasRetryableData, retryInProgress, handleRetryProcessing]);

// –î–æ–±–∞–≤–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è retry shortcut
React.useEffect(() => {
  window.addEventListener('keydown', retryShortcut);
  return () => window.removeEventListener('keydown', retryShortcut);
}, [retryShortcut]);

// –§–ò–ù–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
React.useEffect(() => {
  console.log('üîÑ Retry system state:', {
    retryQueueLength: retryQueue?.queue?.length || 0,
    retryInProgress,
    hasRetryableCards: flashcards.filter(card =>
      card.base_form?.includes("retry_needed") ||
      card.base_form?.includes("rate_limit")
    ).length,
    retryStats,
  });
}, [retryQueue, retryInProgress, flashcards, retryStats]);
```

–û—Ü–µ–Ω–∏ —Ç–µ–∫—É—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é, –æ—Ü–µ–Ω–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏—Ö –≤ —Ç–µ–∫—É—â—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
–ø—Ä–æ–≤–µ—Ä—å –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –Ω–µ –Ω–∞—Ä—É—à–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –∫–æ–¥–∞. –ü–µ—Ä–µ–ø–∏—à–∏ –∏—Ö –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ—à–∏–±–∫–∏ –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å –∫–æ–¥–æ–≤–æ–π –±–∞–∑–æ–π.
–ü–æ–º–æ–≥–∏ –º–Ω–µ –≤–Ω–µ–¥—Ä–∏—Ç—å –∏—Ö —Ç–∞–∫ —á—Ç–æ–±—ã –º–Ω–µ –±—ã–ª–æ —á–µ—Ç–∫–æ –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å.
 –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π –ø—Ä–∞–≤–∫–∏  –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã.

–û—Ü–µ–Ω–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π:
–ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤, –≤–∏–∂—É —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞–º–∏:
–ß–µ—Ä–Ω–æ–≤–∏–∫ 1 (claude.ts) - —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:
	- –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è maxRetries –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
	- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
	- –°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥

–ß–µ—Ä–Ω–æ–≤–∏–∫ 2 (useProcessing.ts) - –∏–∑–±—ã—Ç–æ—á–Ω—ã–π:
	- –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–∂–Ω—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–æ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
	- –ö–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤

–ß–µ—Ä–Ω–æ–≤–∏–∫ 3 (APIStatusBar) - —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π:
   -–•–æ—Ä–æ—à–∞—è –∏–¥–µ—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
	-–ù–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

–ß–µ—Ä–Ω–æ–≤–∏–∫ 4 (App.tsx) - —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏:
	- –ú–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
	- –ù–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ—ç—Ç–∞–ø–Ω—ã–π –ø–æ–¥—Ö–æ–¥:
–≠—Ç–∞–ø 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
```
// ========================================
// 1. –£–õ–£–ß–®–ï–ù–ò–ï claude.ts - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π retry
// ========================================
// –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 15 (–ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤):

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
const RETRY_CONFIG = {
  maxRetries: 5, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 3 –¥–æ 5
  delays: {
    529: { base: 10000, multiplier: 1.5 }, // overload - –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫
    429: { base: 5000, multiplier: 2 },    // rate limit - –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫
    default: { base: 1000, multiplier: 2 }  // –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å 1 —Å–µ–∫
  }
};

// –í —Ñ—É–Ω–∫—Ü–∏–∏ callClaude –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É 78:
// const maxRetries = 3;
// –ù–ê:
const maxRetries = RETRY_CONFIG.maxRetries;

// –ó–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é calculateBackoffDelay (—Å—Ç—Ä–æ–∫–∏ ~83-96) –Ω–∞:
const calculateBackoffDelay = (attempt: number, retryAfter?: string, statusCode?: number): number => {
  if (retryAfter) {
    const retryAfterMs = parseInt(retryAfter) * 1000;
    console.log(`üïê Using Retry-After header: ${retryAfterMs}ms`);
    return retryAfterMs;
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
  const config = statusCode && RETRY_CONFIG.delays[statusCode as keyof typeof RETRY_CONFIG.delays]
    ? RETRY_CONFIG.delays[statusCode as keyof typeof RETRY_CONFIG.delays]
    : RETRY_CONFIG.delays.default;

  // Exponential backoff —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  const exponentialDelay = Math.min(
    config.base * Math.pow(config.multiplier, attempt - 1),
    60000 // –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
  );

  // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
  const jitter = exponentialDelay * 0.1 * Math.random();
  const totalDelay = exponentialDelay + jitter;

  console.log(`üïê Calculated delay for attempt ${attempt} (status ${statusCode}): ${formatDuration(totalDelay)}`);
  return totalDelay;
};

// –í retry —Ü–∏–∫–ª–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 150) –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–∑–æ–≤:
// const delay = calculateBackoffDelay(attempt, retryAfter || undefined);
// –ù–ê:
const delay = calculateBackoffDelay(attempt, retryAfter || undefined, response.status);

// ========================================
// 2. –£–õ–£–ß–®–ï–ù–ò–ï useProcessing.ts - –ü—Ä–æ—Å—Ç–æ–π retry –º–µ—Ö–∞–Ω–∏–∑–º
// ========================================
// –î–æ–±–∞–≤–∏—Ç—å –≤ —Ö—É–∫ useProcessing –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ ~20:

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è retry –æ—á–µ—Ä–µ–¥–∏
const [retryQueue, setRetryQueue] = React.useState<{
  failedChunks: Array<{ index: number; text: string; attempt: number }>;
  isProcessing: boolean;
}>({
  failedChunks: [],
  isProcessing: false
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
const retryFailedChunks = React.useCallback(async () => {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–ª–∞–≥–æ–º needsReprocessing
  const problemCards = flashcards.filter(card =>
    card.base_form?.includes('retry_needed') ||
    card.base_form?.includes('rate_limit') ||
    card.base_translation?.includes('[Translation needed:') ||
    card.base_translation?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
    card.base_translation?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')
  );

  if (problemCards.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return { total: 0, successful: 0, remaining: 0 };
  }

  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${problemCards.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`);
  setRetryQueue({ failedChunks: [], isProcessing: true });

  let successCount = 0;
  let failedCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  for (const problemCard of problemCards) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const originalText = problemCard.contexts?.[0]?.original_phrase || '';

    if (!originalText) {
      console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', problemCard.base_form);
      failedCount++;
      continue;
    }

    try {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞: "${originalText.substring(0, 50)}..."`);

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
      const newCards = await processChunkWithContext(originalText);

      if (newCards && newCards.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const validCards = newCards.filter(card =>
          !card.front?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') &&
          !card.front?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')
        );

        if (validCards.length > 0) {
          // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ
          setFlashcards(prev => {
            const updated = prev.filter(card =>
              card.base_form !== problemCard.base_form
            );
            return [...updated, ...mergeCardsByBaseForm(validCards)];
          });

          successCount++;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–∞–Ω–∫: ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        } else {
          failedCount++;
        }
      } else {
        failedCount++;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      failedCount++;
    }
  }

  setRetryQueue({ failedChunks: [], isProcessing: false });

  const result = {
    total: problemCards.length,
    successful: successCount,
    remaining: failedCount
  };

  console.log(`üèÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result);
  return result;
}, [flashcards, processChunkWithContext, setFlashcards, mergeCardsByBaseForm]);

// –î–æ–±–∞–≤–∏—Ç—å –≤ return —Ö—É–∫–∞ (–≤ –∫–æ–Ω—Ü–µ):
// retryFailedChunks,
// retryQueue,

// ========================================
// 3. –£–õ–£–ß–®–ï–ù–ò–ï App.tsx - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ retry
// ========================================
// –í –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ useProcessing –¥–æ–±–∞–≤–∏—Ç—å (—Å—Ç—Ä–æ–∫–∞ ~30):
// retryFailedChunks,
// retryQueue,

// –ó–∞–º–µ–Ω–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É –≤ APIStatusBar (—Å—Ç—Ä–æ–∫–∞ ~94):
// onRetryProcessing?: () => void;
// –ù–ê:
// onRetryProcessing: () => Promise<{ total: number; successful: number; remaining: number }>;

// –ò –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å onClick –∫–Ω–æ–ø–∫–∏ (—Å—Ç—Ä–æ–∫–∞ ~145):
onClick={() => {
  if (onRetryProcessing) {
    onRetryProcessing();
  } else {
    alert(
      `–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${cardsNeedingReprocessing.length} —á–∞–Ω–∫–æ–≤. –ü–æ–∫–∞ —á—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.`
    );
  }
}}
// –ù–ê:
onClick={async () => {
  if (onRetryProcessing) {
    const button = event.currentTarget as HTMLButtonElement;
    button.disabled = true;
    button.textContent = 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...';

    try {
      const result = await onRetryProcessing();

      if (result.successful === result.total) {
        button.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 2000);
      } else if (result.successful > 0) {
        button.textContent = `‚ö†Ô∏è ${result.successful}/${result.total}`;
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 3000);
      } else {
        button.textContent = '‚ùå –û—à–∏–±–∫–∞';
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 2000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ retry:', error);
      button.textContent = '‚ùå –û—à–∏–±–∫–∞';
      setTimeout(() => {
        button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
        button.disabled = false;
      }, 2000);
    }
  }
}}

// –ò –ø–µ—Ä–µ–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ APIStatusBar (—Å—Ç—Ä–æ–∫–∞ ~176):
// <APIStatusBar flashcards={flashcards} />
// –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê:
<APIStatusBar
  flashcards={flashcards}
  onRetryProcessing={retryFailedChunks}
/>

// ========================================
// 4. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry
// ========================================
// –î–æ–±–∞–≤–∏—Ç—å –≤ proxy.ts –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 180 (–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞):

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry
if (response.status === 529 || response.status === 429) {
  console.log(`\nüìä RETRY –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
  console.log(`   Retry-After: ${response.headers.get('retry-after') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`   Requests remaining: ${response.headers.get('anthropic-ratelimit-requests-remaining') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);
  console.log(`   ==================\n`);
}
```
–°–æ–∑–¥–∞–ª –ø–µ—Ä–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é.

 –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è (–≠—Ç–∞–ø 1)
 ```
 # üöÄ –ü–æ—à–∞–≥–æ–≤–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞

## –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ claude.ts

### 1.1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `client/src/claude.ts`

### 1.2. –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 15 (–ø–æ—Å–ª–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ `ClaudeErrorResponse`) –¥–æ–±–∞–≤—å—Ç–µ:

```typescript
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è retry —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
const RETRY_CONFIG = {
  maxRetries: 5, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 3 –¥–æ 5
  delays: {
    529: { base: 10000, multiplier: 1.5 }, // overload - –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫
    429: { base: 5000, multiplier: 2 },    // rate limit - –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫
    default: { base: 1000, multiplier: 2 }  // –æ—Å—Ç–∞–ª—å–Ω—ã–µ - —Å 1 —Å–µ–∫
  }
};
```

### 1.3. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É 78:
```typescript
const maxRetries = 3;
```

–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:
```typescript
const maxRetries = RETRY_CONFIG.maxRetries;
```

### 1.4. –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `calculateBackoffDelay` (—Å—Ç—Ä–æ–∫–∏ 83-96)

–ó–∞–º–µ–Ω–∏—Ç–µ –í–°–Æ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞:
```typescript
const calculateBackoffDelay = (attempt: number, retryAfter?: string, statusCode?: number): number => {
  if (retryAfter) {
    const retryAfterMs = parseInt(retryAfter) * 1000;
    console.log(`üïê Using Retry-After header: ${retryAfterMs}ms`);
    return retryAfterMs;
  }

  // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
  const config = statusCode && RETRY_CONFIG.delays[statusCode as keyof typeof RETRY_CONFIG.delays]
    ? RETRY_CONFIG.delays[statusCode as keyof typeof RETRY_CONFIG.delays]
    : RETRY_CONFIG.delays.default;

  // Exponential backoff —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  const exponentialDelay = Math.min(
    config.base * Math.pow(config.multiplier, attempt - 1),
    60000 // –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
  );

  // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
  const jitter = exponentialDelay * 0.1 * Math.random();
  const totalDelay = exponentialDelay + jitter;

  console.log(`üïê Calculated delay for attempt ${attempt} (status ${statusCode}): ${formatDuration(totalDelay)}`);
  return totalDelay;
};
```

### 1.5. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É ~150 –≥–¥–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è calculateBackoffDelay:
```typescript
const delay = calculateBackoffDelay(attempt, retryAfter || undefined);
```

–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:
```typescript
const delay = calculateBackoffDelay(attempt, retryAfter || undefined, response.status);
```

## –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts

### 2.1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `client/src/hooks/useProcessing.ts`

### 2.2. –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 20 (–ø–æ—Å–ª–µ useState –¥–ª—è formTranslations) –¥–æ–±–∞–≤—å—Ç–µ:

```typescript
// –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è retry –æ—á–µ—Ä–µ–¥–∏
const [retryQueue, setRetryQueue] = React.useState<{
  failedChunks: Array<{ index: number; text: string; attempt: number }>;
  isProcessing: boolean;
}>({
  failedChunks: [],
  isProcessing: false
});
```

### 2.3. –ü–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏–µ–π `processText` (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 200) –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:

```typescript
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
const retryFailedChunks = React.useCallback(async () => {
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–ª–∞–≥–æ–º needsReprocessing
  const problemCards = flashcards.filter(card =>
    card.base_form?.includes('retry_needed') ||
    card.base_form?.includes('rate_limit') ||
    card.base_translation?.includes('[Translation needed:') ||
    card.base_translation?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
    card.base_translation?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')
  );

  if (problemCards.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return { total: 0, successful: 0, remaining: 0 };
  }

  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${problemCards.length} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`);
  setRetryQueue({ failedChunks: [], isProcessing: true });

  let successCount = 0;
  let failedCount = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  for (const problemCard of problemCards) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const originalText = problemCard.contexts?.[0]?.original_phrase || '';

    if (!originalText) {
      console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', problemCard.base_form);
      failedCount++;
      continue;
    }

    try {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞: "${originalText.substring(0, 50)}..."`);

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
      const newCards = await processChunkWithContext(originalText);

      if (newCards && newCards.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const validCards = newCards.filter(card =>
          !card.front?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') &&
          !card.front?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')
        );

        if (validCards.length > 0) {
          // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –Ω–æ–≤—ã–µ
          setFlashcards(prev => {
            const updated = prev.filter(card =>
              card.base_form !== problemCard.base_form
            );
            return [...updated, ...mergeCardsByBaseForm(validCards)];
          });

          successCount++;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–∞–Ω–∫: ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        } else {
          failedCount++;
        }
      } else {
        failedCount++;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      failedCount++;
    }
  }

  setRetryQueue({ failedChunks: [], isProcessing: false });

  const result = {
    total: problemCards.length,
    successful: successCount,
    remaining: failedCount
  };

  console.log(`üèÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result);
  return result;
}, [flashcards, processChunkWithContext, setFlashcards, mergeCardsByBaseForm]);
```

### 2.4. –í –∫–æ–Ω—Ü–µ —Ö—É–∫–∞, –≤ return statement (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 440), –¥–æ–±–∞–≤—å—Ç–µ –¥–≤–µ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:

```typescript
return {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ...

  // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  setFlashcards,
  setTranslationText,
  setState,
  setFormTranslations,

  // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –î–í–ï –°–¢–†–û–ö–ò:
  retryFailedChunks,
  retryQueue,
};
```

## –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ App.tsx

### 3.1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `client/src/App.tsx`

### 3.2. –í –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–∏ useProcessing (—Å—Ç—Ä–æ–∫–∞ ~30) –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–ª—è:

```typescript
const {
  state,
  flashcards,
  translationText,
  processingProgress,
  formTranslations,
  processText,
  updateCard,
  toggleCardVisibility,
  deleteCard,
  addNewCard,
  clearAll,
  setFlashcards,
  setTranslationText,
  setState,
  setFormTranslations,
  // –î–û–ë–ê–í–ò–¢–¨ –≠–¢–ò –î–í–ï –°–¢–†–û–ö–ò:
  retryFailedChunks,
  retryQueue,
} = useProcessing(inputText, setMode);
```

### 3.3. –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å `APIStatusBarProps` (—Å—Ç—Ä–æ–∫–∞ ~16)

–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø `onRetryProcessing`:
```typescript
interface APIStatusBarProps {
  flashcards: FlashcardNew[];
  onRetryProcessing: () => Promise<{ total: number; successful: number; remaining: number }>; // –ò–ó–ú–ï–ù–ï–ù–û
}
```

### 3.4. –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ APIStatusBar –Ω–∞–π–¥–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ onClick –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 145)

–ó–∞–º–µ–Ω–∏—Ç–µ –≤–µ—Å—å onClick –Ω–∞:
```typescript
onClick={async (event) => {
  if (onRetryProcessing) {
    const button = event.currentTarget as HTMLButtonElement;
    button.disabled = true;
    button.textContent = 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...';

    try {
      const result = await onRetryProcessing();

      if (result.successful === result.total) {
        button.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 2000);
      } else if (result.successful > 0) {
        button.textContent = `‚ö†Ô∏è ${result.successful}/${result.total}`;
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 3000);
      } else {
        button.textContent = '‚ùå –û—à–∏–±–∫–∞';
        setTimeout(() => {
          button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
          button.disabled = false;
        }, 2000);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ retry:', error);
      button.textContent = '‚ùå –û—à–∏–±–∫–∞';
      setTimeout(() => {
        button.textContent = 'üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å';
        button.disabled = false;
      }, 2000);
    }
  }
}}
```

### 3.5. –ù–∞–π–¥–∏—Ç–µ –≥–¥–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è APIStatusBar (–æ–∫–æ–ª–æ —Å—Ç—Ä–æ–∫–∏ 176)

–ó–∞–º–µ–Ω–∏—Ç–µ:
```typescript
<APIStatusBar flashcards={flashcards} />
```

–ù–∞:
```typescript
<APIStatusBar
  flashcards={flashcards}
  onRetryProcessing={retryFailedChunks}
/>
```

## –®–∞–≥ 4: (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ proxy.ts

### 4.1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `server/proxy.ts`

### 4.2. –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 180 (–≤ –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞) –¥–æ–±–∞–≤—å—Ç–µ:

```typescript
// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry
if (response.status === 529 || response.status === 429) {
  console.log(`\nüìä RETRY –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
  console.log(`   Retry-After: ${response.headers.get('retry-after') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`   Requests remaining: ${response.headers.get('anthropic-ratelimit-requests-remaining') || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`   –í—Ä–µ–º—è: ${new Date().toISOString()}`);
  console.log(`   ==================\n`);
}
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
   ```bash
   npm run dev
   ```

2. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –≤ APIStatusBar

4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–æ—á–µ–∫

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

1. **–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É retry**: 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
2. **–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫**: 5 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
3. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏**:
   - 529 –æ—à–∏–±–∫–∏: –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫—É–Ω–¥
   - 429 –æ—à–∏–±–∫–∏: –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫—É–Ω–¥
   - –û—Å—Ç–∞–ª—å–Ω—ã–µ: –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 —Å–µ–∫—É–Ω–¥—ã

## üéØ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥

1. **–£–º–Ω—ã–π retry –≤ claude.ts**: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
2. **–ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å retry**: –ù–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–±—É–µ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–Ω–æ–≤–æ
3. **–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å**: –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
4. **–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–º–µ–Ω–∞**: –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
 ```
 –°–æ–∑–¥–∞–ª –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.

 CRITIC AGENT (Critical analysis):
‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:

–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –Ω–µ –Ω–∞—Ä—É—à–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ - –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —à–∞–≥ –æ—Ç–¥–µ–ª—å–Ω–æ
–ü—Ä–æ—Å—Ç–æ—Ç–∞ –æ—Ç–ª–∞–¥–∫–∏ - –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–æ
–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å retry

‚ö†Ô∏è –ß—Ç–æ –ù–ï –≤–∫–ª—é—á–µ–Ω–æ (–∏ –ø–æ—á–µ–º—É):

–°–ª–æ–∂–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º - –∏–∑–±—ã—Ç–æ—á–Ω–æ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥
–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ APIStatusBar - –¥–æ–±–∞–≤–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
Keyboard shortcuts –¥–ª—è retry - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ —Å–µ–π—á–∞—Å
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry –≤ UI - —É—Å–ª–æ–∂–Ω–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–≠—Ç–∞–ø 2):
–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≠—Ç–∞–ø–∞ 1 –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:

–ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä retry –≤ APIStatusBar
–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ retry –ø–æ–ø—ã—Ç–æ–∫
–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ retry –±–µ—Å–ø–æ–ª–µ–∑–µ–Ω
Batch retry - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞–Ω–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

AUDITOR AGENT (Final audit):

‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã
‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
‚úÖ –ö–æ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã

COORDINATOR AGENT (Coordination):
–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å –≠—Ç–∞–ø–∞ 1 - —ç—Ç–æ –¥–∞—Å—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π retry –º–µ—Ö–∞–Ω–∏–∑–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
CONTROLLER AGENT (Loop check):
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤. –†–µ—à–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É.
WORK MODE: SMART MODE
RISK ASSESSMENT: LOW (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
CONFIDENCE: 95%
LOOP STATUS: None detected
NEXT STEPS: –í–Ω–µ–¥—Ä–∏—Ç—å –≠—Ç–∞–ø 1, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –∑–∞—Ç–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≠—Ç–∞–ø 2

–Ø –≤–Ω–µ—Å –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–∏–∑–≤–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.  –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:

–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ - –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ retry –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è (—Å 16 –¥–æ 41 –∏ –¥–∞–ª–µ–µ), —á—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.
–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è - –≤ APIStatusBar –≤–∏–¥–Ω–æ "–¢–∏–ø—ã –æ—à–∏–±–æ–∫:" –Ω–æ —Å–∞–º–∏ —Ç–∏–ø—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è.
–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ "..." - –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.
–ù–µ—Ç —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–º –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–µ - —Ç—Ä–∏ —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫:

read ECONNRESET - —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
getaddrinfo ENOTFOUND api.anthropic.com - –Ω–µ –º–æ–∂–µ—Ç —Ä–∞–∑—Ä–µ—à–∏—Ç—å DNS
–î—Ä—É–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏

–¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º —Ç–µ–∫—Å—Ç–æ–º - APIStatusBar –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ—è–≤–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
–ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ –≠—Ç–∞–ø–µ 1 –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ –≠—Ç–∞–ø—É 2.

–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ retry - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Ä–∞—Å—Ç–µ—Ç (16‚Üí41‚Üí...)
–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
–ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ "..." - –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - ECONNRESET, ENOTFOUND
APIStatusBar –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–∫–∞—Ö

–î–æ—Ä–∞–±–æ—Ç–∫–∏ –≠—Ç–∞–ø–∞ 1
```
// ========================================
// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï useProcessing.ts - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
// ========================================
// –ó–ê–ú–ï–ù–ò–¢–¨ —Ñ—É–Ω–∫—Ü–∏—é retryFailedChunks –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

const retryFailedChunks = React.useCallback(async () => {
  // –ù–∞—Ö–æ–¥–∏–º –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ base_form
  const problemCardsMap = new Map<string, FlashcardNew>();

  flashcards.forEach(card => {
    const isProblematic =
      card.base_form?.includes('retry_needed') ||
      card.base_form?.includes('rate_limit') ||
      card.base_form?.includes('network_error') ||
      card.base_form?.includes('proxy_error') ||
      card.base_translation?.includes('[Translation needed:') ||
      card.base_translation?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
      card.base_translation?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') ||
      card.base_translation?.includes('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏') ||
      card.base_translation?.includes('–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    if (isProblematic && card.base_form) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      problemCardsMap.set(card.base_form, card);
    }
  });

  const problemCards = Array.from(problemCardsMap.values());

  if (problemCards.length === 0) {
    console.log('‚úÖ –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return { total: 0, successful: 0, remaining: 0 };
  }

  console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É ${problemCards.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`);
  setRetryQueue({ failedChunks: [], isProcessing: true });

  let successCount = 0;
  let failedCount = 0;
  const processedChunks = new Set<string>(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∏

  for (const problemCard of problemCards) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const originalText = problemCard.contexts?.[0]?.original_phrase ||
                        problemCard.original_phrase || '';

    if (!originalText) {
      console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:', problemCard.base_form);
      failedCount++;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —á–∞–Ω–∫
    if (processedChunks.has(originalText)) {
      console.log('‚è≠Ô∏è –ß–∞–Ω–∫ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', originalText.substring(0, 50));
      continue;
    }
    processedChunks.add(originalText);

    try {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞: "${originalText.substring(0, 50)}..."`);

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
      const newCards = await processChunkWithContext(originalText);

      if (newCards && newCards.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const validCards = newCards.filter(card =>
          !card.front?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') &&
          !card.front?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') &&
          !card.front?.includes('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏') &&
          !card.front?.includes('–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        );

        if (validCards.length > 0) {
          // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –í–°–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
          setFlashcards(prev => {
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
            const cardsFromThisChunk = prev.filter(card =>
              card.contexts?.[0]?.original_phrase === originalText ||
              card.original_phrase === originalText
            );

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
            const filteredCards = prev.filter(card => {
              const isFromThisChunk = card.contexts?.[0]?.original_phrase === originalText ||
                                     card.original_phrase === originalText;
              const isProblematic = card.base_form?.includes('retry_needed') ||
                                   card.base_form?.includes('rate_limit') ||
                                   card.base_form?.includes('network_error') ||
                                   card.base_form?.includes('proxy_error');

              // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –ù–ï –∏–∑ —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞ –ò–õ–ò –ù–ï –ø—Ä–æ–±–ª–µ–º–Ω–∞—è
              return !(isFromThisChunk && isProblematic);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            return [...filteredCards, ...mergeCardsByBaseForm(validCards)];
          });

          successCount++;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–∞–Ω–∫: ${validCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        } else {
          failedCount++;
        }
      } else {
        failedCount++;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      failedCount++;
    }
  }

  setRetryQueue({ failedChunks: [], isProcessing: false });

  const result = {
    total: problemCards.length,
    successful: successCount,
    remaining: failedCount
  };

  console.log(`üèÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result);
  return result;
}, [flashcards, processChunkWithContext, setFlashcards, mergeCardsByBaseForm]);

// ========================================
// 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï processChunkWithContext - –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
// ========================================
// –í —Ñ—É–Ω–∫—Ü–∏–∏ processChunkWithContext –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
// –ü–û–°–õ–ï —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π "HTTP Error 529":

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
if (raw.includes("fetch failed") || raw.includes("ENOTFOUND") || raw.includes("ECONNRESET")) {
  console.log("‚ùå Proxy server error detected");

  const errorType = raw.includes("ENOTFOUND") ? "network_error" : "proxy_error";
  const errorMessage = raw.includes("ENOTFOUND")
    ? "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
    : "–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –∑–∞–ø—É—Å—Ç–∏—Ç–µ server (npm run start)";

  const networkErrorCards: FlashcardOld[] = [{
    front: errorMessage,
    back: `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é`,
    base_form: `${errorType}_${Date.now()}`,
    base_translation: errorMessage,
    original_phrase: chunk,
    phrase_translation: `–¢–µ–∫—Å—Ç: "${chunk.substring(0, 100)}${chunk.length > 100 ? "..." : ""}"`,
    text_forms: [errorType],
    visible: true,
    needsReprocessing: true,
  }];

  return normalizeCards(networkErrorCards);
}

// ========================================
// 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï APIStatusBar –≤ App.tsx
// ========================================
// –ó–ê–ú–ï–ù–ò–¢–¨ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç APIStatusBar –ø–æ–ª–Ω–æ—Å—Ç—å—é:

const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  onRetryProcessing
}) => {
  const [isRetrying, setIsRetrying] = React.useState(false);

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const errorStats = React.useMemo(() => {
    const stats = {
      overload: 0,
      rateLimit: 0,
      network: 0,
      proxy: 0,
      other: 0,
      total: 0,
      chunks: new Set<string>() // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
    };

    flashcards.forEach(card => {
      const needsReprocessing =
        (card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
        card.base_translation?.includes("[Translation needed:") ||
        card.phrase_translation?.includes("[Chunk translation needed:") ||
        card.base_form?.includes("retry_needed") ||
        card.base_form?.includes("rate_limit") ||
        card.base_form?.includes("network_error") ||
        card.base_form?.includes("proxy_error") ||
        card.base_form?.includes("Error in chunk") ||
        card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") ||
        card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç") ||
        card.base_translation?.includes("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏") ||
        card.base_translation?.includes("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");

      if (needsReprocessing) {
        stats.total++;

        // –î–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫ –≤ Set –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
        const chunkText = card.contexts?.[0]?.original_phrase ||
                         card.original_phrase ||
                         card.base_form || '';
        if (chunkText) {
          stats.chunks.add(chunkText);
        }

        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        if (card.base_form?.includes("retry_needed") ||
            card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")) {
          stats.overload++;
        } else if (card.base_form?.includes("rate_limit") ||
                   card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç")) {
          stats.rateLimit++;
        } else if (card.base_form?.includes("network_error") ||
                   card.base_translation?.includes("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏")) {
          stats.network++;
        } else if (card.base_form?.includes("proxy_error") ||
                   card.base_translation?.includes("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")) {
          stats.proxy++;
        } else {
          stats.other++;
        }
      }
    });

    return stats;
  }, [flashcards]);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
  if (errorStats.total === 0) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  const getStatusInfo = () => {
    if (errorStats.proxy > 0) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.`,
        suggestion: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π 'npm run start' –≤ –ø–∞–ø–∫–µ server, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'.",
        canRetry: false // –ù–µ–ª—å–∑—è retry –ø–æ–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω —Å–µ—Ä–≤–µ—Ä
      };
    } else if (errorStats.network > 0) {
      return {
        color: "bg-orange-100 border-orange-400 text-orange-700",
        icon: "üü†",
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.`,
        suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'.",
        canRetry: false
      };
    } else if (errorStats.overload > 0) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`,
        suggestion: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        canRetry: true
      };
    } else if (errorStats.rateLimit > 0) {
      return {
        color: "bg-yellow-100 border-yellow-400 text-yellow-700",
        icon: "üü°",
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤.`,
        suggestion: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        canRetry: true
      };
    } else {
      return {
        color: "bg-blue-100 border-blue-400 text-blue-700",
        icon: "‚ÑπÔ∏è",
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        suggestion: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
        canRetry: true
      };
    }
  };

  const statusInfo = getStatusInfo();

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
  const getProblematicChunks = () => {
    const chunks: string[] = [];
    const seen = new Set<string>();

    flashcards.forEach(card => {
      if ((card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
          card.base_form?.includes("retry_needed") ||
          card.base_form?.includes("rate_limit") ||
          card.base_form?.includes("network_error") ||
          card.base_form?.includes("proxy_error")) {

        const chunkText = card.contexts?.[0]?.original_phrase ||
                         card.original_phrase || '';

        if (chunkText && !seen.has(chunkText)) {
          seen.add(chunkText);
          chunks.push(chunkText);
        }
      }
    });

    return chunks;
  };

  const problematicChunks = getProblematicChunks();

  return (
    <div className={`border rounded-lg p-4 mb-4 ${statusInfo.color}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-lg">{statusInfo.icon}</span>
            <h3 className="font-semibold">{statusInfo.title}</h3>
          </div>

          <p className="mb-2">{statusInfo.message}</p>

          {statusInfo.suggestion && (
            <p className="text-sm opacity-80 mb-3">{statusInfo.suggestion}</p>
          )}

          {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ */}
          {problematicChunks.length > 0 && (
            <div className="text-sm mb-3">
              <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:</strong>
              <div className="mt-1 max-h-20 overflow-y-auto">
                {problematicChunks.slice(0, 3).map((chunk, index) => (
                  <div key={index} className="text-xs opacity-75">
                    ‚Ä¢ {chunk.substring(0, 60)}{chunk.length > 60 ? "..." : ""}
                  </div>
                ))}
                {problematicChunks.length > 3 && (
                  <div className="text-xs opacity-75">
                    ... –∏ –µ—â–µ {problematicChunks.length - 3}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫ */}
          {process.env.NODE_ENV === "development" && (
            <div className="text-xs opacity-60 mb-2">
              <div>-----------------------------------------------------</div>
              <div>–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {errorStats.total}</div>
              <div>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {errorStats.chunks.size}</div>
              <div>
                –¢–∏–ø—ã –æ—à–∏–±–æ–∫:
                {errorStats.proxy > 0 && ` –ø—Ä–æ–∫—Å–∏ (${errorStats.proxy})`}
                {errorStats.network > 0 && ` —Å–µ—Ç—å (${errorStats.network})`}
                {errorStats.overload > 0 && ` –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ (${errorStats.overload})`}
                {errorStats.rateLimit > 0 && ` –ª–∏–º–∏—Ç (${errorStats.rateLimit})`}
                {errorStats.other > 0 && ` –¥—Ä—É–≥–∏–µ (${errorStats.other})`}
              </div>
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è */}
        <div className="ml-4">
          <button
            onClick={async (event) => {
              if (!statusInfo.canRetry) {
                alert(statusInfo.suggestion);
                return;
              }

              if (onRetryProcessing) {
                const button = event.currentTarget as HTMLButtonElement;
                const originalText = button.textContent;
                button.disabled = true;
                button.textContent = 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...';
                setIsRetrying(true);

                try {
                  const result = await onRetryProcessing();

                  if (result.successful === result.total) {
                    button.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 2000);
                  } else if (result.successful > 0) {
                    button.textContent = `‚ö†Ô∏è ${result.successful}/${result.total}`;
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 3000);
                  } else {
                    button.textContent = '‚ùå –û—à–∏–±–∫–∞';
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 2000);
                  }
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ retry:', error);
                  button.textContent = '‚ùå –û—à–∏–±–∫–∞';
                  setTimeout(() => {
                    button.textContent = originalText;
                    button.disabled = false;
                    setIsRetrying(false);
                  }, 2000);
                }
              }
            }}
            disabled={isRetrying || !statusInfo.canRetry}
            className={`px-4 py-2 rounded transition-colors text-sm font-medium ${
              isRetrying || !statusInfo.canRetry
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-white border border-current hover:bg-opacity-80"
            }`}
            title={
              !statusInfo.canRetry
                ? statusInfo.suggestion
                : `–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤`
            }
          >
            {isRetrying ? "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..." : "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"}
          </button>
        </div>
      </div>
    </div>
  );
};
```
–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é —ç—Ç–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≠—Ç–∞–ø—É 2.
 –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 ```
 # üîß –í–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≠—Ç–∞–ø–∞ 1

## –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts

### 1.1. –û—Ç–∫—Ä–æ–π—Ç–µ `client/src/hooks/useProcessing.ts`

### 1.2. –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `retryFailedChunks` (–∫–æ—Ç–æ—Ä—É—é –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ –ø–µ—Ä–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)

### 1.3. –ó–ê–ú–ï–ù–ò–¢–ï –í–°–Æ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ phase1-fixes (—Å–µ–∫—Ü–∏—è 1)

**–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:**
- ‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Map –∏ Set
- ‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç —á–∞–Ω–∫–∞
- ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ (network_error, proxy_error)

### 1.4. –í —Ñ—É–Ω–∫—Ü–∏–∏ `processChunkWithContext` –Ω–∞–π–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ "HTTP Error 529"

–î–æ–±–∞–≤—å—Ç–µ –ù–û–í–´–ô –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ (–∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ phase1-fixes —Å–µ–∫—Ü–∏—è 2):

```typescript
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
if (raw.includes("fetch failed") || raw.includes("ENOTFOUND") || raw.includes("ECONNRESET")) {
  // ... –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
}
```

**–ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:**
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
- ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
- ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

## –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ App.tsx

### 2.1. –û—Ç–∫—Ä–æ–π—Ç–µ `client/src/App.tsx`

### 2.2. –ù–∞–π–¥–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `APIStatusBar`

### 2.3. –ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ phase1-fixes (—Å–µ–∫—Ü–∏—è 3)

**–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:**
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ Set
- ‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
- ‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
- ‚úÖ –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
- ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ retry –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

## –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

### 3.1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

### 3.2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ test8_6.txt:

1. **–ë–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:**
   - –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å "–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
   - –ö–Ω–æ–ø–∫–∞ retry –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
   - –ü—Ä–∏ –∫–ª–∏–∫–µ - alert —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π

2. **–ë–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:**
   - –î–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
   - –ü—Ä–µ–≤—å—é —Ä–µ–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤, –∞ –Ω–µ "..."
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞—Å—Ç–∏ –ø—Ä–∏ retry

3. **–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:**
   - APIStatusBar –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:

1. **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–æ–≤** - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Set –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
2. **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ retry** - –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∫–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
3. **–¢–∏–ø—ã –æ—à–∏–±–æ–∫** - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
4. **–ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤** - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç

## üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ù–ï —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ retry
- –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- –ü—Ä–µ–≤—å—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
- –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 ```

 –Ø –≤–Ω–µ—Å –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏–∑ "–î–æ—Ä–∞–±–æ—Ç–∫–∏ –≠—Ç–∞–ø–∞ 1" –∏ –ø—Ä–æ–∏–∑–≤–µ–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
–ò–∑—É—á–∏–≤ —Ä–µ–∑—É–ª—å–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤–∏–∂—É —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –≠—Ç–∞–ø–∞ 1:

 –¢–µ—Å—Ç 1 (–±–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞):

–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ "–¥—Ä—É–≥–∏–µ (16)" - –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫–∞–∫–∞—è –∏–º–µ–Ω–Ω–æ –æ—à–∏–±–∫–∞
–ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–æ–±—â–µ
–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å —Å 16 –¥–æ 34 (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ!)
–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä


–¢–µ—Å—Ç 2 (–ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω, –Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞):

–†–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ "—Å–µ—Ç—å (2)"
–ï—Å—Ç—å –ø—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤
–ù–û –∫–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
–°–æ–∑–¥–∞—é—Ç—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å network_error –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ


–¢–µ—Å—Ç 3 (–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞):

APIStatusBar –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è - —Ö–æ—Ä–æ—à–æ

–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤—Å–µ –µ—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ (–ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω = "–¥—Ä—É–≥–∏–µ")
–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ retry –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å error_id –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤. –ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, —É–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.

–í—ã—è–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≠—Ç–∞–ø–∞ 1:
üêõ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è (16‚Üí34)
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ - –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω = "–¥—Ä—É–≥–∏–µ"
–ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å error_id –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ

 –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≠—Ç–∞–ø–∞ 1
 ```
 // ========================================
// 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï processChunkWithContext - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
// ========================================
// –í —Ñ—É–Ω–∫—Ü–∏–∏ processChunkWithContext –ó–ê–ú–ï–ù–ò–¢–¨ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –Ω–∞:

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ (connection refused)
if (raw.includes("fetch failed") && !raw.includes("ENOTFOUND") && !raw.includes("ECONNRESET")) {
  console.log("‚ùå Proxy server connection refused");

  const proxyErrorCards: FlashcardOld[] = [{
    front: `–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`,
    back: `–ó–∞–ø—É—Å—Ç–∏—Ç–µ server –∫–æ–º–∞–Ω–¥–æ–π 'npm run start'`,
    base_form: `proxy_error_${Date.now()}`,
    base_translation: `–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: –∑–∞–ø—É—Å—Ç–∏—Ç–µ server (npm run start)`,
    original_phrase: chunk,
    phrase_translation: `–¢–µ–∫—Å—Ç: "${chunk.substring(0, 100)}${chunk.length > 100 ? "..." : ""}"`,
    text_forms: ['proxy_error'],
    visible: true,
    needsReprocessing: true,
  }];

  return normalizeCards(proxyErrorCards);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
if (raw.includes("ENOTFOUND") || raw.includes("ECONNRESET") ||
    (raw.includes("fetch failed") && raw.includes("api.anthropic.com"))) {
  console.log("‚ùå Network error detected");

  const networkErrorCards: FlashcardOld[] = [{
    front: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏`,
    back: `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É`,
    base_form: `network_error_${Date.now()}`,
    base_translation: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É`,
    original_phrase: chunk,
    phrase_translation: `–¢–µ–∫—Å—Ç: "${chunk.substring(0, 100)}${chunk.length > 100 ? "..." : ""}"`,
    text_forms: ['network_error'],
    visible: true,
    needsReprocessing: true,
  }];

  return normalizeCards(networkErrorCards);
}

// ========================================
// 2. –ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê retryFailedChunks - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
// ========================================
// –ó–ê–ú–ï–ù–ò–¢–¨ –í–°–Æ —Ñ—É–Ω–∫—Ü–∏—é retryFailedChunks:

const retryFailedChunks = React.useCallback(async (
  onProgress?: (current: number, total: number, chunk: string) => void
) => {
  console.log('üîÑ Starting retry process...');

  // –°–æ–±–∏—Ä–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏
  const problemChunksMap = new Map<string, { cards: FlashcardNew[], chunkText: string }>();

  flashcards.forEach(card => {
    const isProblematic =
      card.base_form?.includes('retry_needed') ||
      card.base_form?.includes('rate_limit') ||
      card.base_form?.includes('network_error') ||
      card.base_form?.includes('proxy_error') ||
      card.base_translation?.includes('[Translation needed:') ||
      card.base_translation?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') ||
      card.base_translation?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') ||
      card.base_translation?.includes('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏') ||
      card.base_translation?.includes('–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

    if (isProblematic) {
      const chunkText = card.contexts?.[0]?.original_phrase ||
                       card.original_phrase || '';

      if (chunkText) {
        const existing = problemChunksMap.get(chunkText) || { cards: [], chunkText };
        existing.cards.push(card);
        problemChunksMap.set(chunkText, existing);
      }
    }
  });

  const uniqueChunks = Array.from(problemChunksMap.values());

  if (uniqueChunks.length === 0) {
    console.log('‚úÖ –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    return { total: 0, successful: 0, remaining: 0 };
  }

  console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ ${uniqueChunks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
  setRetryQueue({ failedChunks: [], isProcessing: true });

  let successCount = 0;
  let failedCount = 0;

  for (let i = 0; i < uniqueChunks.length; i++) {
    const { chunkText, cards: problemCards } = uniqueChunks[i];

    // –ü—Ä–æ–≥—Ä–µ—Å—Å callback
    if (onProgress) {
      onProgress(i + 1, uniqueChunks.length, chunkText);
    }

    try {
      console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1}/${uniqueChunks.length}: "${chunkText.substring(0, 50)}..."`);

      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));

      // –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
      const newCards = await processChunkWithContext(chunkText);

      if (newCards && newCards.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–µ –æ—à–∏–±–∫–∏)
        const validCards = newCards.filter(card =>
          !card.base_form?.includes('retry_needed') &&
          !card.base_form?.includes('rate_limit') &&
          !card.base_form?.includes('network_error') &&
          !card.base_form?.includes('proxy_error') &&
          !card.front?.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞') &&
          !card.front?.includes('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç') &&
          !card.front?.includes('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏') &&
          !card.front?.includes('–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        );

        if (validCards.length > 0) {
          // –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞ (–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ, –∏ –Ω–µ—Ç)
          setFlashcards(prev => {
            // –°–æ–±–∏—Ä–∞–µ–º base_forms –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
            const baseFormsToRemove = new Set<string>();

            prev.forEach(card => {
              const cardChunk = card.contexts?.[0]?.original_phrase ||
                               card.original_phrase || '';
              if (cardChunk === chunkText && card.base_form) {
                baseFormsToRemove.add(card.base_form);
              }
            });

            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${baseFormsToRemove.size} –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç —á–∞–Ω–∫–∞`);

            // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            const filteredCards = prev.filter(card =>
              !baseFormsToRemove.has(card.base_form || '')
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            const result = [...filteredCards, ...mergeCardsByBaseForm(validCards)];

            console.log(`üìä –ë—ã–ª–æ: ${prev.length}, —É–¥–∞–ª–µ–Ω–æ: ${baseFormsToRemove.size}, –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${validCards.length}, –∏—Ç–æ–≥–æ: ${result.length}`);

            return result;
          });

          successCount++;
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–∞–Ω–∫: ${validCards.length} –Ω–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫`);
        } else {
          // –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - –æ—à–∏–±–∫–∏, –Ω–µ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ
          failedCount++;
          console.log(`‚ö†Ô∏è –ß–∞–Ω–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ - –æ—à–∏–±–∫–∏`);
        }
      } else {
        failedCount++;
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞–Ω–∫`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
      failedCount++;
    }
  }

  setRetryQueue({ failedChunks: [], isProcessing: false });

  const result = {
    total: uniqueChunks.length,
    successful: successCount,
    remaining: failedCount
  };

  console.log(`üèÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, result);
  return result;
}, [flashcards, processChunkWithContext, setFlashcards, mergeCardsByBaseForm]);

// ========================================
// 3. –û–ë–ù–û–í–õ–ï–ù–ù–´–ô APIStatusBar - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
// ========================================
// –ó–ê–ú–ï–ù–ò–¢–¨ –í–ï–°–¨ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç APIStatusBar:

const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  onRetryProcessing
}) => {
  const [isRetrying, setIsRetrying] = React.useState(false);

  // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
  const errorStats = React.useMemo(() => {
    const stats = {
      overload: 0,
      rateLimit: 0,
      network: 0,
      proxy: 0,
      other: 0,
      total: 0,
      chunks: new Set<string>(),
      chunksList: [] as string[] // –î–ª—è –ø—Ä–µ–≤—å—é
    };

    flashcards.forEach(card => {
      const needsReprocessing =
        (card as FlashcardNew & { needsReprocessing?: boolean }).needsReprocessing ||
        card.base_translation?.includes("[Translation needed:") ||
        card.phrase_translation?.includes("[Chunk translation needed:") ||
        card.base_form?.includes("retry_needed") ||
        card.base_form?.includes("rate_limit") ||
        card.base_form?.includes("network_error") ||
        card.base_form?.includes("proxy_error") ||
        card.base_form?.includes("Error in chunk") ||
        card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞") ||
        card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç") ||
        card.base_translation?.includes("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏") ||
        card.base_translation?.includes("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");

      if (needsReprocessing) {
        stats.total++;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞
        const chunkText = card.contexts?.[0]?.original_phrase ||
                         card.original_phrase || '';

        if (chunkText && !stats.chunks.has(chunkText)) {
          stats.chunks.add(chunkText);
          stats.chunksList.push(chunkText);
        }

        // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ base_form –∏ —Ç–µ–∫—Å—Ç—É
        if (card.base_form?.includes("proxy_error") ||
            card.base_translation?.includes("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω") ||
            card.front?.includes("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")) {
          stats.proxy++;
        } else if (card.base_form?.includes("network_error") ||
                   card.base_translation?.includes("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏") ||
                   card.front?.includes("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏")) {
          stats.network++;
        } else if (card.base_form?.includes("retry_needed") ||
                   card.base_translation?.includes("–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")) {
          stats.overload++;
        } else if (card.base_form?.includes("rate_limit") ||
                   card.base_translation?.includes("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç")) {
          stats.rateLimit++;
        } else {
          stats.other++;
        }
      }
    });

    return stats;
  }, [flashcards]);

  if (errorStats.total === 0) {
    return null;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  const getStatusInfo = () => {
    if (errorStats.proxy > 0) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.`,
        suggestion: "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π 'npm run start' –≤ –ø–∞–ø–∫–µ server, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'.",
        canRetry: true // –†–∞–∑—Ä–µ—à–∞–µ–º retry - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
      };
    } else if (errorStats.network > 0) {
      return {
        color: "bg-orange-100 border-orange-400 text-orange-700",
        icon: "üü†",
        title: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.`,
        suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'.",
        canRetry: true // –†–∞–∑—Ä–µ—à–∞–µ–º retry - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      };
    } else if (errorStats.overload > 0) {
      return {
        color: "bg-red-100 border-red-400 text-red-700",
        icon: "üî¥",
        title: "Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`,
        suggestion: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        canRetry: true
      };
    } else if (errorStats.rateLimit > 0) {
      return {
        color: "bg-yellow-100 border-yellow-400 text-yellow-700",
        icon: "üü°",
        title: "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤.`,
        suggestion: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.",
        canRetry: true
      };
    } else {
      return {
        color: "bg-blue-100 border-blue-400 text-blue-700",
        icon: "‚ÑπÔ∏è",
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        message: `${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        suggestion: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤.",
        canRetry: true
      };
    }
  };

  const statusInfo = getStatusInfo();

  return (
    <div className={`border rounded-lg p-4 mb-4 ${statusInfo.color}`}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <div className="flex items-center gap-2 mb-2">
            <span className="text-lg">{statusInfo.icon}</span>
            <h3 className="font-semibold">{statusInfo.title}</h3>
          </div>

          <p className="mb-2">{statusInfo.message}</p>

          {statusInfo.suggestion && (
            <p className="text-sm opacity-80 mb-3">{statusInfo.suggestion}</p>
          )}

          {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å */}
          {errorStats.chunksList.length > 0 && (
            <div className="text-sm mb-3">
              <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:</strong>
              <div className="mt-1 max-h-20 overflow-y-auto">
                {errorStats.chunksList.slice(0, 3).map((chunk, index) => (
                  <div key={index} className="text-xs opacity-75">
                    ‚Ä¢ {chunk.substring(0, 60)}{chunk.length > 60 ? "..." : ""}
                  </div>
                ))}
                {errorStats.chunksList.length > 3 && (
                  <div className="text-xs opacity-75">
                    ... –∏ –µ—â–µ {errorStats.chunksList.length - 3}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="text-xs opacity-60">
            <div>-----------------------------------------------------</div>
            <div>–ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {errorStats.total}</div>
            <div>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {errorStats.chunks.size}</div>
            <div>
              –¢–∏–ø—ã –æ—à–∏–±–æ–∫:
              {errorStats.proxy > 0 && ` –ø—Ä–æ–∫—Å–∏ (${errorStats.proxy})`}
              {errorStats.network > 0 && ` —Å–µ—Ç—å (${errorStats.network})`}
              {errorStats.overload > 0 && ` –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ (${errorStats.overload})`}
              {errorStats.rateLimit > 0 && ` –ª–∏–º–∏—Ç (${errorStats.rateLimit})`}
              {errorStats.other > 0 && ` –¥—Ä—É–≥–∏–µ (${errorStats.other})`}
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è - –í–°–ï–ì–î–ê –∞–∫—Ç–∏–≤–Ω–∞ */}
        <div className="ml-4">
          <button
            onClick={async (event) => {
              if (onRetryProcessing) {
                const button = event.currentTarget as HTMLButtonElement;
                const originalText = button.textContent;
                button.disabled = true;
                button.textContent = 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...';
                setIsRetrying(true);

                try {
                  const result = await onRetryProcessing();

                  if (result.successful === result.total) {
                    button.textContent = '‚úÖ –ì–æ—Ç–æ–≤–æ!';
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 2000);
                  } else if (result.successful > 0) {
                    button.textContent = `‚ö†Ô∏è ${result.successful}/${result.total}`;
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 3000);
                  } else {
                    button.textContent = '‚ùå –û—à–∏–±–∫–∞';
                    setTimeout(() => {
                      button.textContent = originalText;
                      button.disabled = false;
                      setIsRetrying(false);
                    }, 2000);
                  }
                } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ retry:', error);
                  button.textContent = '‚ùå –û—à–∏–±–∫–∞';
                  setTimeout(() => {
                    button.textContent = originalText;
                    button.disabled = false;
                    setIsRetrying(false);
                  }, 2000);
                }
              }
            }}
            disabled={isRetrying}
            className={`px-4 py-2 rounded transition-colors text-sm font-medium ${
              isRetrying
                ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                : "bg-white border border-current hover:bg-opacity-80"
            }`}
            title={`–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ${errorStats.chunks.size} —á–∞–Ω–∫–æ–≤`}
          >
            {isRetrying ? "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..." : "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å"}
          </button>
        </div>
      </div>
    </div>
  );
};
 ```
–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é —ç—Ç–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π.
```
# üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≠—Ç–∞–ø–∞ 1

## –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

1. ‚ùå **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫** –ø—Ä–∏ retry (16‚Üí34)
2. ‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è** –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏
3. ‚ùå **–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–≤—å—é** –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
4. ‚ùå **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏** –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
5. ‚ùå **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏** —Å error_id

## üîß –®–∞–≥ 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ useProcessing.ts

### 1.1. –û—Ç–∫—Ä–æ–π—Ç–µ `client/src/hooks/useProcessing.ts`

### 1.2. –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `processChunkWithContext`

### 1.3. –ó–ê–ú–ï–ù–ò–¢–ï –±–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–æ–∫—Å–∏ –∏ —Å–µ—Ç–∏

–ù–∞–π–¥–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫:
```typescript
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
if (raw.includes("fetch failed") || raw.includes("ENOTFOUND") || raw.includes("ECONNRESET")) {
```

–ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –Ω–æ–≤—ã–π –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (—Å–µ–∫—Ü–∏—è 1) - –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞:
- –û–¥–∏–Ω –¥–ª—è –ø—Ä–æ–∫—Å–∏ –æ—à–∏–±–æ–∫
- –í—Ç–æ—Ä–æ–π –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫

**–ß—Ç–æ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç:**
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
- ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
- ‚úÖ –†–∞–∑–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –∏ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º

## üîß –®–∞–≥ 2: –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ retryFailedChunks

### 2.1. –í —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ –Ω–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é `retryFailedChunks`

### 2.2. –ó–ê–ú–ï–ù–ò–¢–ï –í–°–Æ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (—Å–µ–∫—Ü–∏—è 2)

**–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Map –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
- ‚úÖ –£–¥–∞–ª—è–µ—Ç –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞–Ω–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫

## üîß –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar –≤ App.tsx

### 3.1. –û—Ç–∫—Ä–æ–π—Ç–µ `client/src/App.tsx`

### 3.2. –ù–∞–π–¥–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç `APIStatusBar`

### 3.3. –ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ (—Å–µ–∫—Ü–∏—è 3)

**–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:**
- ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
- ‚úÖ –ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤ –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è
- ‚úÖ –ö–Ω–æ–ø–∫–∞ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –í–°–ï–ì–î–ê –∞–∫—Ç–∏–≤–Ω–∞
- ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
- ‚úÖ –ü–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π

### –¢–µ—Å—Ç 1: –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞
**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- –ó–∞–≥–æ–ª–æ–≤–æ–∫: "–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
- –¢–∏–ø—ã –æ—à–∏–±–æ–∫: "–ø—Ä–æ–∫—Å–∏ (N)"
- –ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤ –≤–∏–¥–Ω–æ
- –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
- –ü—Ä–∏ retry –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ù–ï —Ä–∞—Å—Ç–µ—Ç

### –¢–µ—Å—Ç 2: –ë–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- –ó–∞–≥–æ–ª–æ–≤–æ–∫: "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
- –¢–∏–ø—ã –æ—à–∏–±–æ–∫: "—Å–µ—Ç—å (N)"
- –ö–Ω–æ–ø–∫–∞ –ê–ö–¢–ò–í–ù–ê (–º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å)
- –ü—Ä–∏ retry –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –ù–ï —Ä–∞—Å—Ç–µ—Ç

### –¢–µ—Å—Ç 3: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
- APIStatusBar –Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è
- –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:

1. **–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫**: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª—è–µ—Ç –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞–Ω–∫–∞, –≤–∫–ª—é—á–∞—è –Ω–µ–ø—Ä–æ–±–ª–µ–º–Ω—ã–µ
2. **–ö–Ω–æ–ø–∫–∞ retry**: –¢–µ–ø–µ—Ä—å –í–°–ï–ì–î–ê –∞–∫—Ç–∏–≤–Ω–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —Ä–µ—à–∞–µ—Ç –∫–æ–≥–¥–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
3. **–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ**: –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

## üìã –ß–µ–∫–ª–∏—Å—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:

- [ ] –û–±–Ω–æ–≤–ª–µ–Ω processChunkWithContext (2 –±–ª–æ–∫–∞ –æ—à–∏–±–æ–∫)
- [ ] –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω–∞ retryFailedChunks
- [ ] –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω APIStatusBar
- [ ] –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –ø—Ä–æ–∫—Å–∏
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
- [ ] –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

## üöÄ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:

–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 2 —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏:
- ProxyStatusIndicator
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä retry
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ proxy.ts
```

–ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏  –Ω–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≠—Ç–∞–ø–∞ 1 –æ–Ω–∞—Ä—É–∂–∏–ª —á—Ç–æ:
–í —Ç–µ—Å—Ç–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω—ã–º –ø—Ä–æ–∫—Å–∏ –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∏—á–µ–≥–æ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–∫–ª—é—á–µ–Ω –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä.
–≤ —Ç–µ—Å—Ç–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å error_id –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
—Ç–µ–±–µ –Ω–µ –∫–∞–∂–µ—Ç—Å—è —á—Ç–æ –º—ã —Ö–æ–¥–∏–º —É–∂–µ –ø–æ –∫—Ä—É–≥—É?

–º–Ω–µ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã —Ç—ã —É—á–∏—Ç—ã–≤–∞–ª –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–æ–∫ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–∑–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å
    https://apidog.com/blog/claude-api-rate-limits/
    https://www.cursor-ide.com/blog/claude-api-429-error-fix-en

    –∏ –º–Ω–µ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –æ—à–∏–±–∫–∏ –ø–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –≤–µ—Ä–Ω–æ –∏ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –ø—Ä–æ–±–ª–µ–º—ã.
    –ú–Ω–µ –≤–∞–∂–Ω–æ —á—Ç–æ–±—ã –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã —Å —Ç–æ–±–æ–π –æ—á–µ–Ω—å —á–µ—Ç–∫–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —á–∞–Ω–∫–∞–º–∏ –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ —ç–ø–∞–ø–∞ —è –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –∞ –∏–º–µ–Ω–Ω–æ:
    ```4.  –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å  batch processing. https://docs.anthropic.com/en/docs/build-with-claude/batch-processing
–ò–∑—É—á–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é batch processing  –∑–¥–µ—Å—å:
https://docs.anthropic.com/en/api/creating-message-batches
–ò–∑—É—á–∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑—É—á–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–¥–µ—Å—å:
 https://docs.anthropic.com/en/api/rate-limits#message-batches-api
–ö–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∞—Ç—å –≥–∞–ª–æ—á–∫—É –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∏—Ç –µ–µ —Ç–æ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è batch processing. (–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –∏ –≥–¥–µ –µ–µ –ª—É—á—à–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ —É–¥–æ–±–Ω–æ)
–ï—Å–ª–∏ –Ω–µ —Å—Ç–∞–≤–∏—Ç –≥–∞–ª–æ—á–∫—É —Ç–æ batch processing –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —á–∞–Ω–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω–æ –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º.
–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤ —Å–ª—É—á–∞–µ  batch processing –º—ã –º–æ–∂–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "id" –ø–∞–∫–µ—Ç–∞ –Ω–∞–ø—Ä–∏–º–µ—Ä "msgbatch_01HkcTjaV5uDC8jWR4ZsDV8d",
    –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å  —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –±—É–¥–µ—Ç –¥–æ–ª–≥–∏–º –¥–æ 24  —á–∞—Å–æ–≤
    —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø–æ—Ç–æ–º –∑–∞–Ω–æ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç   "id"  –æ—Ç batch processing –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
–ò–ª–∏ –Ω–∞–º –ø—Ä–æ—Å—Ç–æ –Ω—É–∂–Ω–æ –≥–¥–µ-—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ö–∞–∫ –ª—É—á—à–µ? –ï—Å–ª–∏ —Ç–∞–∫ —Ç–æ –º–æ–∂–µ—Ç –µ–º—É –Ω—É–∂–Ω–æ –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏?
–ö–∞–∫ –ª—É—á—à–µ?
—è —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–¥–µ—Å—å —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –µ–≥–æ https://docs.anthropic.com/en/api/retrieving-message-batches
–í–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 –î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –∫–∞–∫ —ç—Ç–æ–º –≤—Å–µ –º–æ–∂–Ω–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

–µ—â–µ —è –¥—É–º–∞—é —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
https://docs.anthropic.com/en/docs/build-with-claude/prompt-caching –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ —á—Ç–æ –≤ —Å–ª—É—á–∞–µ batch processing –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —á–∞—Å–æ–≤–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
–∞ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º  —Å–ª—É—á–∞–µ batch —Ç–æ –ø—è—Ç–∏–º–∏–Ω—É—Ç–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ.
–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–∫–ª—é—á–∞—Ç—å –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É –Ω–µ—Å –±–æ–ª—å—à–µ 4 —á–∞–Ω–∫–æ–≤ –∏–Ω–∞—á–µ –∫–∞–∫ —è –ø–æ–Ω–∏–º–∞—é –±—É–¥–µ—Ç –Ω–µ–≤—ã–≥–æ–¥–Ω–æ.
–Ø —Ç–∞–∫ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –≤ —Å–ª—É—á–∞–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ú–∏–Ω–∏–º—É–º 2048 —Ç–æ–∫–µ–Ω–æ–≤  –∏ –≤–∫–ª—é—á–∞—Ç—å –µ–≥–æ –Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ—Ç 10 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≤—ã–≥–æ–¥—ã.
–ò–∑—É—á–∏ —ç—Ç–æ—Ç —á–∞—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ CachingChat.txt
–î–∞–≤–∞–π –ø–æ–¥—É–º–∞–µ–º –æ–±–æ –≤—Å–µ–º —ç—Ç–æ–º –∏ –≤—ã–±–µ—Ä–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç–∞–∫ —á—Ç–æ–±—ã –Ω–µ —Å–∏–ª—å–Ω–æ —É—Å–ª–æ–∂–Ω—è—Ç—å –∫–æ–¥ –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —É–¥–µ—à–µ–≤–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤, –ª—É—á—à–µ –∏—Ö –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ–±—ã —á–∞–Ω–∫–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ç–∞–∫ —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –¥–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

–ó–¥–µ—Å—å —è —É–∂–µ –Ω–∞—á–∞–ª —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —ç—Ç—É —Ç–µ–º—É https://chatgpt.com/c/6877bfbc-6bc8-8005-bb26-5dfb3591412e
```
–ó–∞–¥–∞—á–∞ –Ω–µ –ø—Ä–æ—Å—Ç–∞—è –∏ –ø–æ—Ç–æ–º—É –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –æ—á–µ–Ω—å —á–µ—Ç–∫–æ!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –æ—Å–æ–±–µ–Ω–Ω–æ —É—á–∏—Ç—ã–≤–∞—è –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ —Å batch processing –∏ prompt caching. –û–Ω —Ö–æ—á–µ—Ç —á–µ—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–ø–æ–∫–æ–π–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
–Ø –≤–∏–∂—É, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

Batch processing –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤
Prompt caching –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è batch ID
–í—ã–±–æ—Ä –º–µ–∂–¥—É –æ–±—ã—á–Ω–æ–π –∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ–π –±–∞–∑—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫. –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.

 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —á–µ—Ç–∫—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–∞–∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (batch processing, prompt caching). –Ø —Å–æ–∑–¥–∞–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏ –∏ –µ–¥–∏–Ω—ã–º –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–∞—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è.
 –¢–µ–ø–µ—Ä—å –¥–∞–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è.
 ```
 ## üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ   User Action   ‚îÇ
‚îÇ (Process Text)  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
         ‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  callClaude()   ‚îÇ ‚Üê Retry logic with exponential backoff
‚îÇ  (claude.ts)    ‚îÇ ‚Üê Rate limit monitoring
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚Üê Structured error return: [ERROR:{...}]
         ‚îÇ
         ‚îú‚îÄ‚îÄ‚îÄ Success ‚îÄ‚îÄ‚Üí Claude Response
         ‚îÇ
         ‚îî‚îÄ‚îÄ‚îÄ Error ‚îÄ‚îÄ‚îÄ‚îê
                       ‚îÇ
                       ‚ñº
              ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
              ‚îÇ analyzeError()  ‚îÇ ‚Üê –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
              ‚îÇ(error-handler)  ‚îÇ ‚Üê –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                       ‚îÇ
    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚ñº                 ‚ñº                 ‚ñº                 ‚ñº
PROXY_UNAVAILABLE  NETWORK_ERROR  API_OVERLOADED  RATE_LIMITED
    ‚îÇ                 ‚îÇ                 ‚îÇ                 ‚îÇ
    ‚îÇ                 ‚îÇ                 ‚îÇ                 ‚îÇ
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ
                                ‚ñº
                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                    ‚îÇ processChunkWithContext ‚îÇ
                    ‚îÇ   –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É:    ‚îÇ
                    ‚îÇ   - front: —Å–æ–æ–±—â–µ–Ω–∏–µ   ‚îÇ
                    ‚îÇ   - back: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚îÇ
                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ
                                ‚ñº
                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                    ‚îÇ     APIStatusBar       ‚îÇ
                    ‚îÇ  - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏   ‚îÇ
                    ‚îÇ  - Retry —Ñ—É–Ω–∫—Ü–∏—è       ‚îÇ
                    ‚îÇ  - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏  ‚îÇ
                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìä –ü–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ:

1. **Fetch Error** (–ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω):
```
fetch() ‚Üí ECONNREFUSED ‚Üí analyzeError() ‚Üí {
  type: 'proxy_unavailable',
  message: '–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
  suggestion: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä...'
} ‚Üí [ERROR:{...}] ‚Üí –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
```

2. **Network Error** (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞):
```
fetch() ‚Üí ENOTFOUND ‚Üí analyzeError() ‚Üí {
  type: 'network_error',
  message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
  suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'
} ‚Üí [ERROR:{...}] ‚Üí –ö–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π
```

3. **API Overload** (529):
```
HTTP 529 ‚Üí analyzeError() ‚Üí {
  type: 'api_overloaded',
  message: 'Claude API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
  suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch processing',
  batchSuggested: true
} ‚Üí [ERROR:{...}] ‚Üí –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ batch mode
```

## üîÆ –ë—É–¥—É—â–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:

### Batch Processing Integration:
```
if (errorInfo.batchSuggested) {
  showBatchModePrompt();
  queueForBatchProcessing(chunks);
}
```

### Prompt Caching Strategy:
```
if (errorInfo.type === 'rate_limited' && chunks.length > 10) {
  enablePromptCaching(5); // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
}
```

### Session Storage:
```
localStorage.setItem('failedChunks', JSON.stringify({
  chunks: problemChunks,
  errorType: errorInfo.type,
  timestamp: Date.now(),
  batchId: null // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ batch processing
}));
```
 ```
 –•–æ—Ä–æ—à–æ, —è –¥–∞–ª –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –±—É–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–µ–ø–µ—Ä—å –¥–∞–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏.
 ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - –µ–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–º–µ—Å—Ç–æ —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
–¢–∏–ø–∏–∑–∞—Ü–∏—è - TypeScript –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ—à–∏–±–æ–∫
–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å batch processing
Best practices - —É—á—Ç–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–µ–π

üéØ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:
–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–µ—à–∏—Ç –ø—Ä–æ–±–ª–µ–º—É —Ü–∏–∫–ª–æ–≤:

–û–¥–Ω–∞ —Ç–æ—á–∫–∞ –∏—Å—Ç–∏–Ω—ã - analyzeError() –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï –æ—à–∏–±–∫–∏
–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - [ERROR:{json}] –≤–µ–∑–¥–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π
–ù–µ—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏—è - —á–µ—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏

–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—É–¥—É—â–µ–º—É:

‚úÖ –ü–æ–ª–µ batchSuggested –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ batch mode
‚úÖ –ü–æ–ª–µ retryAfter –¥–ª—è —É–º–Ω–æ–≥–æ retry
‚úÖ –¢–∏–ø—ã –æ—à–∏–±–æ–∫ —Ä–∞—Å—à–∏—Ä—è–µ–º—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤

AUDITOR AGENT (Final audit):

‚úÖ –†–µ—à–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–µ
‚úÖ –£—á—Ç–µ–Ω—ã –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –±–∞–∑–∞ –¥–ª—è batch processing
‚úÖ –°–ª–µ–¥—É–µ—Ç best practices –∏–∑ —Å—Ç–∞—Ç–µ–π

COORDINATOR AGENT (Coordination):
üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:

–í–Ω–µ–¥—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É (1-2 —á–∞—Å–∞)

–≠—Ç–æ —Ä–µ—à–∏—Ç —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
–°–æ–∑–¥–∞—Å—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–µ–≥–æ


–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å:

Batch processing UI
Prompt caching –ª–æ–≥–∏–∫—É
–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π


–í–∞–∂–Ω–æ: –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–ø–æ–∫–æ–π–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ batch processing, –∑–Ω–∞—è —á—Ç–æ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

CONTROLLER AGENT (Loop check):
–ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Ü–∏–∫–ª —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π.
WORK MODE: SMART MODE
RISK ASSESSMENT: LOW
CONFIDENCE: 95%
LOOP STATUS: Breaking with new architecture
NEXT STEPS:

–í–Ω–µ–¥—Ä–∏—Ç—å error-handler.ts
–û–±–Ω–æ–≤–∏—Ç—å 3 —Ñ–∞–π–ª–∞ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è
–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ batch processing

–ò—Ç–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Ç–∫–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ç—É –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ç–∞–∫ —á—Ç–æ–±—ã –¥—Ä—É–≥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —ç—Ç—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ–µ –∑–∞–Ω–æ–≥–æ

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ—Ç–∫–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –¥—Ä—É–≥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–≥ –ø–æ–Ω—è—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ.
–î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç:

–ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:


–í–Ω–µ–¥—Ä–∏—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Claude API (429, 529)
–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ best practices (exponential backoff, retry-after header, graceful degradation, user-friendly messages)
–ò–∑—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–¥–æ–≤—É—é –±–∞–∑—É
–í –ø—Ä–æ—à–ª–æ–º —á–∞—Ç–µ —É–∂–µ –Ω–∞—á–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤ –∏ –æ—à–∏–±–æ–∫


–ß—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ (—Å–æ–≥–ª–∞—Å–Ω–æ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é):


–í callClaude —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω exponential backoff
–í processChunkWithContext –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–Ω—è—Ç–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç APIStatusBar
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ App.tsx


–ü—Ä–æ–±–ª–µ–º—ã, –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:


–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–∏ retry (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç)
–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ (–ø—Ä–æ–∫—Å–∏ = "–¥—Ä—É–≥–∏–µ")
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ ID –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö –≤–º–µ—Å—Ç–æ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ retry –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö


–ö–æ–Ω–µ—á–Ω–∞—è —Ü–µ–ª—å (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π):


–°–æ–∑–¥–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∫–∞–∫ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è batch processing –∏ prompt caching
–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫ API

–ö–ª—é—á–µ–≤–æ–π —Ñ–æ–∫—É—Å - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: –ø—Ä–æ–∫—Å–∏-–æ—à–∏–±–æ–∫, —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º, –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ API –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥ –∫ retry, —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ –∑–∞–ª–æ–∂–∏—Ç—å –æ—Å–Ω–æ–≤—É –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞.

**INTERNAL CONTROLLER** (Pre-check):
- Code base studied: YES
- Loop signs: NO (—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏)
- Response compliance: YES

**PLANNER AGENT** (Planning):
–§–æ—Ä–º—É–ª–∏—Ä—É—é –ø–æ–ª–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞.

**EXECUTOR AGENT** (Implementation):

# üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–∞ Retry –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è Latvian Learning App

## üéØ –û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –≤–Ω–µ–¥—Ä–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ retry-–º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑—É—á–µ–Ω–∏—è –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Claude API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —á–∞–Ω–∫–∞–º.

## üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç

### –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
- **Frontend**: React + TypeScript (`client/`)
- **Backend**: Node.js proxy —Å–µ—Ä–≤–µ—Ä (`server/proxy.ts`)
- **API**: Claude API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–∞ `localhost:3001`
- **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: Chunk-by-chunk –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º flashcards

### –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è (—á–∞—Å—Ç–∏—á–Ω–∞—è):
1. –ë–∞–∑–æ–≤—ã–π exponential backoff –≤ `claude.ts` (3 –ø–æ–ø—ã—Ç–∫–∏)
2. –ü—Ä–æ—Å—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—à–∏–±–æ–∫ –≤ `useProcessing.ts`
3. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç `APIStatusBar` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
4. –§—É–Ω–∫—Ü–∏—è retry (—Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏)

## üêõ –ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è —Ä–µ—à–µ–Ω–∏—è

### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ:
1. **–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫** - –ø—Ä–∏ retry –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–∞—Å—Ç–µ—Ç (16‚Üí34‚Üí...)
2. **–ù–µ–≤–µ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫** - –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ "–¥—Ä—É–≥–∏–µ"
3. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏** - –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ `network_error_1753044699354`
4. **–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤** - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ "..."

### –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:
1. **–†–∞–∑–ª–∏—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫**:
   - –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ECONNREFUSED)
   - –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (ENOTFOUND, ECONNRESET)
   - API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (HTTP 529)
   - –ü—Ä–µ–≤—ã—à–µ–Ω rate limit (HTTP 429)

2. **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç**:
   - –ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–∏
   - –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏ retry

## üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—à–µ–Ω–∏—é

### –≠—Ç–∞–ø 1: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

1. **–°–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫**:
```typescript
enum ErrorType {
  PROXY_UNAVAILABLE = 'proxy_unavailable',
  NETWORK_ERROR = 'network_error',
  API_OVERLOADED = 'api_overloaded',
  RATE_LIMITED = 'rate_limited',
  UNKNOWN = 'unknown'
}
```

2. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ `claude.ts`**:
   - –£–≤–µ–ª–∏—á–∏—Ç—å retry –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫
   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏:
     - 529: –Ω–∞—á–∏–Ω–∞—Ç—å —Å 10 —Å–µ–∫, –º–Ω–æ–∂–∏—Ç–µ–ª—å 1.5
     - 429: –Ω–∞—á–∏–Ω–∞—Ç—å —Å 5 —Å–µ–∫, –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
     - –û—Å—Ç–∞–ª—å–Ω—ã–µ: —Å 1 —Å–µ–∫, –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
   - –£—á–∏—Ç—ã–≤–∞—Ç—å Retry-After header
   - –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

3. **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ `useProcessing.ts`**:
   - –§—É–Ω–∫—Ü–∏—è `retryFailedChunks` –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Map –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
   - –£–¥–∞–ª—è—Ç—å –í–°–ï –∫–∞—Ä—Ç–æ—á–∫–∏ —á–∞–Ω–∫–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö

4. **UI –≤ `APIStatusBar`**:
   - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
   - –ü—Ä–µ–≤—å—é —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
   - –ö–Ω–æ–ø–∫–∞ retry –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
   - –ü–æ–Ω—è—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞

5. **–ö–∞—Ä—Ç–æ—á–∫–∏ –æ—à–∏–±–æ–∫**:
   - –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
   - –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ("–ó–∞–ø—É—Å—Ç–∏—Ç–µ server –∫–æ–º–∞–Ω–¥–æ–π npm run start")

### –≠—Ç–∞–ø 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

1. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∫—Å–∏**:
   - Endpoint `/api/stats` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   - –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫—Å–∏
   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ (—É—Å–ø–µ—à–Ω—ã–µ, –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º)

2. **–ü—Ä–æ–≥—Ä–µ—Å—Å retry**:
   - –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
   - –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ —á–∞–Ω–∫–∞
   - –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

3. **–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ**:
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö
   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ HTTP –∫–æ–¥—ã –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏

## üõ†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

### –§–∞–π–ª—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:

1. **client/src/claude.ts**:
   - –û–±–Ω–æ–≤–∏—Ç—å retry –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π backoff
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏

2. **client/src/hooks/useProcessing.ts**:
   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å `retryFailedChunks`
   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ `processChunkWithContext`

3. **client/src/App.tsx**:
   - –û–±–Ω–æ–≤–∏—Ç—å `APIStatusBar`
   - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å retry

4. **server/proxy.ts**:
   - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   - Endpoint `/api/stats`
   - –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

### Best Practices (–∏–∑ —Å—Ç–∞—Ç–µ–π):
- Exponential backoff —Å jitter
- Respect Retry-After headers
- Graceful degradation
- User-friendly —Å–æ–æ–±—â–µ–Ω–∏—è
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ batch processing

## ‚úÖ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–∏–µ–º–∫–∏

1. **–ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ retry
2. **–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è** - –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤–µ—Ä–Ω–æ
3. **–ü–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è** - –Ω–∏–∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö ID –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
4. **–ü—Ä–µ–≤—å—é —á–∞–Ω–∫–æ–≤** - –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
5. **–í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å** - –ø—Ä–æ–≥—Ä–µ—Å—Å retry, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∫—Å–∏

## üîÆ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±—É–¥—É—â–µ–º—É

–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é:
1. **Batch processing** - –ø–æ–ª—è –¥–ª—è batch —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
2. **Prompt caching** - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
3. **–ò—Å—Ç–æ—Ä–∏—è —Å–µ—Å—Å–∏–π** - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤

## üìé –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è

1. **–¢–µ–∫—É—â–∞—è –∫–æ–¥–æ–≤–∞—è –±–∞–∑–∞**: Project.txt
2. **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**: test8_6.txt, test8_7.txt
3. **–°—Ç–∞—Ç—å–∏ best practices**:
   - https://apidog.com/blog/claude-api-rate-limits/
   - https://www.cursor-ide.com/blog/claude-api-429-error-fix-en

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è

1. **–¶–∏–∫–ª –ø—Ä–æ–±–ª–µ–º** - –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏–≤–µ–ª–∏ –∫ —Ö–æ–∂–¥–µ–Ω–∏—é –ø–æ –∫—Ä—É–≥—É –∏–∑-–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ—à–∏–±–æ–∫
2. **–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–∞** - –Ω—É–∂–Ω–æ —Ç–æ—á–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –æ—à–∏–±–∫–∞—Ö
3. **–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å** - –Ω–µ –ª–æ–º–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

---

**–ò—Ç–æ–≥**: –°–æ–∑–¥–∞—Ç—å –Ω–∞–¥–µ–∂–Ω—É—é, —Ä–∞—Å—à–∏—Ä—è–µ–º—É—é —Å–∏—Å—Ç–µ–º—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –ø—Ä–æ–±–ª–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–ª—É–∂–∏—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–º –¥–ª—è –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π (batch processing, caching).


–°—Ä–∞–≤–Ω–∏ —Å —Ç–∞–∫–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:
```
2. –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø): –ú–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–≤—Ç–æ—Ä–æ–≤
**–ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù:**
* **–ü—Ä–æ–±–ª–µ–º–∞:** –ª–æ–≥–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –º–µ–∂–¥—É `claude.ts`—Ö—É–∫–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—é.
* **–°–ª–µ–¥—Å—Ç–≤–∏–µ:** —Å–ª–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
**–ü–õ–ê–ù –†–ï–®–ï–ù–ò–Ø:**
1. **–ö–ª–∞—Å—Å ApiClient** ( `client/src/services/apiClient.ts`):
   * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç `callClaude`+ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ—Ç—Å—Ä–æ—á–∫–∞ ( `RETRY_CONFIG`).
   * –í—ã—Å—Ç–∞–≤–ª—è–µ—Ç `request(prompt): Promise<string>`–∏ –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è ( `onRateLimit`, `onError`, `onSuccess`).
2. **—Ö—É–∫ useRetryQueue** ( `client/src/hooks/useRetryQueue.ts`):
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ (—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏).
   * `enqueue(chunk, error)`, `processQueue(onProgress)`, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–µ—Ä–µ–∑ `localStorage`/IndexedDB.
3. **–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ** —Ö—É–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π `useProcessing`:
   * –ü—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ—è—Ö –∑–≤–æ–Ω–∏—Ç–µ `enqueue`–≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è `processQueue`–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
4. **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π APIStatusBar** :
   * –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ `useRetryQueue`—Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
   * –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å ¬´–ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä¬ª, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–ø—É—Å–∫—É.
5. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** :
   * –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è `ApiClient`—Å—Ç—Ä–∞—Ç–µ–≥–∏–π, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–≤.
   * –¢–µ—Å—Ç—ã E2E, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ 429/529.
**–ü–æ—á–µ–º—É —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
* **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å** ‚Üí –µ–¥–∏–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
* **–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å** ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–¥–µ—Ä–∂–∏–≤–∞—é—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
* **–†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å** ‚Üí –±—É–¥—É—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∂–∏–≤—É—Ç`ApiClient`
* **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç** ‚Üí —á–µ—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –æ—á–µ—Ä–µ–¥—å—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
```


# üîÑ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π

## üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞

| –ö—Ä–∏—Ç–µ—Ä–∏–π | –ú–æ–π –ø–æ–¥—Ö–æ–¥ (–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π) | –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π (–ú–æ–¥—É–ª—å–Ω—ã–π) |
|----------|-------------------------------|----------------------------|
| **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** | –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π error-handler + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π | –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã ApiClient + useRetryQueue |
| **–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–Ω–µ–¥—Ä–µ–Ω–∏—è** | üü¢ –°—Ä–µ–¥–Ω—è—è (3-4 —á–∞—Å–∞) | üü° –í—ã—Å–æ–∫–∞—è (6-8 —á–∞—Å–æ–≤) |
| **–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ** | –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ, —Ä–∞–±–æ—Ç–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π | –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ |
| **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å** | ‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–∞—è | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–∞—è |
| **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** | ‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–∞—è | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–∞—è |
| **–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å** | ‚ùå –ù–µ—Ç | ‚úÖ localStorage/IndexedDB |
| **–°–æ–±—ã—Ç–∏—è/–†–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** | ‚ùå –ù–µ—Ç | ‚úÖ Event-driven |
| **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** | ‚≠ê‚≠ê‚≠ê –•–æ—Ä–æ—à–∞—è | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –û—Ç–ª–∏—á–Ω–∞—è |
| **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ batch** | ‚≠ê‚≠ê‚≠ê‚≠ê –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ò–¥–µ–∞–ª—å–Ω–∞—è |

## üéØ –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ

### –ú–æ–π –ø–æ–¥—Ö–æ–¥: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- ‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è)
- ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- ‚úÖ –†–µ—à–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
- ‚úÖ –ü–æ–Ω—è—Ç–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–¥–æ–≤–æ–π –±–∞–∑—ã
- ‚úÖ –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ enum

**–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
- ‚ùå –ù–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ (—Ç–µ—Ä—è–µ–º retry –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ)
- ‚ùå –ú–µ–Ω–µ–µ –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- ‚ùå –õ–æ–≥–∏–∫–∞ –≤—Å–µ –µ—â–µ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
- ‚ùå –°–ª–æ–∂–Ω–µ–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ retry

**–ö–æ–¥:**
```typescript
// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
error-handler.ts ‚Üí analyzeError() ‚Üí ErrorInfo
claude.ts ‚Üí [ERROR:{json}]
processChunkWithContext ‚Üí –µ–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
```

### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ú–æ–¥—É–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä

**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å (SRP - Single Responsibility)
- ‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ localStorage
- ‚úÖ Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- ‚úÖ –õ–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
- ‚úÖ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è batch processing
- ‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

**–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:**
- ‚ùå –¢—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
- ‚ùå –î–æ–ª—å—à–µ –≤–Ω–µ–¥—Ä—è—Ç—å
- ‚ùå –°–ª–æ–∂–Ω–µ–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–æ–≤—ã–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
- ‚ùå –ú–æ–∂–µ—Ç –±—ã—Ç—å over-engineering –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –Ω—É–∂–¥

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**
```typescript
ApiClient (—Å–æ–±—ã—Ç–∏—è) ‚Üí useRetryQueue (–æ—á–µ—Ä–µ–¥—å) ‚Üí localStorage
     ‚Üì                      ‚Üì
onRateLimit            processQueue
onError                enqueue
onSuccess              getStatus
```

## ü§î –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è

### –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –°–ï–ô–ß–ê–°:
**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–π –ø–æ–¥—Ö–æ–¥** - –æ–Ω —Ä–µ—à–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∑–∞ 3-4 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã.

### –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã:
**–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥—É–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥** - —ç—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –±—É–¥—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

### –ì–∏–±—Ä–∏–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π):**CRITIC AGENT** (Critical analysis):
```
# üèóÔ∏è –ì–∏–±—Ä–∏–¥–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ retry-—Å–∏—Å—Ç–µ–º—ã

## –§–∞–∑–∞ 1: –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º (1-2 –¥–Ω—è)

### –®–∞–≥ 1: –ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–∑ –º–æ–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
1. **error-handler.ts** - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
2. **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏** –≤ claude.ts
3. **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è** –≤ retryFailedChunks
4. **–£–ª—É—á—à–µ–Ω–Ω—ã–π UI** –≤ APIStatusBar

**–†–µ–∑—É–ª—å—Ç–∞—Ç**: –í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã, –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.

## –§–∞–∑–∞ 2: –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ (1 –Ω–µ–¥–µ–ª—è)

### –®–∞–≥ 2.1: –°–æ–∑–¥–∞–Ω–∏–µ ApiClient
```typescript
// client/src/services/ApiClient.ts
import { EventEmitter } from 'events';
import { callClaude } from '../claude';
import { analyzeError, ErrorInfo } from '../utils/error-handler';

export class ApiClient extends EventEmitter {
  private retryConfig = {
    maxRetries: 5,
    delays: { /* –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ */ }
  };

  async request(prompt: string): Promise<string> {
    try {
      const result = await callClaude(prompt);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (result.startsWith('[ERROR:')) {
        const errorInfo = JSON.parse(result.slice(7, -1));
        this.emit('error', errorInfo);
        throw errorInfo;
      }

      this.emit('success', result);
      return result;
    } catch (error) {
      const errorInfo = analyzeError(error);

      if (errorInfo.type === 'rate_limited') {
        this.emit('rateLimit', errorInfo);
      }

      throw errorInfo;
    }
  }
}
```

### –®–∞–≥ 2.2: –°–æ–∑–¥–∞–Ω–∏–µ useRetryQueue
```typescript
// client/src/hooks/useRetryQueue.ts
import { useState, useCallback, useEffect } from 'react';

interface QueueItem {
  id: string;
  chunk: string;
  errorInfo: ErrorInfo;
  attempts: number;
  timestamp: number;
}

export function useRetryQueue() {
  const [queue, setQueue] = useState<QueueItem[]>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ localStorage
    const saved = localStorage.getItem('retryQueue');
    return saved ? JSON.parse(saved) : [];
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('retryQueue', JSON.stringify(queue));
  }, [queue]);

  const enqueue = useCallback((chunk: string, errorInfo: ErrorInfo) => {
    const item: QueueItem = {
      id: `${Date.now()}_${Math.random()}`,
      chunk,
      errorInfo,
      attempts: 0,
      timestamp: Date.now()
    };

    setQueue(prev => [...prev, item]);
  }, []);

  const processQueue = useCallback(async (
    onProgress?: (current: number, total: number) => void
  ) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É retryFailedChunks
    // –Ω–æ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é
  }, []);

  return { queue, enqueue, processQueue, clearQueue };
}
```

### –®–∞–≥ 2.3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
```typescript
// –í useProcessing.ts
const { enqueue, processQueue } = useRetryQueue();

// –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è error –∫–∞—Ä—Ç–æ—á–µ–∫:
if (errorInfo.retryable) {
  enqueue(chunk, errorInfo);
}

// APIStatusBar –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å
const { queue } = useRetryQueue();
```

## –§–∞–∑–∞ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ batch processing (2 –Ω–µ–¥–µ–ª–∏)

### –î–æ–±–∞–≤–ª—è–µ–º –≤ ApiClient:
- –ü–æ–¥–¥–µ—Ä–∂–∫—É batch –∑–∞–ø—Ä–æ—Å–æ–≤
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ batch ID
- Polling —Å—Ç–∞—Ç—É—Å–∞

### –†–∞—Å—à–∏—Ä—è–µ–º useRetryQueue:
- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É —á–∞–Ω–∫–æ–≤ –¥–ª—è batch
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ batch ID –≤ localStorage
- UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è batches

## üìä –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:

1. **–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç** - —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å—Ä–∞–∑—É
2. **–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è** - –Ω–µ –ª–æ–º–∞–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥
3. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ** - –º–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏
4. **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—É–¥—É—â–µ–º—É** - –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è batch/caching

## üéØ –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞:

```
–ù–µ–¥–µ–ª—è 1: –§–∞–∑–∞ 1 (–ë—ã—Å—Ç—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
‚îú‚îÄ‚îÄ –î–µ–Ω—å 1: error-handler + claude.ts
‚îú‚îÄ‚îÄ –î–µ–Ω—å 2: retryFailedChunks + APIStatusBar
‚îî‚îÄ‚îÄ –î–µ–Ω—å 3-5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–ù–µ–¥–µ–ª—è 2: –§–∞–∑–∞ 2 (–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å)
‚îú‚îÄ‚îÄ –î–µ–Ω—å 1-2: ApiClient
‚îú‚îÄ‚îÄ –î–µ–Ω—å 3-4: useRetryQueue
‚îî‚îÄ‚îÄ –î–µ–Ω—å 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

–ù–µ–¥–µ–ª—è 3-4: –§–∞–∑–∞ 3 (Batch processing)
‚îú‚îÄ‚îÄ Batch API –≤ ApiClient
‚îú‚îÄ‚îÄ UI –¥–ª—è batch —Ä–µ–∂–∏–º–∞
‚îî‚îÄ‚îÄ Prompt caching
```

## ‚úÖ –ò—Ç–æ–≥:

–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
1. –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
2. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
3. –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ batch processing
4. –ù–µ —Å–ª–æ–º–∞—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π –∫–æ–¥
```
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –º–æ–¥—É–ª—å–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ–≤—Ç–æ—Ä–æ–≤. –Ø –ø—Ä–æ–≤–µ–ª —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≥–∏–±—Ä–∏–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.
## üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:

### –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –ª—É—á—à–µ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã:


- ‚úÖ **–ß–∏—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω–æ
- ‚úÖ **–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å** - –Ω–µ —Ç–µ—Ä—è–µ–º retry –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
- ‚úÖ **–°–æ–±—ã—Ç–∏—è** - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
- ‚úÖ **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ batch** - –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç

### –ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å—ã:
- ‚ö†Ô∏è **–í—Ä–µ–º—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è** - –º–∏–Ω–∏–º—É–º –Ω–µ–¥–µ–ª—è —Ä–∞–±–æ—Ç—ã
- ‚ö†Ô∏è **–†–∏—Å–∫ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏** - –º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- ‚ö†Ô∏è **–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã** - –Ω—É–∂–Ω–æ —Ä–µ—à–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å

**AUDITOR AGENT** (Final audit):
–û–±–∞ –ø–æ–¥—Ö–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.

**COORDINATOR AGENT** (Coordination):

## üèÜ –ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:

### –î–ª—è –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é **–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥**:

1. **–°–µ–π—á–∞—Å** - –≤–Ω–µ–¥—Ä–∏—Ç–µ –º–æ–µ —Ä–µ—à–µ–Ω–∏–µ (1-2 –¥–Ω—è)
   - –ò—Å–ø—Ä–∞–≤–∏—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
   - –ü–æ–Ω—è—Ç–Ω—ã–π UI

2. **–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é** - –Ω–∞—á–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
   - ApiClient –¥–ª—è batch processing
   - useRetryQueue —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
   - –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

### –ü–æ—á–µ–º—É —ç—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ:
- ‚úÖ –ë—ã—Å—Ç—Ä–æ —Ä–µ—à–∞–µ—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
- ‚úÖ –°–æ–∑–¥–∞–µ—Ç–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è batch processing
- ‚úÖ –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç–µ —Ä–∏—Å–∫–∏
- ‚úÖ –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞–µ—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

**CONTROLLER AGENT** (Loop check):
–ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–∫–ª—é—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ—Ç–∫–æ–º—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.

**WORK MODE**: SMART MODE
**RISK ASSESSMENT**: LOW (–ø—Ä–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ–º –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏)
**CONFIDENCE**: 95%
**LOOP STATUS**: None
**NEXT STEPS**:
1. –†–µ—à–∏—Ç—å: –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ —Å—Ä–∞–∑—É –º–æ–¥—É–ª—å–Ω–æ–µ?
2. –ï—Å–ª–∏ –±—ã—Å—Ç—Ä–æ–µ - –Ω–∞—á–∞—Ç—å —Å error-handler.ts
3. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É

–ü—Ä–µ–¥–ª–∞–≥–∞—é –≤—ã–±—Ä–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–∞–∫ –æ—Å–Ω–æ–≤—É, –Ω–æ —Å –∂—ë—Å—Ç–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å —Å –§–∞–∑—ã 2.
–¢–æ –µ—Å—Ç—å ‚Äî –Ω–∞—á–∞—Ç—å —Å –§–∞–∑—ã 2, –ø—Ä–æ–ø—É—Å—Ç–∏–≤ "–±—ã—Å—Ç—Ä—ã–µ —Ñ–∏–∫—Å—ã" –§–∞–∑—ã 1 (–∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ ‚Äî error‚Äëhandler). –≠—Ç–æ –¥–∞—Å—Ç:
–ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –æ—à–∏–±–∫–∞–º–∏

üì¶–ß–∏—Å—Ç—É—é –æ—Å–Ω–æ–≤—É –ø–æ–¥ batch-–ø–æ–¥–¥–µ—Ä–∂–∫—É (–§–∞–∑–∞ 3)

üîÅ –ë–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Ç–æ–º –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –ø–∞—Ç—á–∏

–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è (–Ω–∞ –±–∞–∑–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π):

‚úÖ –§–∞–∑–∞ 1 (1‚Äì2 –¥–Ω—è): –ß–∞—Å—Ç–∏—á–Ω–∞—è
–¢–æ–ª—å–∫–æ error-handler.ts: —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –æ—à–∏–±–æ–∫

–û—Å—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –æ–Ω–æ –¥—É–±–ª–∏—Ä—É–µ—Ç —Ç–æ, —á—Ç–æ —É–∂–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ

‚úÖ –§–∞–∑–∞ 2 (–Ω–∞—á–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ):
ApiClient —Å —Å–æ–±—ã—Ç–∏—è–º–∏ (onRateLimit, onError, onSuccess)

useRetryQueue ‚Äî —Å localStorage –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ useProcessing.ts –∏ APIStatusBar

üîú –§–∞–∑–∞ 3:
Batch-–ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ, polling, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞, batchId)

EXECUTOR AGENT (–î–µ–π—Å—Ç–≤–∏—è):
–ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å:

error-handler.ts ‚Äì –º–æ–¥—É–ª—å –æ—à–∏–±–æ–∫

ApiClient.ts ‚Äì –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude

useRetryQueue.ts ‚Äì —Å localStorage

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ useProcessing.ts –∏ APIStatusBar



COORDINATOR AGENT (–ó–∞–∫–ª—é—á–µ–Ω–∏–µ):
üîß –í—ã–±–∏—Ä–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é, –Ω–∞—á–∏–Ω–∞—è —Å—Ä–∞–∑—É —Å –§–ê–ó–´ 2
üìç –§–∞–∑—É 1 ‚Äì —á–∞—Å—Ç–∏—á–Ω–æ, —Ç–æ–ª—å–∫–æ error-handler.ts
üß± –≠—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ø–æ–¥ batch, –∏ –µ–≥–æ –º–æ–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏–Ω–µ–π–Ω–æ

üöÄ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–§–∞–∑–∞ 2 —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –§–∞–∑—ã 1)

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é - –≤–∑—è—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –Ω–æ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–§–∞–∑–∞ 2), –≤–∑—è–≤ –∏–∑ –§–∞–∑—ã 1 —Ç–æ–ª—å–∫–æ error-handler.ts. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—É–º–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–≤–æ–ª–∏—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–¥–∞ –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å:

error-handler.ts - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
ApiClient.ts - –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å —Å–æ–±—ã—Ç–∏—è–º–∏
useRetryQueue.ts - —Ö—É–∫ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ localStorage
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥

–≠—Ç–æ –¥–∞—Å—Ç —á–∏—Å—Ç—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å—Ä–∞–∑—É, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—á–µ–π.

–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–§–∞–∑–∞ 2 —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –§–∞–∑—ã 1)

–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–º ApiClient - –º–æ–¥—É–ª—å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –Ω–∞–¥ callClaude —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π.
–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–º useRetryQueue - —Ö—É–∫ —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é —á–µ—Ä–µ–∑ localStorage.
–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —ç—Ç–∏—Ö –º–æ–¥—É–ª–µ–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.
–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π.
```
// client/src/utils/error-handler.ts

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è Claude API
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ best practices –∏–∑:
 * - https://apidog.com/blog/claude-api-rate-limits/
 * - https://www.cursor-ide.com/blog/claude-api-429-error-fix-en
 */

export enum ErrorType {
  PROXY_UNAVAILABLE = 'proxy_unavailable',
  NETWORK_ERROR = 'network_error',
  API_OVERLOADED = 'api_overloaded',
  RATE_LIMITED = 'rate_limited',
  UNKNOWN = 'unknown'
}

export interface ErrorInfo {
  type: ErrorType;
  message: string;
  suggestion: string;
  retryable: boolean;
  retryAfter?: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  batchSuggested?: boolean; // –¥–ª—è –±—É–¥—É—â–µ–≥–æ batch processing
  originalError?: string;
  statusCode?: number;
  timestamp: number;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
export function analyzeError(error: any): ErrorInfo {
  const timestamp = Date.now();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
  const errorStr = typeof error === 'string'
    ? error
    : error?.message || error?.error || JSON.stringify(error);

  const errorLower = errorStr.toLowerCase();

  console.log('üîç [ErrorHandler] Analyzing error:', {
    type: typeof error,
    message: errorStr.substring(0, 200),
    timestamp: new Date(timestamp).toISOString()
  });

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–∫—Å–∏ (ECONNREFUSED)
  if (errorLower.includes('econnrefused') ||
      errorLower.includes('connect econnrefused') ||
      errorLower.includes('localhost:3001')) {
    return {
      type: ErrorType.PROXY_UNAVAILABLE,
      message: '–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      suggestion: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π "npm run start" –≤ –ø–∞–ø–∫–µ server',
      retryable: true,
      originalError: errorStr,
      timestamp
    };
  }

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  if (errorLower.includes('enotfound') ||
      errorLower.includes('getaddrinfo enotfound') ||
      errorLower.includes('enetunreach') ||
      errorLower.includes('etimedout') ||
      errorLower.includes('econnreset')) {
    return {
      type: ErrorType.NETWORK_ERROR,
      message: '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
      suggestion: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
      retryable: true,
      originalError: errorStr,
      timestamp
    };
  }

  // 3. API Overloaded (529)
  if (errorStr.includes('529') || errorLower.includes('overload')) {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å retry-after
    const retryMatch = errorStr.match(/retry[- ]?after[:\s]+(\d+)/i);
    const retryAfter = retryMatch ? parseInt(retryMatch[1]) : 600; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    return {
      type: ErrorType.API_OVERLOADED,
      message: 'Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω',
      suggestion: 'API –æ–±—ã—á–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10-30 –º–∏–Ω—É—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å batch processing –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤.',
      retryable: true,
      retryAfter,
      batchSuggested: true,
      statusCode: 529,
      originalError: errorStr,
      timestamp
    };
  }

  // 4. Rate Limited (429)
  if (errorStr.includes('429') || errorLower.includes('rate limit')) {
    const retryMatch = errorStr.match(/retry[- ]?after[:\s]+(\d+)/i);
    const retryAfter = retryMatch ? parseInt(retryMatch[1]) : 60;

    return {
      type: ErrorType.RATE_LIMITED,
      message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API',
      suggestion: `–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${retryAfter} —Å–µ–∫—É–Ω–¥. –î–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch processing.`,
      retryable: true,
      retryAfter,
      batchSuggested: true,
      statusCode: 429,
      originalError: errorStr,
      timestamp
    };
  }

  // 5. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç –ø—Ä–æ–∫—Å–∏
  if (error?.statusCode || error?.errorType) {
    return {
      type: error.errorType || ErrorType.UNKNOWN,
      message: error.message || '–û—à–∏–±–∫–∞ API',
      suggestion: error.suggestion || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
      retryable: error.retryable !== false,
      retryAfter: error.retryAfter,
      statusCode: error.statusCode,
      originalError: errorStr,
      timestamp
    };
  }

  // 6. –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
  return {
    type: ErrorType.UNKNOWN,
    message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    suggestion: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
    retryable: true,
    originalError: errorStr,
    timestamp
  };
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function getRetryDelay(errorInfo: ErrorInfo, attemptNumber: number): number {
  // –ï—Å–ª–∏ –µ—Å—Ç—å retry-after, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (errorInfo.retryAfter) {
    return errorInfo.retryAfter * 1000;
  }

  // –ë–∞–∑–æ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const baseDelays: Record<ErrorType, number> = {
    [ErrorType.API_OVERLOADED]: 10000, // 10 —Å–µ–∫—É–Ω–¥
    [ErrorType.RATE_LIMITED]: 5000,    // 5 —Å–µ–∫—É–Ω–¥
    [ErrorType.NETWORK_ERROR]: 2000,   // 2 —Å–µ–∫—É–Ω–¥—ã
    [ErrorType.PROXY_UNAVAILABLE]: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
    [ErrorType.UNKNOWN]: 1000          // 1 —Å–µ–∫—É–Ω–¥–∞
  };

  const baseDelay = baseDelays[errorInfo.type];
  const multiplier = errorInfo.type === ErrorType.API_OVERLOADED ? 1.5 : 2;

  // Exponential backoff —Å jitter
  const exponentialDelay = Math.min(
    baseDelay * Math.pow(multiplier, attemptNumber - 1),
    60000 // –º–∞–∫—Å–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
  );

  // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è thundering herd
  const jitter = exponentialDelay * 0.1 * Math.random();

  return Math.round(exponentialDelay + jitter);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function formatErrorForUser(errorInfo: ErrorInfo): {
  title: string;
  description: string;
  actions: string[];
} {
  const actions: string[] = [];

  switch (errorInfo.type) {
    case ErrorType.PROXY_UNAVAILABLE:
      actions.push('–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä');
      actions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç 3001');
      break;

    case ErrorType.NETWORK_ERROR:
      actions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      actions.push('–û—Ç–∫–ª—é—á–∏—Ç–µ VPN –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ');
      break;

    case ErrorType.API_OVERLOADED:
    case ErrorType.RATE_LIMITED:
      if (errorInfo.retryAfter) {
        actions.push(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ ${errorInfo.retryAfter} —Å–µ–∫—É–Ω–¥`);
      }
      if (errorInfo.batchSuggested) {
        actions.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ batch processing');
      }
      break;
  }

  actions.push('–ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏');

  return {
    title: errorInfo.message,
    description: errorInfo.suggestion,
    actions
  };
}

/**
 * –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç ErrorInfo –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
 */
export function serializeError(errorInfo: ErrorInfo): string {
  return JSON.stringify(errorInfo);
}

/**
 * –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç ErrorInfo
 */
export function deserializeError(serialized: string): ErrorInfo | null {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç [ERROR:{...}]
    if (serialized.startsWith('[ERROR:') && serialized.endsWith(']')) {
      serialized = serialized.slice(7, -1);
    }

    return JSON.parse(serialized);
  } catch {
    return null;
  }
}
```
```
// client/src/services/ApiClient.ts

import { EventEmitter } from 'events';
import {
  analyzeError,
  ErrorInfo,
  ErrorType,
  getRetryDelay,
  serializeError
} from '../utils/error-handler';

/**
 * –°–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å ApiClient
 */
export interface ApiClientEvents {
  'request:start': (prompt: string) => void;
  'request:success': (response: string, duration: number) => void;
  'request:error': (error: ErrorInfo) => void;
  'request:retry': (attempt: number, delay: number, error: ErrorInfo) => void;
  'rate-limit': (error: ErrorInfo) => void;
  'overload': (error: ErrorInfo) => void;
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è ApiClient
 */
export interface ApiClientOptions {
  maxRetries?: number;
  baseUrl?: string;
  debug?: boolean;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
export interface ApiResponse {
  success: boolean;
  data?: string;
  error?: ErrorInfo;
  attempts: number;
  duration: number;
}

/**
 * –ú–æ–¥—É–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude API
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É retry, –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ —Å–æ–±—ã—Ç–∏—è
 */
export class ApiClient extends EventEmitter {
  private maxRetries: number;
  private baseUrl: string;
  private debug: boolean;
  private requestCount: number = 0;
  private successCount: number = 0;
  private errorCount: number = 0;

  constructor(options: ApiClientOptions = {}) {
    super();
    this.maxRetries = options.maxRetries || 5;
    this.baseUrl = options.baseUrl || 'http://localhost:3001';
    this.debug = options.debug || false;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async request(prompt: string): Promise<ApiResponse> {
    const startTime = Date.now();
    const requestId = `${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;

    this.requestCount++;
    this.emit('request:start', prompt);

    if (this.debug) {
      console.log(`üöÄ [ApiClient] Starting request ${requestId}`);
    }

    let lastError: ErrorInfo | null = null;
    let attempts = 0;

    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      attempts = attempt;

      try {
        const response = await this.makeRequest(prompt, requestId, attempt);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
        if (response.startsWith('[ERROR:')) {
          const errorInfo = JSON.parse(response.slice(7, -1)) as ErrorInfo;
          lastError = errorInfo;

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
          if (errorInfo.type === ErrorType.RATE_LIMITED) {
            this.emit('rate-limit', errorInfo);
          } else if (errorInfo.type === ErrorType.API_OVERLOADED) {
            this.emit('overload', errorInfo);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ retry
          if (!errorInfo.retryable || attempt >= this.maxRetries) {
            throw errorInfo;
          }

          // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
          const delay = getRetryDelay(errorInfo, attempt);

          if (this.debug) {
            console.log(`üîÑ [ApiClient] Retry ${attempt}/${this.maxRetries} after ${delay}ms`);
          }

          this.emit('request:retry', attempt, delay, errorInfo);

          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
          await this.delay(delay);
          continue;
        }

        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        const duration = Date.now() - startTime;
        this.successCount++;

        this.emit('request:success', response, duration);

        return {
          success: true,
          data: response,
          attempts,
          duration
        };

      } catch (error) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        const errorInfo = error instanceof Object && 'type' in error
          ? error as ErrorInfo
          : analyzeError(error);

        lastError = errorInfo;

        if (this.debug) {
          console.error(`‚ùå [ApiClient] Attempt ${attempt} failed:`, errorInfo);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ retry-able
        if (attempt >= this.maxRetries || !errorInfo.retryable) {
          break;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry
        const delay = getRetryDelay(errorInfo, attempt);

        this.emit('request:retry', attempt, delay, errorInfo);

        await this.delay(delay);
      }
    }

    // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    const duration = Date.now() - startTime;
    this.errorCount++;

    this.emit('request:error', lastError!);

    return {
      success: false,
      error: lastError!,
      attempts,
      duration
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ API
   */
  private async makeRequest(prompt: string, requestId: string, attempt: number): Promise<string> {
    const requestBody = {
      prompt,
      model: "claude-3.5-sonnet",
      temperature: 0.3,
      stream: false,
    };

    const response = await fetch(`${this.baseUrl}/api/claude`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    if (!response.ok) {
      // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      let errorText: string;
      try {
        errorText = await response.text();
      } catch {
        errorText = `HTTP ${response.status}`;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTTP –æ—à–∏–±–∫—É
      const errorInfo = analyzeError({
        status: response.status,
        message: errorText,
        headers: {
          retryAfter: response.headers.get('retry-after'),
          remaining: response.headers.get('anthropic-ratelimit-requests-remaining')
        }
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
      return `[ERROR:${serializeError(errorInfo)}]`;
    }

    // –ß–∏—Ç–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    const result = await response.text();
    return result;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStats() {
    return {
      totalRequests: this.requestCount,
      successful: this.successCount,
      failed: this.errorCount,
      successRate: this.requestCount > 0
        ? ((this.successCount / this.requestCount) * 100).toFixed(2) + '%'
        : 'N/A'
    };
  }

  /**
   * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è on –¥–ª—è TypeScript
   */
  on<K extends keyof ApiClientEvents>(
    event: K,
    listener: ApiClientEvents[K]
  ): this {
    return super.on(event, listener);
  }

  /**
   * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è emit
   */
  emit<K extends keyof ApiClientEvents>(
    event: K,
    ...args: Parameters<ApiClientEvents[K]>
  ): boolean {
    return super.emit(event, ...args);
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
let apiClientInstance: ApiClient | null = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å singleton —ç–∫–∑–µ–º–ø–ª—è—Ä ApiClient
 */
export function getApiClient(options?: ApiClientOptions): ApiClient {
  if (!apiClientInstance) {
    apiClientInstance = new ApiClient(options);
  }
  return apiClientInstance;
}

/**
 * –°–±—Ä–æ—Å–∏—Ç—å singleton (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
 */
export function resetApiClient(): void {
  apiClientInstance = null;
}
```
```
// client/src/hooks/useRetryQueue.ts

import React, { useState, useCallback, useEffect, useRef } from 'react';
import { ErrorInfo, ErrorType } from '../utils/error-handler';
import { getApiClient } from '../services/ApiClient';

/**
 * –≠–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏ retry
 */
export interface RetryQueueItem {
  id: string;
  chunk: string;
  errorInfo: ErrorInfo;
  attempts: number;
  createdAt: number;
  lastAttemptAt: number | null;
  status: 'pending' | 'processing' | 'failed' | 'success';
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
 */
export interface RetryQueueState {
  items: RetryQueueItem[];
  isProcessing: boolean;
  currentItemId: string | null;
  stats: {
    totalProcessed: number;
    successCount: number;
    failureCount: number;
    lastProcessedAt: number | null;
  };
}

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export interface ProcessQueueOptions {
  onProgress?: (current: number, total: number, item: RetryQueueItem) => void;
  onItemComplete?: (item: RetryQueueItem, success: boolean) => void;
  onComplete?: (results: ProcessQueueResult) => void;
  maxConcurrent?: number;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export interface ProcessQueueResult {
  total: number;
  successful: number;
  failed: number;
  remaining: number;
  duration: number;
}

const STORAGE_KEY = 'retryQueue';
const STATS_KEY = 'retryQueueStats';

/**
 * Hook –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é retry
 */
export function useRetryQueue() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ localStorage
  const [state, setState] = useState<RetryQueueState>(() => {
    try {
      const savedQueue = localStorage.getItem(STORAGE_KEY);
      const savedStats = localStorage.getItem(STATS_KEY);

      return {
        items: savedQueue ? JSON.parse(savedQueue) : [],
        isProcessing: false,
        currentItemId: null,
        stats: savedStats ? JSON.parse(savedStats) : {
          totalProcessed: 0,
          successCount: 0,
          failureCount: 0,
          lastProcessedAt: null
        }
      };
    } catch (error) {
      console.error('Failed to load retry queue from storage:', error);
      return {
        items: [],
        isProcessing: false,
        currentItemId: null,
        stats: {
          totalProcessed: 0,
          successCount: 0,
          failureCount: 0,
          lastProcessedAt: null
        }
      };
    }
  });

  // Ref –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const abortControllerRef = useRef<AbortController | null>(null);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(state.items));
      localStorage.setItem(STATS_KEY, JSON.stringify(state.stats));
    } catch (error) {
      console.error('Failed to save retry queue to storage:', error);
    }
  }, [state.items, state.stats]);

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å
   */
  const enqueue = useCallback((chunk: string, errorInfo: ErrorInfo) => {
    const newItem: RetryQueueItem = {
      id: `${Date.now()}_${Math.random().toString(36).substring(2, 9)}`,
      chunk,
      errorInfo,
      attempts: 0,
      createdAt: Date.now(),
      lastAttemptAt: null,
      status: 'pending'
    };

    setState(prev => ({
      ...prev,
      items: [...prev.items, newItem]
    }));

    console.log(`üìù [RetryQueue] Enqueued chunk: "${chunk.substring(0, 50)}..."`);
  }, []);

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  const enqueueMultiple = useCallback((items: Array<{ chunk: string; errorInfo: ErrorInfo }>) => {
    const newItems: RetryQueueItem[] = items.map((item, index) => ({
      id: `${Date.now()}_${index}_${Math.random().toString(36).substring(2, 9)}`,
      chunk: item.chunk,
      errorInfo: item.errorInfo,
      attempts: 0,
      createdAt: Date.now(),
      lastAttemptAt: null,
      status: 'pending' as const
    }));

    setState(prev => ({
      ...prev,
      items: [...prev.items, ...newItems]
    }));

    console.log(`üìù [RetryQueue] Enqueued ${newItems.length} chunks`);
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  const processQueue = useCallback(async (
    processChunk: (chunk: string) => Promise<any>,
    options: ProcessQueueOptions = {}
  ): Promise<ProcessQueueResult> => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if (state.isProcessing) {
      console.warn('‚ö†Ô∏è [RetryQueue] Processing already in progress');
      return {
        total: 0,
        successful: 0,
        failed: 0,
        remaining: state.items.filter(i => i.status === 'pending').length,
        duration: 0
      };
    }

    const startTime = Date.now();
    const pendingItems = state.items.filter(item => item.status === 'pending');

    if (pendingItems.length === 0) {
      console.log('‚úÖ [RetryQueue] No items to process');
      return {
        total: 0,
        successful: 0,
        failed: 0,
        remaining: 0,
        duration: 0
      };
    }

    // –°–æ–∑–¥–∞–µ–º AbortController –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    abortControllerRef.current = new AbortController();

    console.log(`üîÑ [RetryQueue] Starting to process ${pendingItems.length} items`);

    setState(prev => ({ ...prev, isProcessing: true }));

    let successCount = 0;
    let failureCount = 0;

    for (let i = 0; i < pendingItems.length; i++) {
      const item = pendingItems[i];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
      if (abortControllerRef.current?.signal.aborted) {
        console.log('üõë [RetryQueue] Processing aborted');
        break;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞
      setState(prev => ({
        ...prev,
        currentItemId: item.id,
        items: prev.items.map(it =>
          it.id === item.id
            ? { ...it, status: 'processing' as const, lastAttemptAt: Date.now() }
            : it
        )
      }));

      // Callback –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      options.onProgress?.(i + 1, pendingItems.length, item);

      try {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
        const result = await processChunk(item.chunk);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—à–∏–±–∫–∏
        if (result && !result.error) {
          successCount++;

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π
          setState(prev => ({
            ...prev,
            items: prev.items.map(it =>
              it.id === item.id
                ? { ...it, status: 'success' as const, attempts: it.attempts + 1 }
                : it
            ),
            stats: {
              ...prev.stats,
              totalProcessed: prev.stats.totalProcessed + 1,
              successCount: prev.stats.successCount + 1,
              lastProcessedAt: Date.now()
            }
          }));

          options.onItemComplete?.(item, true);

          console.log(`‚úÖ [RetryQueue] Successfully processed item ${item.id}`);
        } else {
          throw new Error(result?.error || 'Unknown error');
        }

      } catch (error) {
        failureCount++;

        console.error(`‚ùå [RetryQueue] Failed to process item ${item.id}:`, error);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed
        setState(prev => ({
          ...prev,
          items: prev.items.map(it =>
            it.id === item.id
              ? {
                  ...it,
                  status: 'failed' as const,
                  attempts: it.attempts + 1,
                  errorInfo: {
                    ...it.errorInfo,
                    originalError: error instanceof Error ? error.message : String(error)
                  }
                }
              : it
          ),
          stats: {
            ...prev.stats,
            totalProcessed: prev.stats.totalProcessed + 1,
            failureCount: prev.stats.failureCount + 1,
            lastProcessedAt: Date.now()
          }
        }));

        options.onItemComplete?.(item, false);
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      if (i < pendingItems.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    setState(prev => ({
      ...prev,
      isProcessing: false,
      currentItemId: null
    }));

    const duration = Date.now() - startTime;
    const result: ProcessQueueResult = {
      total: pendingItems.length,
      successful: successCount,
      failed: failureCount,
      remaining: state.items.filter(i => i.status === 'pending').length,
      duration
    };

    console.log(`üèÅ [RetryQueue] Processing complete:`, result);

    options.onComplete?.(result);

    return result;
  }, [state.isProcessing, state.items]);

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
   */
  const cancelProcessing = useCallback(() => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      setState(prev => ({
        ...prev,
        isProcessing: false,
        currentItemId: null
      }));
    }
  }, []);

  /**
   * –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  const removeItem = useCallback((id: string) => {
    setState(prev => ({
      ...prev,
      items: prev.items.filter(item => item.id !== id)
    }));
  }, []);

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
   */
  const clearQueue = useCallback((onlyProcessed = false) => {
    setState(prev => ({
      ...prev,
      items: onlyProcessed
        ? prev.items.filter(item => item.status === 'pending')
        : []
    }));
  }, []);

  /**
   * –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  const resetFailedItems = useCallback(() => {
    setState(prev => ({
      ...prev,
      items: prev.items.map(item =>
        item.status === 'failed'
          ? { ...item, status: 'pending' as const }
          : item
      )
    }));
  }, []);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
   */
  const getItemsByStatus = useCallback((status: RetryQueueItem['status']) => {
    return state.items.filter(item => item.status === status);
  }, [state.items]);

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
   */
  const getErrorStats = useCallback(() => {
    const stats: Record<ErrorType, number> = {
      [ErrorType.PROXY_UNAVAILABLE]: 0,
      [ErrorType.NETWORK_ERROR]: 0,
      [ErrorType.API_OVERLOADED]: 0,
      [ErrorType.RATE_LIMITED]: 0,
      [ErrorType.UNKNOWN]: 0
    };

    state.items.forEach(item => {
      if (item.errorInfo.type in stats) {
        stats[item.errorInfo.type]++;
      }
    });

    return stats;
  }, [state.items]);

  return {
    // State
    queue: state.items,
    isProcessing: state.isProcessing,
    currentItemId: state.currentItemId,
    stats: state.stats,

    // Actions
    enqueue,
    enqueueMultiple,
    processQueue,
    cancelProcessing,
    removeItem,
    clearQueue,
    resetFailedItems,

    // Queries
    getItemsByStatus,
    getErrorStats,
    pendingCount: state.items.filter(i => i.status === 'pending').length,
    failedCount: state.items.filter(i => i.status === 'failed').length,
    successCount: state.items.filter(i => i.status === 'success').length
  };
}
```

```
# üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

## üìã –û–±–∑–æ—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  error-handler  ‚îÇ ‚Üê –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ    ApiClient    ‚îÇ ‚Üê –°–æ–±—ã—Ç–∏—è + retry –ª–æ–≥–∏–∫–∞
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  useRetryQueue  ‚îÇ ‚Üê –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  useProcessing  ‚îÇ ‚Üê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
         ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  APIStatusBar   ‚îÇ ‚Üê UI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è retry
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É `client/src/utils` –∏ –¥–æ–±–∞–≤—å—Ç–µ `error-handler.ts`
2. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É `client/src/services` –∏ –¥–æ–±–∞–≤—å—Ç–µ `ApiClient.ts`
3. –í –ø–∞–ø–∫–µ `client/src/hooks` –¥–æ–±–∞–≤—å—Ç–µ `useRetryQueue.ts`

## –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ claude.ts

```typescript
// client/src/claude.ts

import { getApiClient } from './services/ApiClient';
import { serializeError } from './utils/error-handler';

// –ó–ê–ú–ï–ù–Ø–ï–ú —Ñ—É–Ω–∫—Ü–∏—é callClaude –Ω–∞ –æ–±–µ—Ä—Ç–∫—É –¥–ª—è ApiClient
export async function callClaude(prompt: string): Promise<string> {
  const apiClient = getApiClient({
    debug: process.env.NODE_ENV === 'development'
  });

  const response = await apiClient.request(prompt);

  if (response.success && response.data) {
    return response.data;
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
  return `[ERROR:${serializeError(response.error!)}]`;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º ApiClient –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–¥–µ –Ω—É–∂–Ω—ã —Å–æ–±—ã—Ç–∏—è
export { getApiClient } from './services/ApiClient';
```

## –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts

```typescript
// client/src/hooks/useProcessing.ts

import { useRetryQueue } from './useRetryQueue';
import { deserializeError, ErrorType } from '../utils/error-handler';
import { getApiClient } from '../services/ApiClient';

export function useProcessing(inputText: string, setMode: (mode: AppMode) => void) {
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

  // –î–æ–±–∞–≤–ª—è–µ–º retry queue
  const {
    queue: retryQueue,
    isProcessing: isRetryProcessing,
    enqueue,
    processQueue,
    clearQueue,
    pendingCount,
    getErrorStats
  } = useRetryQueue();

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient
  React.useEffect(() => {
    const apiClient = getApiClient();

    const handleRateLimit = (error: ErrorInfo) => {
      console.warn('‚ö†Ô∏è Rate limit detected:', error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    };

    const handleOverload = (error: ErrorInfo) => {
      console.warn('‚ö†Ô∏è API overloaded:', error);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    };

    apiClient.on('rate-limit', handleRateLimit);
    apiClient.on('overload', handleOverload);

    return () => {
      apiClient.off('rate-limit', handleRateLimit);
      apiClient.off('overload', handleOverload);
    };
  }, []);

  // –û–ë–ù–û–í–õ–Ø–ï–ú processChunkWithContext
  const processChunkWithContext = React.useCallback(
    async (chunk: string): Promise<FlashcardOld[]> => {
      // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–æ –≤—ã–∑–æ–≤–∞ callClaude ...

      const raw = await callClaude(finalPrompt);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
      if (raw.startsWith('[ERROR:')) {
        const errorInfo = deserializeError(raw);

        if (errorInfo) {
          console.log('üì¶ Structured error received:', errorInfo);

          // –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è error –∫–∞—Ä—Ç–æ—á–µ–∫
          enqueue(chunk, errorInfo);

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É-–º–∞—Ä–∫–µ—Ä
          const placeholderCard: FlashcardOld = {
            front: errorInfo.message,
            back: errorInfo.suggestion,
            base_form: `pending_retry_${Date.now()}`,
            base_translation: '–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É',
            original_phrase: chunk,
            phrase_translation: `–ß–∞–Ω–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å retry`,
            text_forms: ['retry_pending'],
            visible: true,
            needsReprocessing: true,
            errorType: errorInfo.type // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è APIStatusBar
          };

          return normalizeCards([placeholderCard]);
        }
      }

      // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ...
    },
    [/* ... –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ... */, enqueue]
  );

  // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry queue
  const processRetryQueue = React.useCallback(async (
    onProgress?: (current: number, total: number, chunk: string) => void
  ) => {
    return await processQueue(
      async (chunk: string) => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
        const cards = await processChunkWithContext(chunk);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        const validCards = cards.filter(card =>
          !card.base_form?.includes('pending_retry') &&
          !card.base_form?.includes('error')
        );

        if (validCards.length > 0) {
          // –ó–∞–º–µ–Ω—è–µ–º placeholder –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
          setFlashcards(prev => {
            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
            const filtered = prev.filter(card =>
              card.original_phrase !== chunk ||
              !card.base_form?.includes('pending_retry')
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
            return [...filtered, ...mergeCardsByBaseForm(validCards)];
          });

          return { success: true };
        }

        return { error: 'No valid cards produced' };
      },
      {
        onProgress: (current, total, item) => {
          onProgress?.(current, total, item.chunk);
        }
      }
    );
  }, [processQueue, processChunkWithContext, setFlashcards, mergeCardsByBaseForm]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ
  return {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è ...

    // Retry queue —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
    retryQueue,
    isRetryProcessing,
    processRetryQueue,
    clearRetryQueue: clearQueue,
    retryQueueStats: {
      pending: pendingCount,
      errorTypes: getErrorStats()
    }
  };
}
```

## –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar –≤ App.tsx

```typescript
// client/src/App.tsx

import { ErrorType } from './utils/error-handler';

// –û–±–Ω–æ–≤–ª—è–µ–º APIStatusBar –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  onRetryProcessing,
  retryQueueStats
}) => {
  const [isRetrying, setIsRetrying] = React.useState(false);
  const [retryProgress, setRetryProgress] = React.useState<{
    current: number;
    total: number;
    currentChunk: string;
  } | null>(null);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ retry queue
  const errorStats = React.useMemo(() => {
    if (retryQueueStats) {
      return {
        total: retryQueueStats.pending,
        ...retryQueueStats.errorTypes,
        chunks: new Set<string>() // –ó–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∏–∑ flashcards –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      };
    }

    // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Å—á–µ—Ç–∞ ...
  }, [retryQueueStats, flashcards]);

  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ...

  // –í onClick –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:
  const result = await onRetryProcessing((current, total, chunk) => {
    setRetryProgress({ current, total, currentChunk: chunk });
  });
};

// –í –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ App –ø–µ—Ä–µ–¥–∞–µ–º retryQueueStats:
const {
  // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è ...
  retryQueueStats,
  processRetryQueue
} = useProcessing(inputText, setMode);

<APIStatusBar
  flashcards={flashcards}
  onRetryProcessing={processRetryQueue}
  retryQueueStats={retryQueueStats}
/>
```

## –®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

```bash
# EventEmitter –¥–ª—è ApiClient
npm install --save events
npm install --save-dev @types/events
```

## üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

### –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ error-handler
```javascript
// –í –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
import { analyzeError, getRetryDelay } from './utils/error-handler';

// –¢–µ—Å—Ç –ø—Ä–æ–∫—Å–∏ –æ—à–∏–±–∫–∏
const proxyError = analyzeError('Error: connect ECONNREFUSED 127.0.0.1:3001');
console.log(proxyError); // type: 'proxy_unavailable'

// –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
const delay = getRetryDelay(proxyError, 1);
console.log(delay); // ~3000ms
```

### –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ ApiClient —Å–æ–±—ã—Ç–∏–π
```javascript
import { getApiClient } from './services/ApiClient';

const client = getApiClient({ debug: true });

client.on('rate-limit', (error) => {
  console.log('Rate limit event:', error);
});

// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º –ø—Ä–æ–∫—Å–∏
```

### –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
1. –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
3. –û—Ç–∫—Ä–æ–π—Ç–µ APIStatusBar - –æ—á–µ—Ä–µ–¥—å –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è

## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã

1. **–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**: –°—Ç–∞—Ä—ã–π –∫–æ–¥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫—É callClaude
2. **–°–æ–±—ã—Ç–∏—è**: ApiClient –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
3. **–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å**: –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage
4. **–¢–∏–ø–∏–∑–∞—Ü–∏—è**: –í—Å–µ –æ—à–∏–±–∫–∏ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ enum

## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ (–§–∞–∑–∞ 3)

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å:

1. **Batch processing**:
   ```typescript
   // –í ApiClient –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥
   async submitBatch(chunks: string[]): Promise<BatchResponse> {
     // –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ batch –∑–∞–ø—Ä–æ—Å–∞
   }
   ```

2. **Prompt caching**:
   ```typescript
   // –í ApiClient –¥–æ–±–∞–≤–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   private promptCache = new Map<string, CachedResponse>();
   ```

3. **–£–ª—É—á—à–µ–Ω–Ω—ã–π UI**:
   - –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
   - –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫
   - –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤
```
```
# üöÄ –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

## üìÖ –î–µ–Ω—å 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π (4-6 —á–∞—Å–æ–≤)

### –£—Ç—Ä–æ (2-3 —á–∞—Å–∞)
1. **–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫**:
   ```
   client/src/
   ‚îú‚îÄ‚îÄ utils/
   ‚îÇ   ‚îî‚îÄ‚îÄ error-handler.ts
   ‚îú‚îÄ‚îÄ services/
   ‚îÇ   ‚îî‚îÄ‚îÄ ApiClient.ts
   ‚îî‚îÄ‚îÄ hooks/
       ‚îî‚îÄ‚îÄ useRetryQueue.ts (–¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º)
   ```

2. **–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–æ–¥—É–ª–µ–π**:
   - error-handler.ts –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 1
   - ApiClient.ts –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 2
   - useRetryQueue.ts –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 3

3. **–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π**:
   ```bash
   cd client
   npm install events
   npm install -D @types/events
   ```

### –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (2-3 —á–∞—Å–∞)
4. **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ claude.ts**:
   - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

5. **–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**:
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript
   - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   - –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞

## üìÖ –î–µ–Ω—å 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º (6-8 —á–∞—Å–æ–≤)

### –£—Ç—Ä–æ (3-4 —á–∞—Å–∞)
1. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ useProcessing.ts**:
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è useRetryQueue
   - –ó–∞–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è error –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ enqueue
   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ processRetryQueue —Ñ—É–Ω–∫—Ü–∏–∏

2. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ retry queue**:
   - –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   - –¢–µ—Å—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage

### –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (3-4 —á–∞—Å–∞)
3. **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ APIStatusBar**:
   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å retry queue stats
   - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI

4. **–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**:
   - –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ test8_7.txt
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
   - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π

## üìÖ –î–µ–Ω—å 3: –û—Ç–ª–∞–¥–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (4-6 —á–∞—Å–æ–≤)

### –ó–∞–¥–∞—á–∏:
1. **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º**
2. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**
3. **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è**
4. **–ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**

## üß™ –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏

### –ü–æ—Å–ª–µ –î–µ–Ω—å 1:
- [ ] TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
- [ ] –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
- [ ] callClaude –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
- [ ] error-handler –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏

### –ü–æ—Å–ª–µ –î–µ–Ω—å 2:
- [ ] Retry queue —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ localStorage
- [ ] APIStatusBar –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ queue
- [ ] –°–æ–±—ã—Ç–∏—è ApiClient —Ä–∞–±–æ—Ç–∞—é—Ç
- [ ] –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫

### –ü–æ—Å–ª–µ –î–µ–Ω—å 3:
- [ ] –í—Å–µ —Ç–µ—Å—Ç—ã –∏–∑ test8_7.txt –ø—Ä–æ—Ö–æ–¥—è—Ç
- [ ] –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å
- [ ] –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é batch processing

## üö® –†–∏—Å–∫–∏ –∏ –º–∏—Ç–∏–≥–∞—Ü–∏—è

| –†–∏—Å–∫ | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å | –ú–∏—Ç–∏–≥–∞—Ü–∏—è |
|------|-------------|-----------|
| –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ç–∏–ø–æ–≤ TypeScript | –°—Ä–µ–¥–Ω—è—è | –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ |
| –†–µ–≥—Ä–µ—Å—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ | –ù–∏–∑–∫–∞—è | –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫–∏ |
| –ü—Ä–æ–±–ª–µ–º—ã —Å localStorage | –ù–∏–∑–∫–∞—è | Try-catch –±–ª–æ–∫–∏, fallback –Ω–∞ –ø–∞–º—è—Ç—å |
| –°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–∞–¥–∫–∏ —Å–æ–±—ã—Ç–∏–π | –°—Ä–µ–¥–Ω—è—è | –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, debug —Ä–µ–∂–∏–º |

## üìä –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—Ö–∞

1. **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ**:
   - ‚úÖ –í—Å–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
   - ‚úÖ Retry queue —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
   - ‚úÖ –°–æ–±—ã—Ç–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
   - ‚úÖ –ù–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫

2. **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ**:
   - ‚úÖ –ö–æ–¥ –º–æ–¥—É–ª—å–Ω—ã–π –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π
   - ‚úÖ TypeScript —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
   - ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É—Ö—É–¥—à–∏–ª–∞—Å—å
   - ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ batch processing

## üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç

–ü–æ—Å–ª–µ 3 –¥–Ω–µ–π —É –≤–∞—Å –±—É–¥–µ—Ç:
1. **–ß–∏—Å—Ç–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**
2. **–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è retry —Å–∏—Å—Ç–µ–º–∞**
3. **Event-driven –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫**
4. **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –§–∞–∑–µ 3 (batch processing)**

## üí° –°–æ–≤–µ—Ç—ã

1. **–î–µ–ª–∞–π—Ç–µ –∫–æ–º–º–∏—Ç—ã —á–∞—Å—Ç–æ** - –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —à–∞–≥–∞
2. **–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ** - –Ω–µ –∂–¥–∏—Ç–µ –∫–æ–Ω—Ü–∞ –¥–Ω—è
3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ debug —Ä–µ–∂–∏–º** - ApiClient({ debug: true })
4. **–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–æ–¥** - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –Ω–µ —É–¥–∞–ª—è–π—Ç–µ

## üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫)

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –û—Ç–∫–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–±–æ—á–∏–π –∫–æ–º–º–∏—Ç
2. –í–Ω–µ–¥—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ error-handler.ts (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ —Å–æ–±—ã—Ç–∏–π
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π
```
–ü–æ–¥–≥–æ—Ç–æ–≤–ª—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

## ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:

1. **–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è** - –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
2. **–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ batch processing** - ApiClient —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
3. **–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å** - –æ—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
4. **–ß–∏—Å—Ç—ã–π –∫–æ–¥** - –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É

## üéØ –ö–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è:

1. **error-handler.ts** - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫
2. **ApiClient** - –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å API
3. **useRetryQueue** - —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
4. **–°–æ–±—ã—Ç–∏—è** - –ø–æ–∑–≤–æ–ª—è—é—Ç –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É

**AUDITOR AGENT** (Final audit):
- ‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã
- ‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è TypeScript –≤–µ–∑–¥–µ
- ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
- ‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é

**COORDINATOR AGENT** (Coordination):

## üèÜ –ò—Ç–æ–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:

### –°–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å:
1. **error-handler.ts** - –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
2. **ApiClient.ts** - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏
3. **useRetryQueue.ts** - –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
4. **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏** - –ø–æ—à–∞–≥–æ–≤–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
5. **–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞** - –ø–ª–∞–Ω –Ω–∞ 3 –¥–Ω—è

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–≥–∏:
1. –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ç–∫—É `feature/modular-retry-system`
2. –ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–î–µ–Ω—å 1)
3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
4. –ö–æ–º–º–∏—Ç—å—Ç–µ —á–∞—Å—Ç–æ

### –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è:
- –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –∫ batch processing
- –û—à–∏–±–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
- Retry –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–∂–∏–≤–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
- –ö–æ–¥ –±—É–¥–µ—Ç –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å

**CONTROLLER AGENT** (Loop check):
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ü–∏–∫–ª—ã - —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏.

**WORK MODE**: COMPLETE MODE
**RISK ASSESSMENT**: LOW-MEDIUM
**CONFIDENCE**: 98%
**LOOP STATUS**: Architecture prevents loops
**NEXT STEPS**:
1. –°–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É –≤ git
2. –ù–∞—á–∞—Ç—å —Å –î–µ–Ω—å 1
3. –°–ª–µ–¥–æ–≤–∞—Ç—å –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–µ
