import express, { Request, Response, NextFunction } from "express";
import cors from "cors";
import fetch from "node-fetch";
import dotenv from "dotenv";
import path from "path";
import fs from "fs";

const INTERNAL_TEST_CONFIG = {
  model: "claude-3-haiku-20240307",
  maxTokens: 100, // –ú–∏–Ω–∏–º—É–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
  temperature: 0.3, // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
} as const;

/* ====================== –¢–∏–ø—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ ====================== */
// –°–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
interface ClaudeMessage {
  role: "user" | "assistant" | "system";
  // Anthropic –¥–æ–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
  // –í –ø—Ä–æ–µ–∫—Ç–µ —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º any.
  content: any;
}

// –û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (Anthropic tools)
interface ClaudeTool {
  name: string;
  description?: string;
  // –°—Ö–µ–º–∞ –≤–≤–æ–¥–∞ –∫–∞–∫ JSON Schema (Anthropic –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º type: "object" –∏ —Ç.–¥.)
  input_schema: Record<string, unknown>;
}

// –í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (tool_choice)
type ClaudeToolChoice =
  | "auto"
  | "any"
  | { type: "auto" | "any" }
  | { type: "tool"; name: string }
  // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –±—É–¥—É—â–µ–µ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å—Ç—Ä–æ–≥–æ —É–∫–∞–∑–∞—Ç—å tool_use)
  | { type: "tool_use"; name: string };

interface ClaudeRequestBody {
  model?: string;
  max_tokens?: number;
  temperature?: number;
  system?: string | Array<{ type: "text"; text: string }>;
  messages: ClaudeMessage[];
  tools?: ClaudeTool[];
  tool_choice?: ClaudeToolChoice;
  // –î–æ–ø—É—Å–∫–∞–µ–º –±—É–¥—É—â–∏–µ –ø–æ–ª—è –±–µ–∑ –∂—ë—Å—Ç–∫–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
  [key: string]: unknown;
}

interface ClaudeContentItem {
  type: string; // "text" | "tool_use" | ...
  // –î–ª—è type="text"
  text?: string;
  // –î–ª—è type="tool_use" –∏ –ø—Ä.
  [key: string]: any;
}

interface ClaudeResponse {
  content: ClaudeContentItem[];
  model?: string;
  role?: string;
  stop_reason?: string;
  stop_sequence?: string;
  usage?: {
    input_tokens: number;
    output_tokens: number;
  };
}

interface ErrorResponse {
  error: string;
  details?: unknown;
  type?: string;
  timestamp: string;
}

/* ====================== ENV/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ====================== */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ server/.env
dotenv.config({ path: path.join(__dirname, ".env") });

const app = express();

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–∞–π–ª (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É)
const logsDir = path.join(__dirname, "../client/cypress/logs");
if (!fs.existsSync(logsDir)) fs.mkdirSync(logsDir, { recursive: true });
const serverLogPath = path.join(
  logsDir,
  `server_log_${new Date().toISOString().replace(/[:.]/g, "_")}.txt`
);
const serverLogStream = fs.createWriteStream(serverLogPath, { flags: "a" });
const originalConsoleLog = console.log;
console.log = (...args: unknown[]) => {
  originalConsoleLog(...args);
  serverLogStream.write(args.map(String).join(" ") + "\n");
};

// Middleware
app.use(
  cors({
    origin: ["http://localhost:5173", "http://localhost:3000"], // Vite –∏ React dev servers
    credentials: true,
  })
);
app.use(express.json({ limit: "10mb" })); // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤

// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
const API_KEY = process.env.CLAUDE_API_KEY;

if (!API_KEY) {
  console.error("‚ùå –û–®–ò–ë–ö–ê: CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!");
  console.error("üìã –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª server/.env —Å–æ–¥–µ—Ä–∂–∏—Ç:");
  console.error("   CLAUDE_API_KEY=sk-ant-api03-–≤–∞—à-–∫–ª—é—á");
  process.exit(1);
}

console.log("‚úÖ Claude API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env");
console.log("üîë API –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:", API_KEY.substring(0, 20) + "...");

/* ====================== –£—Ç–∏–ª–∏—Ç—ã ====================== */

// –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º rate-limit/Retry-After –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ Anthropic –∫ –∫–ª–∏–µ–Ω—Ç—É
function forwardRateLimitHeaders(from: Headers, to: Response) {
  const keys = [
    "anthropic-ratelimit-requests-limit",
    "anthropic-ratelimit-requests-remaining",
    "anthropic-ratelimit-requests-reset",
    "anthropic-ratelimit-tokens-limit",
    "anthropic-ratelimit-tokens-remaining",
    "anthropic-ratelimit-tokens-reset",
    "retry-after",
  ];
  for (const k of keys) {
    const v = from.get(k);
    if (v !== null) to.setHeader(k, v);
  }
}

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–æ–∫ –∫–ª–∏–µ–Ω—Ç—É
function sendError(
  res: Response,
  status: number,
  message: string,
  details?: unknown,
  type?: string
) {
  res.status(status).json({
    error: message,
    details,
    type: type || "proxy_error",
    timestamp: new Date().toISOString(),
  } as ErrorResponse);
}

/* ====================== –ú–∞—Ä—à—Ä—É—Ç—ã ====================== */

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/health", (_req: Request, res: Response) => {
  res.json({
    status: "ok",
    timestamp: new Date().toISOString(),
    hasApiKey: !!API_KEY,
    internalTestConfig: INTERNAL_TEST_CONFIG,
    note: "Configuration is managed by client (client/src/config/index.ts). Server acts as proxy without defaults.",
  });
});

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Claude API (single messages)
app.post("/api/claude", async (req: Request, res: Response) => {
  const startTime = Date.now();

  console.log("\nüî• ===== –ù–û–í–´–ô –ó–ê–ü–†–û–° –ö CLAUDE API =====");
  console.log("üïê –í—Ä–µ–º—è:", new Date().toISOString());
  console.log("üìù Request body keys:", Object.keys(req.body || {}));

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
  if (!req.body || typeof req.body !== "object") {
    console.error("‚ùå –ü—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞");
    return sendError(res, 400, "Empty or invalid request body");
  }

  const requestBody = req.body as ClaudeRequestBody;

  if (!requestBody.messages || !Array.isArray(requestBody.messages)) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ messages");
    return sendError(res, 400, "Missing or invalid messages array");
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
  console.log("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:");
  console.log("   Model:", requestBody.model || "–Ω–µ —É–∫–∞–∑–∞–Ω");
  console.log("   Max tokens:", requestBody.max_tokens ?? "–Ω–µ —É–∫–∞–∑–∞–Ω");
  console.log("   Temperature:", requestBody.temperature ?? "–Ω–µ —É–∫–∞–∑–∞–Ω");
  console.log("   Messages count:", requestBody.messages.length);
  console.log(
    "   Tools:",
    Array.isArray(requestBody.tools) ? `count=${requestBody.tools.length}` : "none"
  );
  console.log(
    "   Tool choice:",
    requestBody.tool_choice ? JSON.stringify(requestBody.tool_choice) : "none"
  );
  console.log("   System:", requestBody.system ? "[provided]" : "none");

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
  requestBody.messages.forEach((msg: ClaudeMessage, index: number) => {
    const contentStr =
      typeof msg.content === "string" ? msg.content : JSON.stringify(msg.content ?? "");
    console.log(`   Message ${index + 1}: role=${msg.role}; content length=${contentStr.length}`);
    if (contentStr.length > 0) {
      console.log(
        `     First 200 chars: "${contentStr.substring(0, 200)}${contentStr.length > 200 ? "..." : ""}"`
      );
    }
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  if (!requestBody.model || !requestBody.max_tokens || requestBody.temperature === undefined) {
    console.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
    console.error("   Model:", requestBody.model);
    console.error("   Max tokens:", requestBody.max_tokens);
    console.error("   Temperature:", requestBody.temperature);

    return sendError(
      res,
      400,
      "Missing required parameters: model, max_tokens, temperature must be provided by client"
    );
  }

  try {
    console.log("\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude API...");

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Claude ‚Äî –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω—ã tools –∏ tool_choice
    const claudeRequestBody: Record<string, unknown> = {
      model: requestBody.model!,
      max_tokens: requestBody.max_tokens!,
      temperature: requestBody.temperature!,
      messages: requestBody.messages,
      ...(requestBody.system ? { system: requestBody.system } : {}),
      ...(Array.isArray(requestBody.tools) ? { tools: requestBody.tools } : {}),
      ...(requestBody.tool_choice ? { tool_choice: requestBody.tool_choice } : {}),
    };

    console.log("üì¶ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude:", JSON.stringify(claudeRequestBody, null, 2));

    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "x-api-key": API_KEY!,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json",
      },
      body: JSON.stringify(claudeRequestBody),
    });

    const responseTime = Date.now() - startTime;
    console.log(`\nüì° –û—Ç–≤–µ—Ç –æ—Ç Claude API –ø–æ–ª—É—á–µ–Ω –∑–∞ ${responseTime}ms`);
    console.log("üìä Response status:", response.status);
    console.log("üìä Response ok:", (response as any).ok);
    console.log("üìä Response headers:", Object.fromEntries(response.headers.entries()));

    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º rate-limit –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
    forwardRateLimitHeaders(response.headers as unknown as Headers, res);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
    const responseText = await response.text();
    console.log("üìÑ Raw response length:", responseText.length);
    console.log("üìÑ Raw response (first 500 chars):", responseText.substring(0, 500));

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏/–ª–∏–º–∏—Ç–æ–≤
    if (response.status === 429 || response.status === 529) {
      console.warn(`‚ö†Ô∏è Upstream returned ${response.status}. –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å.`);
      // –í–∞–∂–Ω–æ: –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¢–ï–ö–°–¢ –∏ —Å—Ç–∞—Ç—É—Å (–∫–ª–∏–µ–Ω—Ç —É–º–µ–µ—Ç —á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏/—Å—Ç–∞—Ç—É—Å)
      res.status(response.status).send(responseText);
      return;
    }

    if (!(response as any).ok) {
      console.error("‚ùå Claude API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:");
      console.error("   Status:", response.status);
      console.error("   Response:", responseText);

      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
      let parsed: unknown;
      try {
        parsed = JSON.parse(responseText);
      } catch {
        parsed = { message: responseText };
      }

      return sendError(
        res,
        response.status,
        "Claude API Error",
        parsed,
        (parsed as any)?.error?.type || "upstream_error"
      );
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø–∞—Ä—Å–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–ø–∞—Å–Ω–æ
    let data: ClaudeResponse;
    try {
      data = JSON.parse(responseText) as ClaudeResponse;
      console.log("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω");
      console.log("üì¶ Response data keys:", Object.keys(data));
      if (Array.isArray(data.content)) {
        console.log("üìù Content items count:", data.content.length);
        data.content.forEach((item: ClaudeContentItem, index: number) => {
          const kind = item?.type || "unknown";
          if (kind === "text") {
            const len = (item.text || "").length;
            console.log(`   Content ${index + 1}: type=${kind}; text length=${len}`);
            if (item.text) {
              console.log(
                `     First 200 chars: "${item.text.substring(0, 200)}${item.text.length > 200 ? "..." : ""}"`
              );
            }
          } else {
            // tool_use –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º –æ–±—ä—ë–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            console.log(`   Content ${index + 1}: type=${kind}; keys=${Object.keys(item)}`);
          }
        });
      } else {
        console.warn("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ content:", typeof data.content);
      }
    } catch (parseError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude:", parseError);
      console.error("üìÑ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç:", responseText);

      const errorMessage = parseError instanceof Error ? parseError.message : "Unknown parse error";
      return sendError(
        res,
        500,
        "Failed to parse Claude API response",
        errorMessage,
        "parse_error"
      );
    }

    console.log("‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É");
    console.log("üî• ===== –ó–ê–ü–†–û–° –ó–ê–í–ï–†–®–ï–ù =====\n");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    res.setHeader("content-type", "application/json; charset=utf-8");
    res.status(200).send(responseText);
  } catch (err) {
    const responseTime = Date.now() - startTime;
    console.error(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞ (${responseTime}ms):`);

    const error = err as Error;
    console.error("Error type:", error.constructor?.name || "Unknown");
    console.error("Error message:", error.message || "No message");
    console.error("Error stack:", error.stack || "No stack");

    return sendError(
      res,
      500,
      "Proxy server error",
      error.message || "Unknown error",
      error.constructor?.name || "Unknown"
    );
  }
});

/* ====================== Batch endpoints –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ ====================== */

app.post("/api/claude/batch", async (req: Request, res: Response) => {
  console.log("üõ∞Ô∏è POST /api/claude/batch", JSON.stringify(req.body, null, 2));
  try {
    const anthropicRes = await fetch("https://api.anthropic.com/v1/messages/batches", {
      method: "POST",
      headers: {
        "x-api-key": API_KEY!,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json",
      },
      // –í–ê–ñ–ù–û: —Ç–µ–ª–æ –ø–µ—Ä–µ–¥–∞—ë–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –∫–ª–∏–µ–Ω—Ç —Å–∞–º —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç items (–≤ —Ç.—á. tools/tool_choice –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
      body: JSON.stringify(req.body),
    });

    // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º rate-limit –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Anthropic –∏—Ö –≤–µ—Ä–Ω—ë—Ç –¥–ª—è batch)
    forwardRateLimitHeaders(anthropicRes.headers as unknown as Headers, res);

    const text = await anthropicRes.text();
    res.status(anthropicRes.status).send(text);
  } catch (error) {
    console.error("Batch creation error:", error);
    res.status(500).json({ error: "Batch request failed", timestamp: new Date().toISOString() });
  }
});

app.get("/api/claude/batch/:id", async (req: Request, res: Response) => {
  console.log(`üîç GET /api/claude/batch/${req.params.id}`);
  try {
    const anthropicRes = await fetch(
      `https://api.anthropic.com/v1/messages/batches/${req.params.id}`,
      {
        method: "GET",
        headers: {
          "x-api-key": API_KEY!,
          "anthropic-version": "2023-06-01",
        },
      }
    );

    forwardRateLimitHeaders(anthropicRes.headers as unknown as Headers, res);

    const text = await anthropicRes.text();
    res.status(anthropicRes.status).send(text);
  } catch (error) {
    console.error("Batch status error:", error);
    res.status(500).json({ error: "Batch status failed", timestamp: new Date().toISOString() });
  }
});

app.get("/api/claude/batch/:id/results", async (req, res) => {
  const id = req.params.id;
  const anthropicRes = await fetch(`https://api.anthropic.com/v1/messages/batches/${id}/results`, {
    headers: {
      "x-api-key": API_KEY!,
      "anthropic-version": "2023-06-01",
    },
  });

  forwardRateLimitHeaders(anthropicRes.headers as unknown as Headers, res);

  if (!anthropicRes.ok) {
    return res.status(anthropicRes.status).send(await anthropicRes.text());
  }
  res.setHeader("Content-Type", "text/plain"); // .jsonl ‚Äî plain text
  const stream = anthropicRes.body as unknown as NodeJS.ReadableStream;
  stream.pipe(res);
});

/* ====================== –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ ====================== */

app.post("/api/claude/test", async (_req: Request, res: Response) => {
  console.log("\nüß™ ===== INTERNAL API TEST =====");
  console.log("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ internal —Ç–µ—Å—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏");
  console.log("‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞");

  try {
    const testMessage: ClaudeRequestBody = {
      model: INTERNAL_TEST_CONFIG.model,
      max_tokens: INTERNAL_TEST_CONFIG.maxTokens,
      temperature: INTERNAL_TEST_CONFIG.temperature,
      messages: [
        {
          role: "user",
          content: 'Say \'Hello, I am working!\' in JSON format: {"message": "your response"}',
        },
      ],
      // –ú–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç tools/tool_choice:
      // tools: [{ name: "echo_tool", input_schema: { type: "object", properties: { text: { type: "string" } }, required: ["text"] } }],
      // tool_choice: "auto",
    };

    console.log("üì¶ Internal test configuration:", JSON.stringify(testMessage, null, 2));

    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "x-api-key": API_KEY!,
        "anthropic-version": "2023-06-01",
        "content-type": "application/json",
      },
      body: JSON.stringify(testMessage),
    });

    forwardRateLimitHeaders(response.headers as unknown as Headers, res);

    const text = await response.text();

    if (response.ok) {
      console.log("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! Claude API —Ä–∞–±–æ—Ç–∞–µ—Ç");
      res.status(200).send(text);
    } else {
      console.error("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:", text);
      res.status(500).json({
        success: false,
        error: "Claude API test failed",
        details: text,
        timestamp: new Date().toISOString(),
      });
    }
  } catch (err) {
    const error = err as Error;
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:", error);
    res.status(500).json({
      success: false,
      error: "Test connection failed",
      details: error.message,
      timestamp: new Date().toISOString(),
    });
  }
});

/* ====================== 404 –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ====================== */

app.use("*", (req: Request, res: Response) => {
  console.log(`‚ùì 404: ${req.method} ${req.originalUrl}`);
  res.status(404).json({
    error: "Endpoint not found",
    available: ["/health", "/api/claude", "/api/claude/test", "/api/claude/batch"],
    timestamp: new Date().toISOString(),
  } as ErrorResponse);
});

// eslint-disable-next-line @typescript-eslint/no-unused-vars
app.use((err: Error, _req: Request, res: Response, _next: NextFunction) => {
  console.error("üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
  res.status(500).json({
    error: "Internal server error",
    details: err.message,
    timestamp: new Date().toISOString(),
  } as ErrorResponse);
});

/* ====================== –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ====================== */

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log("\nüöÄ ===== –ü–†–û–ö–°–ò –°–ï–†–í–ï–† –ó–ê–ü–£–©–ï–ù =====");
  console.log(`üåê –°–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç: ${PORT}`);
  console.log(`üè• Health check: http://localhost:${PORT}/health`);
  console.log(`üß™ Test endpoint: http://localhost:${PORT}/api/claude/test`);
  console.log(`ü§ñ Claude API endpoint: http://localhost:${PORT}/api/claude`);
  console.log("=====================================\n");
});
