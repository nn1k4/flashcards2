import { getClaudeConfig } from "./config";
import type { ClaudeTool, ClaudeToolChoice } from "./types";

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø Error —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è HTTP –æ—à–∏–±–æ–∫
interface ExtendedError extends Error {
  status?: number;
  retryAfter?: string | null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ Claude API
interface ClaudeContent {
  type: string;
  text: string;
}

interface ClaudeResponse {
  content: ClaudeContent[];
  model?: string;
  role?: string;
  stop_reason?: string;
  stop_sequence?: string;
  usage?: {
    input_tokens: number;
    output_tokens: number;
  };
}

interface ClaudeErrorResponse {
  error: string;
  details?: string;
  type?: string;
  timestamp?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ (–æ–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã)
function logPromptSafely(prompt: string): void {
  const maxLogLength = 300;
  if (prompt.length <= maxLogLength) {
    console.log("üìù Full prompt:", prompt);
  } else {
    console.log("üìù Prompt (first 300 chars):", prompt.substring(0, maxLogLength) + "...");
    console.log("üìù Total prompt length:", prompt.length, "characters");
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function formatDuration(ms: number): string {
  if (ms < 1000) return `${ms}ms`;
  return `${(ms / 1000).toFixed(2)}s`;
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Claude API —Å retry –ª–æ–≥–∏–∫–æ–π
export async function callClaude(
  prompt: string,
  tools?: ClaudeTool[],
  tool_choice?: ClaudeToolChoice
): Promise<string> {
  const startTime = Date.now();
  const requestId = Math.random().toString(36).substring(2, 8);
  const maxRetries = 3;
  let lastError: Error | null = null; // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ Error –∏–ª–∏ null

  console.log(`\nü§ñ ===== CLAUDE API CALL [${requestId}] =====`);
  console.log("üïê Start time:", new Date().toISOString());

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!prompt || typeof prompt !== "string") {
    console.error("‚ùå Invalid prompt provided:", typeof prompt, prompt);
    return "[Error: Invalid prompt]";
  }

  if (prompt.trim().length === 0) {
    console.error("‚ùå Empty prompt provided");
    return "[Error: Empty prompt]";
  }

  logPromptSafely(prompt);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å exponential backoff
  const calculateBackoffDelay = (attempt: number, retryAfter?: string): number => {
    if (retryAfter) {
      const retryAfterMs = parseInt(retryAfter) * 1000;
      console.log(`üïê Using Retry-After header: ${retryAfterMs}ms`);
      return retryAfterMs;
    }

    // Exponential backoff: 1s, 2s, 4s (max 30s)
    const exponentialDelay = Math.min(1000 * Math.pow(2, attempt - 1), 30000);
    console.log(`üïê Exponential backoff delay: ${exponentialDelay}ms for attempt ${attempt}`);
    return exponentialDelay;
  };

  // –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ rate limit headers
  const monitorRateLimits = (response: Response) => {
    const requestsRemaining = response.headers.get("anthropic-ratelimit-requests-remaining");
    const requestsReset = response.headers.get("anthropic-ratelimit-requests-reset");
    const tokensRemaining = response.headers.get("anthropic-ratelimit-tokens-remaining");

    if (requestsRemaining) {
      console.log(`üìä Rate Limit - Requests remaining: ${requestsRemaining}`);

      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤
      const remaining = parseInt(requestsRemaining);
      if (remaining < 5) {
        console.warn(`‚ö†Ô∏è WARNING: Only ${remaining} requests remaining until reset`);
      }
    }

    if (tokensRemaining) {
      console.log(`üìä Rate Limit - Tokens remaining: ${tokensRemaining}`);
    }

    if (requestsReset) {
      console.log(`üìä Rate Limit - Reset time: ${requestsReset}`);
    }
  };

  // Retry —Ü–∏–∫–ª —Å exponential backoff
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`\nüöÄ Attempt ${attempt}/${maxRetries}`);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
      const claudeConfig = getClaudeConfig("textProcessing");

      const requestBody = {
        model: claudeConfig.model,
        max_tokens: claudeConfig.maxTokens,
        temperature: claudeConfig.temperature,
        messages: [{ role: "user", content: prompt.trim() }],
      };

      // –î–æ–±–∞–≤–ª—è–µ–º tools –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã (–Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏)
      if (tools) {
        requestBody.tools = tools;
      }
      if (tool_choice) {
        requestBody.tool_choice = tool_choice;
      }

      console.log("üì¶ Request configuration:");
      console.log("   Model:", requestBody.model);
      console.log("   Max tokens:", requestBody.max_tokens);
      console.log("   Temperature:", requestBody.temperature);

      const attemptStartTime = Date.now();
      console.log("üöÄ Sending HTTP request to proxy server...");

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ proxy —Å–µ—Ä–≤–µ—Ä—É
      const response = await fetch("http://localhost:3001/api/claude", {
        method: "POST",
        headers: {
          "content-type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      const requestTime = Date.now() - attemptStartTime;
      console.log(`üì° HTTP response received in ${formatDuration(requestTime)}`);
      console.log("üìä Response status:", response.status);

      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ rate limits
      monitorRateLimits(response);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit –æ—à–∏–±–æ–∫ (429)
      if (response.status === 429) {
        const retryAfter = response.headers.get("retry-after");
        console.warn(`‚ö†Ô∏è Rate limit exceeded (429). Retry-After: ${retryAfter || "not provided"}`);

        if (attempt < maxRetries) {
          const delay = calculateBackoffDelay(attempt, retryAfter || undefined);
          console.log(`‚è≥ Waiting ${delay}ms before retry...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue; // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        } else {
          return "[Error: Rate limit exceeded - please wait before trying again]";
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ server overload –æ—à–∏–±–æ–∫ (529)
      if (response.status === 529) {
        const retryAfter = response.headers.get("retry-after");
        console.warn(`‚ö†Ô∏è Server overloaded (529). Retry-After: ${retryAfter || "not provided"}`);

        if (attempt < maxRetries) {
          // –î–ª—è 529 –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
          const baseDelay = calculateBackoffDelay(attempt, retryAfter || undefined);
          const overloadDelay = Math.max(baseDelay, 10000); // –ú–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è 529
          console.log(`‚è≥ Server overloaded, waiting ${overloadDelay}ms before retry...`);
          await new Promise(resolve => setTimeout(resolve, overloadDelay));
          continue; // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        } else {
          return "[Error: Claude API temporarily overloaded - please try again later]";
        }
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö HTTP –æ—à–∏–±–æ–∫
      if (!response.ok) {
        console.error(`‚ùå HTTP Error: ${response.status} ${response.statusText}`);

        let errorText: string;
        try {
          errorText = await response.text();
        } catch (readError) {
          console.error("‚ùå Failed to read error response:", readError);
          errorText = `HTTP ${response.status} - Unable to read response body`;
        }

        const error = new Error(`HTTP Error ${response.status}: ${errorText}`);
        (error as ExtendedError).status = response.status;
        (error as ExtendedError).retryAfter = response.headers.get("retry-after");

        lastError = error;

        // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        if (response.status === 400 || response.status === 401 || response.status === 403) {
          console.error("‚ùå Non-retryable error, throwing immediately");
          return `[Error: HTTP ${response.status}: ${errorText}]`;
        }

        if (attempt < maxRetries) {
          console.log(`üîÑ Retryable error, will retry (attempt ${attempt}/${maxRetries})`);
          const delay = calculateBackoffDelay(attempt);
          await new Promise(resolve => setTimeout(resolve, delay));
          continue;
        }

        return `[Error: HTTP ${response.status}: ${errorText}]`;
      }

      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
      console.log("‚úÖ Response OK, parsing...");

      let responseText: string;
      try {
        responseText = await response.text();
        console.log("‚úÖ Response body read successfully");
        console.log("üìä Response body length:", responseText.length, "characters");

        if (responseText.length > 0) {
          console.log("üìÑ Response body (first 500 chars):", responseText.substring(0, 500));
        } else {
          console.warn("‚ö†Ô∏è Empty response body received");
          return "[Error: Empty response from server]";
        }
      } catch (readError) {
        console.error("‚ùå Failed to read response body:", readError);
        return "[Error: Failed to read server response]";
      }

      // –ü–∞—Ä—Å–∏–º JSON
      console.log("\nüîç Parsing JSON response...");
      let result: ClaudeResponse | ClaudeErrorResponse;
      try {
        result = JSON.parse(responseText);
        console.log("‚úÖ JSON parsed successfully");
        console.log("üì¶ Response object keys:", Object.keys(result));
      } catch (parseError) {
        console.error("‚ùå JSON parsing failed:", parseError);
        console.error("üìÑ Problematic text (first 200 chars):", responseText.substring(0, 200));
        return `[Error: Invalid JSON response - ${parseError instanceof Error ? parseError.message : "Unknown parse error"}]`;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ
      if ("error" in result) {
        console.error("‚ùå Claude API returned error:");
        console.error("   Error:", result.error);
        console.error("   Details:", result.details || "No details provided");
        console.error("   Type:", result.type || "Unknown");
        return `[Claude API Error: ${result.error}]`;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const claudeResponse = result as ClaudeResponse;

      if (!claudeResponse.content) {
        console.error("‚ùå Missing content field in response");
        console.error("üì¶ Available fields:", Object.keys(claudeResponse));
        return "[Error: Invalid response structure - missing content]";
      }

      if (!Array.isArray(claudeResponse.content)) {
        console.error("‚ùå Content field is not an array:", typeof claudeResponse.content);
        return "[Error: Invalid response structure - content is not array]";
      }

      if (claudeResponse.content.length === 0) {
        console.error("‚ùå Empty content array");
        return "[Error: Empty response content]";
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ content
      const firstContent = claudeResponse.content[0];
      console.log("üìù Processing content item:");
      console.log("   Type:", firstContent.type);
      console.log("   Has text:", !!firstContent.text);

      if (!firstContent.text) {
        console.error("‚ùå No text field in content item");
        console.error("üì¶ Content item keys:", Object.keys(firstContent));
        return "[Error: No text in response content]";
      }

      const output = firstContent.text.trim();
      const totalTime = Date.now() - startTime;

      console.log("‚úÖ Text extracted successfully:");
      console.log("üìä Output length:", output.length, "characters");
      console.log(
        "üìù Output (first 200 chars):",
        output.substring(0, 200) + (output.length > 200 ? "..." : "")
      );

      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
      if (claudeResponse.usage) {
        console.log("üìä Token usage:");
        console.log("   Input tokens:", claudeResponse.usage.input_tokens);
        console.log("   Output tokens:", claudeResponse.usage.output_tokens);
        console.log(
          "   Total tokens:",
          claudeResponse.usage.input_tokens + claudeResponse.usage.output_tokens
        );
      }

      console.log(
        `üèÅ Request completed successfully in ${formatDuration(totalTime)} (attempt ${attempt})`
      );
      console.log(`===== END CLAUDE API CALL [${requestId}] =====\n`);

      return output;
    } catch (error) {
      lastError = error;
      const err = error as Error;

      console.error(`üí• Error in attempt ${attempt}:`, err.message);

      if (attempt === maxRetries) {
        console.error(`‚ùå All ${maxRetries} attempts failed`);
        break;
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delay = calculateBackoffDelay(attempt);
      console.log(`‚è≥ Waiting ${delay}ms before next attempt...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }

  // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
  const totalTime = Date.now() - startTime;
  console.error(`\nüí• All retry attempts failed after ${formatDuration(totalTime)}:`);

  const err = lastError as Error;
  console.error("Final error type:", err.constructor?.name || "Unknown");
  console.error("Final error message:", err.message || "No message");

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
  if (err.message?.includes("fetch") || err.name === "TypeError") {
    console.error("üåê –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    console.error("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001");
    return "[Error: Proxy server unavailable - check if server is running]";
  }

  if ((err as ExtendedError).status === 529) {
    return "[Error: Claude API temporarily overloaded - please try again later]";
  }

  if ((err as ExtendedError).status === 429) {
    return "[Error: Rate limit exceeded - please wait before trying again]";
  }

  console.error(`===== ERROR END [${requestId}] =====\n`);
  return `[Error: ${err.message || "Unknown API error"}]`;
}
