import { getClaudeConfig, defaultConfig } from "./config";
//import { normalizeCards, mergeCardsByBaseForm } from "./utils/cardUtils";

import type { FlashcardNew, FlashcardOld } from "./types";

// –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const FLASHCARD_TOOL = {
  name: "create_flashcards",
  description: "–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–ª—ç—à–∫–∞—Ä—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
  input_schema: {
    type: "object",
    properties: {
      flashcards: {
        type: "array",
        items: {
          type: "object",
          properties: {
            front: { type: "string", description: "–õ–∞—Ç—ã—à—Å–∫–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–∫—Å—Ç–µ" },
            back: { type: "string", description: "–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º—ã" },
            base_form: { type: "string", description: "–ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞" },
            base_translation: { type: "string", description: "–ü–µ—Ä–µ–≤–æ–¥ –±–∞–∑–æ–≤–æ–π —Ñ–æ—Ä–º—ã" },
            word_form_translation: {
              type: "string",
              description: "–ü–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞",
            },
            original_phrase: { type: "string", description: "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ" },
            phrase_translation: { type: "string", description: "–ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" },
            text_forms: {
              type: "array",
              items: { type: "string" },
              description: "–§–æ—Ä–º—ã —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ",
            },
            item_type: {
              type: "string",
              enum: ["word", "phrase"],
              description: "–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞",
            },
          },
          required: [
            "front",
            "back",
            "base_form",
            "base_translation",
            "original_phrase",
            "phrase_translation",
          ],
        },
        description: "–ú–∞—Å—Å–∏–≤ —Ñ–ª—ç—à–∫–∞—Ä—Ç",
      },
    },
    required: ["flashcards"],
  },
};

// –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ useProcessing
function buildPrompt(
  chunk: string,
  chunkIndex: number,
  _totalChunks: number,
  contextChunks: string[]
): string {
  const config = defaultConfig.processing;
  const prevChunk = chunkIndex > 0 ? contextChunks[chunkIndex - 1] : "";
  const nextChunk = chunkIndex < contextChunks.length - 1 ? contextChunks[chunkIndex + 1] : "";
  const contextText =
    prevChunk || nextChunk
      ? `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${prevChunk}\n–°–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${nextChunk}`
      : "";

  return config.enablePhraseExtraction
    ? `Analyze these Latvian sentences systematically for Russian learners: "${chunk}"\n\n` +
        `STEP 1: Extract EVERY INDIVIDUAL WORD (mandatory):\n` +
        `- Include absolutely ALL words from the text, no exceptions\n` +
        `- Even small words like "ir", "ar", "≈°odien", "ƒºoti", "agri"\n` +
        `- Different forms of same word (grib AND negrib as separate entries)\n` +
        `- Pronouns, prepositions, adverbs - everything\n\n` +
        `STEP 2: Add meaningful phrases (bonus):\n` +
        `- Common collocations (iebiezinƒÅtais piens = —Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ)\n` +
        `- Compound expressions (dzim≈°anas diena = –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)\n` +
        `- Prepositional phrases (pie cep≈°anas = –∑–∞ –≤—ã–ø–µ—á–∫–æ–π)\n\n` +
        `CRITICAL REQUIREMENTS:\n` +
        `1. Count words in original text and ensure SAME number of individual words in output\n` +
        `2. Every single word must appear as individual entry\n` +
        `3. Then add phrases as additional entries\n` +
        `4. Mark each entry with item_type: "word" or "phrase"\n\n` +
        `For each item create:\n` +
        `- front: exact form from text\n` +
        `- back: Russian translation of this specific form\n` +
        `- base_form: dictionary form of the word\n` +
        `- base_translation: Russian translation of that dictionary form\n` +
        `- word_form_translation: Russian translation of the exact form from the text\n` +
        `- original_phrase: the sentence containing it\n` +
        `- phrase_translation: Russian translation of the sentence\n` +
        `- text_forms: [form from text]\n` +
        `- item_type: "word" or "phrase"\n\n` +
        `EXAMPLES:\n` +
        `Word: {"front": "agri", "back": "—Ä–∞–Ω–æ", "item_type": "word"}\n` +
        `Word: {"front": "≈°odien", "back": "—Å–µ–≥–æ–¥–Ω—è", "item_type": "word"}\n` +
        `Word: {"front": "grib", "back": "—Ö–æ—á–µ—Ç", "item_type": "word"}\n` +
        `Phrase: {"front": "dzim≈°anas diena", "back": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "item_type": "phrase"}\n\n` +
        `VERIFICATION: Text has approximately ${
          chunk.split(/\s+/).filter(w => w.length > 0).length
        } words.\n` +
        `Your response must include AT LEAST ${Math.floor(
          chunk.split(/\s+/).filter(w => w.length > 0).length * 0.9
        )} individual word entries.\n\n` +
        `Context: ${contextText}\n\n` +
        `Return valid JSON array of objects. Each object must include: front, back, base_form, base_translation, word_form_translation, original_phrase, phrase_translation, text_forms, item_type.\n` +
        `CRITICAL: Return ONLY a valid JSON array. No explanations, no text before or after.\n` +
        `Your response must start with [ and end with ]\n` +
        `DO NOT include any text like "Here is the analysis" or explanations.\n` +
        `RESPOND WITH PURE JSON ONLY!`
    : `Extract EVERY individual word from these Latvian sentences: "${chunk}"\n\n` +
        `CRITICAL: Include absolutely ALL words - no exceptions!\n` +
        `- Small words: ir, ar, uz, pie, ≈°odien, agri, ƒºoti\n` +
        `- All verb forms: grib, negrib, pamostas, dodas\n` +
        `- All pronouns: vi≈Üa, vi≈Üas, sev\n` +
        `- Everything without exception\n\n` +
        `Target: approximately ${
          chunk.split(/\s+/).filter(w => w.length > 0).length
        } word entries.\n\n` +
        `For each word create JSON object with:\n` +
        `- front: exact form from text\n` +
        `- back: Russian translation of this specific form\n` +
        `- base_form: dictionary form\n` +
        `- base_translation: Russian translation of dictionary form\n` +
        `- word_form_translation: Russian translation of exact form\n` +
        `- original_phrase: the sentence containing it\n` +
        `- phrase_translation: Russian translation of the sentence\n` +
        `- text_forms: [form from text]\n\n` +
        `Return valid JSON array. Start with [ and end with ]. No other text.\n` +
        `Context: ${contextText}`;
}

interface BatchCreateResponse {
  id: string;
}

interface BatchStatusResponse {
  processing_status: string;
  outputs?: { message?: { content?: { text: string }[] } }[];
}

export async function callClaudeBatch(chunks: string[]): Promise<{ batchId: string }> {
  const claudeConfig = getClaudeConfig("textProcessing");
  const requests = chunks.map((chunk, i) => ({
    custom_id: `chunk-${i}`,
    params: {
      model: claudeConfig.model,
      max_tokens: claudeConfig.maxTokens,
      temperature: claudeConfig.temperature,
      // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º tools –∏ tool_choice
      tools: [FLASHCARD_TOOL],
      tool_choice: { type: "tool", name: "create_flashcards" },
      messages: [
        {
          role: "user",
          content: buildPrompt(chunk, i, chunks.length, chunks),
        },
      ],
    },
  }));

  const res = await fetch("http://localhost:3001/api/claude/batch", {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ requests }),
  });

  if (!res.ok) {
    throw new Error(`Failed to create batch: ${res.status}`);
  }

  const data = (await res.json()) as BatchCreateResponse;
  console.log("‚úÖ Batch created with TOOL CALLING, id:", data.id);

  return { batchId: data.id };
}

export async function pollBatchStatus(batchId: string): Promise<BatchStatusResponse["outputs"]> {
  const maxAttempts = 20;

  for (let i = 0; i < maxAttempts; i++) {
    console.log(`üì° Polling batch status (attempt ${i + 1}/${maxAttempts})...`);
    const res = await fetch(`http://localhost:3001/api/claude/batch/${batchId}`);
    console.log("üîç Poll response status:", res.status);
    if (!res.ok) {
      throw new Error(`Failed to get batch status: ${res.status}`);
    }
    const data = (await res.json()) as BatchStatusResponse;
    console.log("üì¶ Poll data:", data);
    if (data.processing_status === "ended") {
      return data.outputs || [];
    }
    if (data.processing_status === "failed") {
      throw new Error("Batch failed");
    }
    const backoff = (attempt: number) => 1000 * Math.pow(1.5, attempt);
    await new Promise(r => setTimeout(r, backoff(i)));
  }
  throw new Error("Batch polling timeout");
}

export async function fetchBatchResults(batchId: string): Promise<FlashcardNew[]> {
  console.log(`üì• –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ batch: ${batchId}`);

  const res = await fetch(`http://localhost:3001/api/claude/batch/${batchId}/results`);
  if (!res.ok) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${res.status}`);
    throw new Error(`Failed to fetch batch results: ${res.status}`);
  }

  const text = await res.text();
  console.log(`üìÑ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–º ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

  const lines = text.split("\n").filter(Boolean);
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö`);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ —á–∞–Ω–∫–æ–≤
  const chunkResults = new Map<number, FlashcardOld[]>();
  let successCount = 0;
  let errorCount = 0;

  for (const line of lines) {
    try {
      const entry = JSON.parse(line);
      const customId = entry?.custom_id || "";

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å —á–∞–Ω–∫–∞ –∏–∑ custom_id
      const chunkIndex = parseInt(customId.replace("chunk-", ""));

      const result = entry?.result;

      if (result?.type === "succeeded") {
        const content = result.message?.content;

        if (!content || !Array.isArray(content)) {
          console.warn(`‚ö†Ô∏è –ù–µ—Ç content –¥–ª—è ${customId}`);
          continue;
        }

        // –ò—â–µ–º tool_use
        const toolUse = content.find((c: any) => c.type === "tool_use");

        if (toolUse?.input) {
          console.log(`üîß –ù–∞–π–¥–µ–Ω tool_use –≤ ${customId}`);

          // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          let flashcardsData = toolUse.input.flashcards || toolUse.input;

          // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º flashcards
          if (
            flashcardsData &&
            typeof flashcardsData === "object" &&
            !Array.isArray(flashcardsData)
          ) {
            if (flashcardsData.flashcards) {
              flashcardsData = flashcardsData.flashcards;
            }
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤
          if (!Array.isArray(flashcardsData)) {
            console.error(
              `‚ùå ${customId}: flashcards –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:`,
              typeof flashcardsData
            );
            console.log("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:", JSON.stringify(flashcardsData).substring(0, 200));

            // –ü—Ä–æ–±—É–µ–º fallback –Ω–∞ text parsing
            const textItem = content.find((c: any) => c.type === "text");
            if (textItem?.text) {
              console.log(`‚ö†Ô∏è Fallback –Ω–∞ text parsing –¥–ª—è ${customId}`);
              const cleaned = textItem.text
                .replace(/```json\s*/g, "")
                .replace(/```\s*$/g, "")
                .trim();

              try {
                flashcardsData = JSON.parse(cleaned);
              } catch (e) {
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å text –¥–ª—è ${customId}`);
                errorCount++;
                continue;
              }
            } else {
              errorCount++;
              continue;
            }
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –¥–ª—è –ø–æ—Ä—è–¥–∫–∞
          chunkResults.set(chunkIndex, flashcardsData);
          successCount++;
          console.log(`‚úÖ ${customId}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${flashcardsData.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        } else {
          // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ text parsing
          const textItem = content.find((c: any) => c.type === "text");
          if (textItem?.text) {
            console.log(`üìù ${customId}: –∏—Å–ø–æ–ª—å–∑—É–µ–º text parsing`);

            try {
              const cleaned = textItem.text
                .replace(/```json\s*/g, "")
                .replace(/```\s*$/g, "")
                .trim();

              const parsedCards = JSON.parse(cleaned);

              if (Array.isArray(parsedCards)) {
                chunkResults.set(chunkIndex, parsedCards);
                successCount++;
              } else {
                console.error(`‚ùå ${customId}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –º–∞—Å—Å–∏–≤`);
                errorCount++;
              }
            } catch (e) {
              console.error(`‚ùå ${customId}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`, e);
              errorCount++;
            }
          }
        }
      } else if (result?.type === "errored") {
        errorCount++;
        console.error(`‚ùå ${customId}: API –æ—à–∏–±–∫–∞:`, result.error);
      }
    } catch (error) {
      errorCount++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:`, error);
    }
  }

  // –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
  const sortedIndices = Array.from(chunkResults.keys()).sort((a, b) => a - b);
  const allCards: FlashcardNew[] = [];

  console.log(`üìë –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: ${sortedIndices.join(", ")}`);

  for (const index of sortedIndices) {
    const chunkCards = chunkResults.get(index) || [];

    for (const card of chunkCards) {
      const existingCard = allCards.find(c => c.base_form === card.base_form);

      if (existingCard) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        existingCard.contexts.push({
          original_phrase: card.original_phrase,
          phrase_translation: card.phrase_translation,
          text_forms: card.text_forms || [card.front],
          word_form_translations: [card.word_form_translation || card.back],
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        allCards.push({
          base_form: card.base_form,
          base_translation: card.base_translation,
          contexts: [
            {
              original_phrase: card.original_phrase,
              phrase_translation: card.phrase_translation,
              text_forms: card.text_forms || [card.front],
              word_form_translations: [card.word_form_translation || card.back],
            },
          ],
          visible: true,
        });
      }
    }
  }

  console.log(`\nüìä –ò–¢–û–ì–ò:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount} —á–∞–Ω–∫–æ–≤`);
  console.log(`   ‚ùå –û—à–∏–±–∫–∏: ${errorCount} —á–∞–Ω–∫–æ–≤`);
  console.log(`   üìö –ö–∞—Ä—Ç–æ—á–µ–∫: ${allCards.length}`);

  return allCards;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å TOOL CALLING
export async function processChunkWithTools(
  chunk: string,
  index: number,
  total: number,
  allChunks: string[]
): Promise<FlashcardOld[]> {
  const claudeConfig = getClaudeConfig("textProcessing");

  const response = await fetch("http://localhost:3001/api/claude", {
    method: "POST",
    headers: { "content-type": "application/json" },
    body: JSON.stringify({
      model: claudeConfig.model,
      max_tokens: claudeConfig.maxTokens,
      temperature: claudeConfig.temperature,
      tools: [FLASHCARD_TOOL],
      tool_choice: { type: "tool", name: "create_flashcards" },
      messages: [
        {
          role: "user",
          content: buildPrompt(chunk, index, total, allChunks),
        },
      ],
    }),
  });

  if (!response.ok) {
    throw new Error(`API request failed: ${response.status}`);
  }

  const data = await response.json();

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tool_use
  const toolUse = data.content?.find((c: any) => c.type === "tool_use");

  if (toolUse?.input?.flashcards) {
    console.log(`‚úÖ –ß–∞–Ω–∫ ${index + 1}/${total} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ TOOL CALLING`);
    return toolUse.input.flashcards;
  }

  // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
  const textContent = data.content?.find((c: any) => c.type === "text");
  if (textContent?.text) {
    console.warn(`‚ö†Ô∏è Fallback –Ω–∞ text parsing –¥–ª—è —á–∞–Ω–∫–∞ ${index + 1}`);
    const cleaned = textContent.text
      .replace(/```json\s*/g, "")
      .replace(/```\s*$/g, "")
      .trim();
    return JSON.parse(cleaned);
  }

  throw new Error("No flashcards in response");
}
