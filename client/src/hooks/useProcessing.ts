import React from "react";
import type { FlashcardNew, FlashcardOld, AppMode, AppState, ProcessingProgress } from "../types";
import {
  normalizeCards,
  mergeCardsByBaseForm,
  saveFormTranslations,
  splitIntoSentences,
} from "../utils/cardUtils";

// –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { useRetryQueue } from "./useRetryQueue";
import { analyzeError, type ErrorInfo } from "../utils/error-handler";
import { apiClient } from "../services/ApiClient";
import { callClaudeBatch, fetchBatchResults } from "../claude-batch";

// –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–†–û–ï–ö–¢–ê
import { defaultConfig } from "../config";

import { ErrorType } from "../utils/error-handler";

interface ApiCardContext {
  latvian?: string;
  russian?: string;
  word_in_context?: string;
}

interface ApiCard {
  id?: string;
  base_form?: string;
  front?: string;
  base_translation?: string;
  translations?: string[];
  text_forms?: string[];
  word_form_translation?: string;
  word_form_translations?: string[];
  contexts?: ApiCardContext[];
}

export function useProcessing(
  inputText: string,
  setMode: (mode: AppMode) => void,
  setInputText?: (text: string) => void,
  setCurrentIndex?: (index: number) => void,
  setFlipped?: (flipped: boolean) => void
) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [state, setState] = React.useState<AppState>("input");
  const [flashcards, setFlashcards] = React.useState<FlashcardNew[]>([]);
  const [translationText, setTranslationText] = React.useState("");
  const [processingProgress, setProcessingProgress] = React.useState<ProcessingProgress>({
    current: 0,
    total: 0,
    step: "",
  });
  const [formTranslations, setFormTranslations] = React.useState<Map<string, string>>(new Map());
  const [isBatchEnabled, setBatchEnabled] = React.useState(false);
  const [batchId, setBatchId] = React.useState<string | null>(null);
  const [batchError, setBatchError] = React.useState<Error | null>(null);

  // –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è retry queue –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const retryQueue = useRetryQueue();

  // –ù–û–í–û–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
  React.useEffect(() => {
    const handleRequestError = (eventData: {
      errorInfo: ErrorInfo;
      chunkInfo?: { description?: string; originalChunk?: string } | string;
      willRetry: boolean;
    }) => {
      const { errorInfo, chunkInfo, willRetry } = eventData;

      console.log("üîç ApiClient error event:", {
        errorType: errorInfo.type,
        willRetry,
        chunkInfo: chunkInfo?.description || "unknown-chunk",
      });

      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî —Å—Ä–∞–∑—É –∫–ª–∞–¥–µ–º –≤ –æ—á–µ—Ä–µ–¥—å,
      // —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
      if (
        errorInfo.type === ErrorType.NETWORK_ERROR ||
        errorInfo.type === ErrorType.PROXY_UNAVAILABLE
      ) {
        retryQueue.enqueue(
          chunkInfo?.originalChunk || "",
          errorInfo,
          chunkInfo?.description || `chunk-${Date.now()}`
        );
      } else if (!willRetry && errorInfo.retryable && chunkInfo?.originalChunk) {
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫");
        retryQueue.enqueue(
          chunkInfo.originalChunk,
          errorInfo,
          chunkInfo.description || `chunk-${Date.now()}`
        );
      }
    };

    const handleRateLimit = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è Rate limit –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
    };

    const handleApiOverload = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient
    apiClient.on("requestError", handleRequestError);
    apiClient.on("rateLimited", handleRateLimit);
    apiClient.on("apiOverloaded", handleApiOverload);

    return () => {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      apiClient.off("requestError", handleRequestError);
      apiClient.off("rateLimited", handleRateLimit);
      apiClient.off("apiOverloaded", handleApiOverload);
    };
  }, [retryQueue.enqueue]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const saveForms = React.useCallback((cards: FlashcardOld[]) => {
    setFormTranslations(prev => saveFormTranslations(cards, prev));
  }, []);

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –æ—à–∏–±–æ–∫
  const processChunkWithContext = React.useCallback(
    async (
      chunk: string,
      chunkIndex: number,
      totalChunks: number,
      contextChunks?: string[]
    ): Promise<FlashcardNew[]> => {
      console.log(
        `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${chunkIndex + 1}/${totalChunks}: "${chunk.substring(0, 50)}..."`
      );

      // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º contextChunks –Ω–∞ undefined –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const safeContextChunks = contextChunks || [];

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
      let contextText = "";
      if (safeContextChunks.length > 1) {
        const prevChunk = chunkIndex > 0 ? safeContextChunks[chunkIndex - 1] : "";
        const nextChunk =
          chunkIndex < safeContextChunks.length - 1 ? safeContextChunks[chunkIndex + 1] : "";

        if (prevChunk || nextChunk) {
          contextText = `\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${prevChunk}\n–°–ª–µ–¥—É—é—â–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç: ${nextChunk}`;
        }
      }

      // –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
      const config = defaultConfig.processing;

      const prompt = config.enablePhraseExtraction
        ? // –ù–û–í–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢: —Å—Ç—Ä–æ–≥–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ—Ç–µ
          `Analyze these Latvian sentences systematically for Russian learners: "${chunk}"\n\n` +
          `STEP 1: Extract EVERY INDIVIDUAL WORD (mandatory):\n` +
          `- Include absolutely ALL words from the text, no exceptions\n` +
          `- Even small words like "ir", "ar", "≈°odien", "ƒºoti", "agri"\n` +
          `- Different forms of same word (grib AND negrib as separate entries)\n` +
          `- Pronouns, prepositions, adverbs - everything\n\n` +
          `STEP 2: Add meaningful phrases (bonus):\n` +
          `- Common collocations (iebiezinƒÅtais piens = —Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ)\n` +
          `- Compound expressions (dzim≈°anas diena = –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)\n` +
          `- Prepositional phrases (pie cep≈°anas = –∑–∞ –≤—ã–ø–µ—á–∫–æ–π)\n\n` +
          `CRITICAL REQUIREMENTS:\n` +
          `1. Count words in original text and ensure SAME number of individual words in output\n` +
          `2. Every single word must appear as individual entry\n` +
          `3. Then add phrases as additional entries\n` +
          `4. Mark each entry with item_type: "word" or "phrase"\n\n` +
          `For each item create:\n` +
          `- front: exact form from text\n` +
          `- back: Russian translation of this specific form\n` +
          `- base_form: dictionary form of the word\n` +
          `- base_translation: Russian translation of that dictionary form\n` +
          `- word_form_translation: Russian translation of the exact form from the text\n` +
          `- original_phrase: the sentence containing it\n` +
          `- phrase_translation: Russian translation of the sentence\n` +
          `- text_forms: [form from text]\n` +
          `- item_type: "word" or "phrase"\n\n` +
          `EXAMPLES:\n` +
          `Word: {"front": "agri", "back": "—Ä–∞–Ω–æ", "item_type": "word"}\n` +
          `Word: {"front": "≈°odien", "back": "—Å–µ–≥–æ–¥–Ω—è", "item_type": "word"}\n` +
          `Word: {"front": "grib", "back": "—Ö–æ—á–µ—Ç", "item_type": "word"}\n` +
          `Phrase: {"front": "dzim≈°anas diena", "back": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "item_type": "phrase"}\n\n` +
          `VERIFICATION: Text has approximately ${chunk.split(/\s+/).filter(w => w.length > 0).length} words.\n` +
          `Your response must include AT LEAST ${Math.floor(chunk.split(/\s+/).filter(w => w.length > 0).length * 0.9)} individual word entries.\n\n` +
          `Context: ${contextText}\n\n` +
          `Return valid JSON array of objects. Each object must include: front, back, base_form, base_translation, word_form_translation, original_phrase, phrase_translation, text_forms, item_type.\n` +
          `CRITICAL: Return ONLY a valid JSON array. No explanations, no text before or after.\n` +
          `Your response must start with [ and end with ]\n` +
          `DO NOT include any text like "Here is the analysis" or explanations.\n` +
          `RESPOND WITH PURE JSON ONLY!`
        : // –°–¢–ê–†–´–ô –ü–†–û–ú–ü–¢: —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ (—Ç–æ–∂–µ —É–ª—É—á—à–µ–Ω–Ω—ã–π)
          `Extract EVERY individual word from these Latvian sentences: "${chunk}"\n\n` +
          `CRITICAL: Include absolutely ALL words - no exceptions!\n` +
          `- Small words: ir, ar, uz, pie, ≈°odien, agri, ƒºoti\n` +
          `- All verb forms: grib, negrib, pamostas, dodas\n` +
          `- All pronouns: vi≈Üa, vi≈Üas, sev\n` +
          `- Everything without exception\n\n` +
          `Target: approximately ${chunk.split(/\s+/).filter(w => w.length > 0).length} word entries.\n\n` +
          `Create vocabulary cards for Russian learners:\n` +
          `- front: exact word form from text\n` +
          `- back: Russian translation of this exact form\n` +
          `- base_form: dictionary form of the word\n` +
          `- base_translation: Russian translation of that dictionary form\n` +
          `- word_form_translation: Russian translation of the exact form from the text\n` +
          `- original_phrase: the sentence containing the word\n` +
          `- phrase_translation: Russian translation of the sentence\n` +
          `- text_forms: array with the word form\n` +
          `- item_type: "word"\n\n` +
          `CRITICAL: word_form_translation must match the specific form.\n` +
          `Example: "mammai" ‚Üí "–º–∞–º–µ" (not "–º–∞–º–∞")\n\n` +
          `Context: ${contextText}\n\n` +
          `Return valid JSON array of objects. Each object must include: front, back, base_form, base_translation, word_form_translation, original_phrase, phrase_translation, text_forms, item_type.\n` +
          `Your response must start with [ and end with ]\n` +
          `DO NOT include any text like "Here is the analysis" or explanations.\n` +
          `RESPOND WITH PURE JSON ONLY!`;

      try {
        // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º ApiClient —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞–Ω–∫–µ
        const raw = await apiClient.request(prompt, {
          chunkInfo: {
            description: `chunk-${chunkIndex + 1}-of-${totalChunks}`,
            originalChunk: chunk,
            index: chunkIndex,
            total: totalChunks,
          },
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º)
        if (raw.startsWith("[ERROR:")) {
          const errorData = JSON.parse(raw.slice(7, -1));
          const errorInfo = analyzeError(errorData);

          console.log("üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:", errorInfo.userMessage);

          // –°–æ–∑–¥–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const errorCard: FlashcardNew = {
            id: `error_${Date.now()}_${Math.random()}`,
            base_form: `error_${errorInfo.type}_${Date.now()}`,
            word_type: "other",
            translations: [errorInfo.userMessage],
            contexts: [
              {
                latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
                russian: errorInfo.recommendation,
                word_in_context: errorInfo.type,
              },
            ],
            visible: true,
            needsReprocessing: true, // –§–ª–∞–≥ –¥–ª—è APIStatusBar
          };

          return [errorCard];
        }

        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏ —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã
        if (raw.startsWith("[Error:") || raw.includes("Error: Pro")) {
          console.log("üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:", raw.substring(0, 100));
          throw new Error("üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude
        const cleanedText = raw
          .replace(/```json\s*/g, "")
          .replace(/```\s*$/g, "")
          .trim();

        // üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏
        if (cleanedText.startsWith("[Error:") || cleanedText.includes("Error:")) {
          throw new Error(`üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${cleanedText.substring(0, 100)}`);
        }

        const parsed = JSON.parse(cleanedText);
        const cardsArray = Array.isArray(parsed) ? parsed : [parsed];

        const oldCards = cardsArray.flatMap((card: ApiCard) => {
          const baseForm = card.base_form || card.front || "";
          const baseTrans = card.base_translation || card.translations?.[0] || "";
          const textForms = Array.isArray(card.text_forms)
            ? card.text_forms
            : card.front
              ? [card.front]
              : [];
          const formTrans =
            card.word_form_translation ||
            (Array.isArray(card.word_form_translations)
              ? card.word_form_translations[0]
              : undefined) ||
            card.translations?.[0] ||
            "";

          if (!Array.isArray(card.contexts) || card.contexts.length === 0) {
            return [
              {
                front: card.front || baseForm,
                back: formTrans,
                word_form_translation: formTrans,
                base_form: baseForm,
                base_translation: baseTrans,
                original_phrase: card.original_phrase || chunk,
                phrase_translation: card.phrase_translation || "",
                text_forms: textForms,
                visible: true,
              } as FlashcardOld,
            ];
          }

          return card.contexts.map(ctx => ({
            front: card.front || baseForm,
            back: formTrans,
            word_form_translation: formTrans,
            base_form: baseForm,
            base_translation: baseTrans,
            original_phrase: ctx.latvian || "",
            phrase_translation: ctx.russian || "",
            text_forms: textForms,
            visible: true,
          })) as FlashcardOld[];
        });

        const normalizedCards = normalizeCards(oldCards, chunk);
        const processedCards = mergeCardsByBaseForm(normalizedCards);

        console.log(
          `‚úÖ –ß–∞–Ω–∫ ${chunkIndex + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${processedCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        saveForms(normalizedCards);

        return processedCards;
      } catch (error) {
        // –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º error-handler –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏
        const errorInfo = analyzeError(error);

        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, errorInfo.userMessage);

        // –°–æ–∑–¥–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorCard: FlashcardNew = {
          id: `error_${Date.now()}_${Math.random()}`,
          base_form: errorInfo.userMessage,
          base_translation: errorInfo.recommendation,
          word_type: "other",
          translations: [errorInfo.userMessage],
          contexts: [
            {
              latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
              russian: errorInfo.recommendation,
              word_in_context: errorInfo.type,
            },
          ],
          visible: true,
          needsReprocessing: true, // –§–ª–∞–≥ –¥–ª—è APIStatusBar
        };

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ retryable, –æ–Ω–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ retry queue —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è ApiClient
        // –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º error –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return [errorCard];
      }
    },
    [saveForms]
  );

  const generateTranslation = React.useCallback((cards: FlashcardNew[]) => {
    const translations = new Set<string>();
    cards.forEach(card => {
      card.contexts.forEach(ctx => {
        const text = ctx.phrase_translation?.trim();
        if (text) translations.add(text);
      });
    });
    setTranslationText(Array.from(translations).join(" "));
  }, []);

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry queue —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const processRetryQueue = React.useCallback(
    async (onProgress?: (current: number, total: number) => void) => {
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É retry queue");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setState("loading");

      // –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressCallback = (current: number, total: number) => {
        setProcessingProgress({
          current,
          total,
          step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${current}/${total}`,
        });
        onProgress?.(current, total);
      };

      try {
        const results = await retryQueue.processQueue(progressCallback);

        console.log("üèÅ Retry queue –æ–±—Ä–∞–±–æ—Ç–∞–Ω:", results);

        if (results.cards && results.cards.length > 0) {
          results.cards.forEach(card => (card.visible = true));
          const cleanedPrev = flashcards.filter(
            c => !(c as { needsReprocessing?: boolean }).needsReprocessing
          );
          const merged = mergeCardsByBaseForm([...cleanedPrev, ...results.cards]);
          setFlashcards(merged);
          generateTranslation(merged);
          setMode("flashcards");
          setCurrentIndex?.(0);
          setFlipped?.(false);
        }

        if (results.successful > 0) {
          setState("ready");
          setProcessingProgress({ current: 0, total: 0, step: "ready" });
        }

        return results;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ retry queue:", error);
        throw error;
      } finally {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setProcessingProgress({ current: 0, total: 0, step: "" });
      }
    },
    [retryQueue.processQueue, flashcards, setFlashcards, setState, setMode, generateTranslation]
  );

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—á–∞–Ω–∫-–∑–∞-—á–∞–Ω–∫–æ–º)
  const processText = React.useCallback(async () => {
    if (!inputText.trim()) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞:", inputText.substring(0, 100) + "...");

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    setState("loading");
    setFlashcards([]);
    setTranslationText("");
    setFormTranslations(new Map());
    setBatchId(null);
    setBatchError(null);

    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const sentences = splitIntoSentences(inputText);
      console.log(`üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∏ –ø–æ 3
      const chunks = [];
      for (let i = 0; i < sentences.length; i += 3) {
        const chunk = sentences
          .slice(i, i + 3)
          .join(" ")
          .trim();
        if (chunk) chunks.push(chunk);
      }

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      if (isBatchEnabled && chunks.length > 1000) {
        alert("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
        setState("input");
        return;
      }

      setProcessingProgress({
        current: 0,
        total: chunks.length,
        step: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...",
      });

      const allCards: FlashcardNew[] = [];

      if (isBatchEnabled) {
        setProcessingProgress({ current: 0, total: chunks.length, step: "–°–æ–∑–¥–∞–Ω–∏–µ batch..." });
        try {
          const { batchId: createdBatchId } = await callClaudeBatch(chunks);
          setBatchId(createdBatchId);

          const history = JSON.parse(localStorage.getItem("batchHistory") || "[]");
          history.unshift(createdBatchId);
          localStorage.setItem("batchHistory", JSON.stringify(history.slice(0, 20)));

          const resultCards = await fetchBatchResults(createdBatchId);
          resultCards.forEach(card => (card.visible = true));

          const mergedCards = mergeCardsByBaseForm(resultCards);
          setFlashcards(mergedCards);
          generateTranslation(mergedCards);
        } catch (e) {
          console.error("‚ùå Batch processing failed:", e);
          setBatchError(e as Error);
          setState("input");
          return;
        }
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (let i = 0; i < chunks.length; i++) {
          setProcessingProgress({
            current: i + 1,
            total: chunks.length,
            step: `–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${chunks.length}`,
          });

          console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${i + 1}/${chunks.length}`);

          const chunkCards = await processChunkWithContext(chunks[i], i, chunks.length, chunks);

          if (chunkCards && chunkCards.length > 0) {
            allCards.push(...chunkCards);
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ base_form
      const mergedCards = mergeCardsByBaseForm(allCards);

      console.log(
        `üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${mergedCards.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${allCards.length} –æ–±—â–∏—Ö`
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setFlashcards(mergedCards);
      generateTranslation(mergedCards);
      setMode("flashcards");
      setCurrentIndex?.(0);
      setFlipped?.(false);
      setState("ready");
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
      setState("input");
      setProcessingProgress({
        current: 0,
        total: 0,
        step: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      });
    }
  }, [inputText, processChunkWithContext, setMode, generateTranslation, isBatchEnabled, saveForms]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const updateCard = React.useCallback((index: number, field: string, value: unknown) => {
    setFlashcards(prev => {
      const copy = [...prev];
      if (copy[index]) {
        (copy[index] as unknown as Record<string, unknown>)[field] = value;
      }
      return copy;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const toggleCardVisibility = React.useCallback((index: number) => {
    setFlashcards(prev => {
      const copy = [...prev];
      if (copy[index]) {
        copy[index] = { ...copy[index], visible: !copy[index].visible };
      }
      return copy;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const deleteCard = React.useCallback((index: number) => {
    setFlashcards(prev => prev.filter((_, i) => i !== index));
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const addNewCard = React.useCallback(() => {
    const newCard: FlashcardNew = {
      base_form: "",
      base_translation: "",
      contexts: [],
      visible: true,
    } as FlashcardNew;
    setFlashcards(prev => [newCard, ...prev]);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const clearAll = React.useCallback(() => {
    console.log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");

    setFlashcards([]);
    setTranslationText("");
    setFormTranslations(new Map());
    setState("input");
    setProcessingProgress({ current: 0, total: 0, step: "" });

    if (setInputText) {
      setInputText("");
    }

    // –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º retry queue –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    retryQueue.clearQueue();
  }, [retryQueue.clearQueue, setInputText]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,

    // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞)
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,

    // Batch —Ä–µ–∂–∏–º
    isBatchEnabled,
    setBatchEnabled,
    batchId,
    batchError,

    // –ù–û–í–û–ï: Retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    processRetryQueue,
    retryQueue: {
      queue: retryQueue.queue,
      stats: retryQueue.stats,
      isProcessing: retryQueue.isProcessing,
      clearQueue: retryQueue.clearQueue,
      removeFromQueue: retryQueue.removeFromQueue,
    },
  };
}
