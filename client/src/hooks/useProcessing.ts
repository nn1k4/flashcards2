// client/src/hooks/useProcessing.ts
import React from "react";
import type { FlashcardNew, FlashcardOld, AppMode, AppState, ProcessingProgress } from "../types";
import { mergeCardsByBaseForm, saveFormTranslations, splitIntoSentences } from "../utils/cardUtils";

// Retry-–æ—á–µ—Ä–µ–¥—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
import { useRetryQueue } from "./useRetryQueue";
import { analyzeError, type ErrorInfo, ErrorType } from "../utils/error-handler";

// –ö–ª–∏–µ–Ω—Ç —Å–æ–±—ã—Ç–∏–π/—Ä–µ—Ç—Ä–∞–µ–≤
import { apiClient } from "../services/ApiClient";

// Batch + –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π tool-calling
import {
  callClaudeBatch,
  fetchBatchResults,
  processChunkWithTools,
  type BatchProgress,
} from "../claude-batch";

/* =============================================================================
 * –ù –û –† –ú –ê –õ –ò –ó –ê –¶ –ò –Ø  /  –Ø –ö –û –† –Ø  /  –° –ë –û –† –ö –ê   –ü –ï –† –ï –í –û –î –ê
 * ============================================================================= */

/** –°–∫–ª–µ–π –ø–µ—Ä–µ–Ω–æ—Å—ã, —É–±–µ—Ä–∏ ¬´—à—É–º¬ª (—Å–∫–æ–±–∫–∏/–∫–∞–≤—ã—á–∫–∏/—Ç–∏—Ä–µ), –Ω–æ—Ä–º–∞–ª–∏–∑—É–π –ø—Ä–æ–±–µ–ª—ã */
const norm = (s: string) =>
  (s ?? "")
    .replace(/\s*\n\s*/g, " ")
    .replace(/[¬´¬ª‚Äú‚Äù"(){}\[\]‚Äî‚Äì-]/g, " ")
    .replace(/\s+/g, " ")
    .trim();

/** –ö–ª—é—á —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ */
const normKey = (s: string) =>
  norm(s)
    .toLowerCase()
    .replace(/[.?!‚Ä¶:;]+$/u, "")
    .trim();

/** –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç) */
const ensureSentenceEnding = (s: string) => (/[.?!‚Ä¶]$/.test(s) ? s : s + ".");

/** –î–æ—Å—Ç–∞—ë–º RU-–ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π) */
const ctxRussian = (ctx: any): string =>
  norm(
    (ctx?.russian ??
      ctx?.phrase_translation ??
      ctx?.sentence_translation ??
      ctx?.translation ??
      "") as string
  );

/** –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º sid –≤ contexts —Ç–∞–º, –≥–¥–µ –µ–≥–æ –Ω–µ—Ç (–ø–æ —Ç–æ—á–Ω–æ–º—É LV-—Å–æ–≤–ø–∞–¥–µ–Ω–∏—é) */
function attachSidIfMissing(cards: FlashcardNew[], sentencesNorm: string[]): FlashcardNew[] {
  const sentenceKeys = sentencesNorm.map(normKey);
  return (cards || []).map(card => {
    const ctxs = Array.isArray(card?.contexts) ? card.contexts : [];
    const newCtxs = ctxs.map((ctx: any) => {
      // –µ—Å–ª–∏ sid –≤–∞–ª–∏–¥–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ LV
      if (Number.isFinite(ctx?.sid)) {
        const sid = Number(ctx.sid);
        return sid >= 0 && sid < sentencesNorm.length ? ctx : { ...ctx, sid: undefined };
      }
      const lvK = normKey(ctx?.latvian || "");
      if (!lvK) return { ...ctx };
      const idx = sentenceKeys.indexOf(lvK);
      return idx >= 0 ? { ...ctx, sid: idx } : { ...ctx };
    });
    return { ...(card as any), contexts: newCtxs } as FlashcardNew;
  });
}

/** –í—ã–±–æ—Ä –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ RU-–ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ */
function pickCanonicalTranslation(rus: string[]): string | undefined {
  const freq = new Map<string, { count: number; original: string }>();
  for (const r of rus) {
    const k = normKey(r);
    if (!k) continue;
    const entry = freq.get(k);
    if (entry) {
      entry.count++;
      if (r.length > entry.original.length) entry.original = r;
    } else {
      freq.set(k, { count: 1, original: r });
    }
  }
  if (freq.size === 0) return undefined;

  let best: { count: number; original: string } | null = null;
  for (const [, v] of freq) {
    if (
      !best ||
      v.count > best.count ||
      (v.count === best.count && v.original.length > best.original.length)
    ) {
      best = { count: v.count, original: v.original };
    }
  }
  return best ? ensureSentenceEnding(best.original) : undefined;
}

/** –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ –ø–æ —è–∫–æ—Ä—è–º —Å–æ–±—Ä–∞—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ RU –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω) */
function fallbackUniqueRussian(cards: FlashcardNew[]): string {
  return Array.from(
    new Set(
      (cards as any[]).flatMap(c => ((c?.contexts as any[]) || []).map(ctxRussian)).filter(Boolean)
    )
  ).join(" ");
}

/* =============================================================================
 * –ï –î –ò –ù –´ –ô   –ò –° –¢ –û –ß –ù –ò –ö   –ò –° –¢ –ò –ù –´   –î –õ –Ø   –ü –û –† –Ø –î –ö –ê
 * ============================================================================= */

/** –°—Ç—Ä–æ–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å–∏–¥–∏—Ä—É–µ–º—ã–π –ø–æ—Ä—è–¥–æ–∫ + —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–µ–≤–æ–¥) */
type SentenceRow = {
  index: number;
  original: string; // –∫–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
  normalized: string; // –∫–∞–∫ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å
  translation: string; // RU –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
};

/** –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É sid -> –≤–∞—Ä–∏–∞–Ω—Ç—ã RU –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ */
function collectRuBySid(cards: FlashcardNew[], totalSentences: number): Map<number, string[]> {
  const ruBySid = new Map<number, string[]>();
  for (const c of cards || []) {
    for (const ctx of (c.contexts as any[]) || []) {
      const sid = Number(ctx?.sid);
      if (!Number.isFinite(sid) || sid < 0 || sid >= totalSentences) continue;
      const ru = ctxRussian(ctx);
      if (!ru) continue;
      const arr = ruBySid.get(sid) || [];
      arr.push(ru);
      ruBySid.set(sid, arr);
    }
  }
  return ruBySid;
}

/** –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ ruBySid (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ) */
function fillSentenceTranslations(
  sentences: SentenceRow[],
  ruBySid: Map<number, string[]>
): SentenceRow[] {
  return sentences.map(row => {
    const options = ruBySid.get(row.index) || [];
    const chosen = pickCanonicalTranslation(options) || row.translation || "";
    return { ...row, translation: chosen };
  });
}

/** –°–∫–ª–µ–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π */
function joinFullTranslation(sentences: SentenceRow[]): string {
  return sentences
    .map(s => (s.translation || "").trim())
    .filter(s => s.length > 0)
    .join(" ");
}

/* =============================================================================
 *   –û –° –ù –û –í –ù –û –ô   –• –£ –ö
 * ============================================================================= */

export function useProcessing(
  inputText: string,
  setMode: (mode: AppMode) => void,
  setInputText?: (text: string) => void,
  setCurrentIndex?: (index: number) => void,
  setFlipped?: (flipped: boolean) => void
) {
  // UI-—Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [state, setState] = React.useState<AppState>("input");
  const [flashcards, setFlashcards] = React.useState<FlashcardNew[]>([]);
  const [translationText, setTranslationText] = React.useState("");

  const [processingProgress, setProcessingProgress] = React.useState<ProcessingProgress>({
    current: 0,
    total: 0,
    step: "",
  });

  const [formTranslations, setFormTranslations] = React.useState<Map<string, string>>(new Map());
  const [isBatchEnabled, setBatchEnabled] = React.useState(false);
  const [batchId, setBatchId] = React.useState<string | null>(null);
  const [batchError, setBatchError] = React.useState<Error | null>(null);

  // –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º
  const [sentences, setSentences] = React.useState<SentenceRow[]>([]);

  // –¢–æ–∫–µ–Ω –∑–∞–ø—É—Å–∫–∞ ‚Äî –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–æ–∫
  const runTokenRef = React.useRef(0);
  const nextRunToken = () => ++runTokenRef.current;

  // –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è retry-–æ—á–µ—Ä–µ–¥—å
  const retryQueue = useRetryQueue();

  /* ---------------------------- –ü–æ–¥–ø–∏—Å–∫–∏ ApiClient ---------------------------- */
  React.useEffect(() => {
    const handleRequestError = (eventData: {
      errorInfo: ErrorInfo;
      chunkInfo?: { description?: string; originalChunk?: string } | string;
      willRetry: boolean;
    }) => {
      const { errorInfo, chunkInfo, willRetry } = eventData;
      console.log("üîç ApiClient error event:", {
        errorType: errorInfo.type,
        willRetry,
        chunk: (chunkInfo as any)?.description || "unknown",
      });

      if (
        errorInfo.type === ErrorType.NETWORK_ERROR ||
        errorInfo.type === ErrorType.PROXY_UNAVAILABLE
      ) {
        retryQueue.enqueue(
          (chunkInfo as any)?.originalChunk || "",
          errorInfo,
          (chunkInfo as any)?.description || `chunk-${Date.now()}`
        );
      } else if (!willRetry && errorInfo.retryable && (chunkInfo as any)?.originalChunk) {
        retryQueue.enqueue(
          (chunkInfo as any).originalChunk,
          errorInfo,
          (chunkInfo as any).description || `chunk-${Date.now()}`
        );
      }
    };

    const handleRateLimit = (errorInfo: ErrorInfo) =>
      console.warn("‚ö†Ô∏è Rate limit:", errorInfo.userMessage);
    const handleApiOverload = (errorInfo: ErrorInfo) =>
      console.warn("‚ö†Ô∏è API overloaded:", errorInfo.userMessage);

    apiClient.on("requestError", handleRequestError);
    apiClient.on("rateLimited", handleRateLimit);
    apiClient.on("apiOverloaded", handleApiOverload);

    return () => {
      apiClient.off("requestError", handleRequestError);
      apiClient.off("rateLimited", handleRateLimit);
      apiClient.off("apiOverloaded", handleApiOverload);
    };
  }, [retryQueue.enqueue]);

  /* --------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–ª–æ–≤–æ—Ñ–æ—Ä–º ---------------------- */
  const saveForms = React.useCallback((cards: FlashcardNew[] | FlashcardOld[]) => {
    setFormTranslations(prev => saveFormTranslations(cards as any, prev));
  }, []);

  /* -------------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ) -------------------- */
  const processChunkWithContextCb = React.useCallback(
    async (
      chunk: string,
      chunkIndex: number,
      totalChunks: number,
      contextChunks?: string[]
    ): Promise<FlashcardNew[]> => {
      const head = `üîÑ –ß–∞–Ω–∫ ${chunkIndex + 1}/${totalChunks}`;
      console.log(`${head}: "${chunk.substring(0, 80)}${chunk.length > 80 ? "..." : ""}"`);

      try {
        const cards = await processChunkWithTools(
          chunk,
          chunkIndex,
          totalChunks,
          contextChunks || []
        );

        // merge –ø–æ —á–∞–Ω–∫—É + —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã
        const mergedPerChunk = mergeCardsByBaseForm(cards as any) as FlashcardNew[];
        saveForms(mergedPerChunk);

        console.log(`‚úÖ ${head} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${mergedPerChunk.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        return mergedPerChunk;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${head}:`, error);
        const errorInfo = analyzeError(error);

        const errorCard: FlashcardNew = {
          base_form: errorInfo.userMessage,
          base_translation: errorInfo.recommendation,
          contexts: [
            {
              latvian: chunk.substring(0, 120) + (chunk.length > 120 ? "..." : ""),
              russian: errorInfo.recommendation,
              // –ø–æ–¥—Å–≤–µ—Ç–∏–º —Ç–∏–ø –æ—à–∏–±–∫–∏
              word_in_context: errorInfo.type,
              sid: chunkIndex, // –ø—Ä–∏–≤—è–∂–µ–º –∫ –º–µ—Å—Ç—É
            } as any,
          ],
          visible: true,
          // @ts-expect-error –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø—Ä–∏ retry
          needsReprocessing: true,
        } as any;

        return [errorCard];
      }
    },
    [saveForms]
  );

  /* ---------------------- –¢–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ batch-–ø—Ä–æ—Ü–µ—Å—Å–∞ ---------------------- */
  const batchStepText = React.useCallback((p: BatchProgress, total: number) => {
    const { processing, succeeded, errored, canceled, expired } = p.request_counts;
    const done = succeeded + errored + canceled + expired;
    return `Batch ${p.processing_status}: ${done}/${total} (ok ${succeeded}, err ${errored}, canceled ${canceled}, expired ${expired}, processing ${processing})`;
  }, []);

  /* =============================================================================
   *                    –û –° –ù –û –í –ù –ê –Ø   –û –ë –† –ê –ë –û –¢ –ö –ê
   * ============================================================================= */
  const processText = React.useCallback(async () => {
    const text = inputText?.trim();
    if (!text) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    const runId = nextRunToken();

    console.log(
      "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞:",
      text.substring(0, 100) + (text.length > 100 ? "‚Ä¶" : "")
    );
    setState("loading");

    // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
    setFlashcards([]);
    setTranslationText("");
    setFormTranslations(new Map());
    setBatchId(null);
    setBatchError(null);

    try {
      // 1) –†–∞–∑–±–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–µ–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –ø–æ—Ä—è–¥–∫–∞)
      const sentencesRaw = splitIntoSentences(text);
      const initialSentences: SentenceRow[] = sentencesRaw
        .map(s => s || "")
        .map((s, idx) => ({
          index: idx,
          original: s.trim(),
          normalized: norm(s),
          translation: "",
        }))
        .filter(r => r.normalized.length > 0);

      if (runTokenRef.current !== runId) return;
      setSentences(initialSentences);

      console.log(`üìù –†–∞–∑–±–∏—Ç–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: ${initialSentences.length}`);

      // –ß–∞–Ω–∫–∏ 1:1 —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
      const chunks: string[] = initialSentences.map(r => r.normalized);
      if (runTokenRef.current !== runId) return;
      console.log(`üì¶ –ß–∞–Ω–∫–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${chunks.length}`);

      if (isBatchEnabled && chunks.length > 1000) {
        alert("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
        setState("input");
        return;
      }

      setProcessingProgress({ current: 0, total: chunks.length, step: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞‚Ä¶" });

      /* ----------------------------- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ----------------------------- */
      if (isBatchEnabled) {
        setProcessingProgress({ current: 0, total: chunks.length, step: "–°–æ–∑–¥–∞–Ω–∏–µ batch‚Ä¶" });

        try {
          const { batchId: createdBatchId } = await callClaudeBatch(chunks);
          if (runTokenRef.current !== runId) return;

          setBatchId(createdBatchId);

          // –∏—Å—Ç–æ—Ä–∏—è batch
          const history = JSON.parse(localStorage.getItem("batchHistory") || "[]");
          history.unshift(createdBatchId);
          localStorage.setItem("batchHistory", JSON.stringify(history.slice(0, 20)));

          // –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º –∏ ¬´—Å—ã—Ä—ã–µ¬ª, –∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          const { rawCards, mergedCards } = await fetchBatchResults(
            createdBatchId,
            { pollIntervalMs: 3000, maxWaitMs: 10 * 60 * 1000, initialDelayMs: 1200 },
            (p: BatchProgress) => {
              if (runTokenRef.current !== runId) return;
              const { succeeded, errored, canceled, expired } = p.request_counts;
              const current = succeeded + errored + canceled + expired;
              setProcessingProgress({
                current,
                total: chunks.length,
                step: batchStepText(p, chunks.length),
              });
            }
          );
          if (runTokenRef.current !== runId) return;

          // 1) –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–±–∏—Ä–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ ¬´—Å—ã—Ä—ã–º¬ª –∫–∞—Ä—Ç–æ—á–∫–∞–º (—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å)
          const anchoredRaw = attachSidIfMissing(
            rawCards as any,
            initialSentences.map(s => s.normalized)
          );
          const ruBySidRaw = collectRuBySid(anchoredRaw as any, initialSentences.length);
          const filledFromRaw = fillSentenceTranslations(initialSentences, ruBySidRaw);
          const fullTranslation = joinFullTranslation(filledFromRaw);

          // 2) –î–ª—è UI –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
          const cardsForUi = attachSidIfMissing(
            mergedCards as any,
            initialSentences.map(s => s.normalized)
          );
          (cardsForUi as any[]).forEach((c: any) => (c.visible = true));
          saveForms(cardsForUi as any);

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
          setSentences(filledFromRaw);
          setTranslationText(fullTranslation);
          setFlashcards(cardsForUi as any);

          console.log("üàØ [useProcessing] (batch) translation length:", fullTranslation.length);

          setMode("flashcards");
          setCurrentIndex?.(0);
          setFlipped?.(false);
          setState("ready");
          setProcessingProgress({ current: chunks.length, total: chunks.length, step: "–ì–æ—Ç–æ–≤–æ" });
        } catch (e) {
          if (runTokenRef.current !== runId) return;
          console.error("‚ùå Batch processing failed:", e);
          setBatchError(e as Error);
          setState("input");
          setProcessingProgress({ current: 0, total: 0, step: "–û—à–∏–±–∫–∞ batch" });
          return;
        }

        return;
      }

      /* --------------------------- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ --------------------------- */
      const allCards: FlashcardNew[] = [];
      for (let i = 0; i < chunks.length; i++) {
        if (runTokenRef.current !== runId) return;

        setProcessingProgress({
          current: i + 1,
          total: chunks.length,
          step: `–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${chunks.length}`,
        });

        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        const chunkCards = await processChunkWithContextCb(chunks[i], i, chunks.length, chunks);
        if (runTokenRef.current !== runId) return;

        if (chunkCards && chunkCards.length > 0) {
          allCards.push(...(chunkCards as any));
        }

        // –ª—ë–≥–∫–∏–π —Ç—Ä–æ—Ç—Ç–ª–∏–Ω–≥ –ª–∏–º–∏—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 800));
      }

      if (runTokenRef.current !== runId) return;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è UI
      const mergedCards = mergeCardsByBaseForm(allCards as any);

      // –í–∏–¥–∏–º–æ—Å—Ç—å + —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã
      (mergedCards as any[]).forEach((c: any) => (c.visible = true));
      saveForms(mergedCards as any);

      // –ü—Ä–æ—Å—Ç–∞–≤–∏–º sid –∏ —Å–æ–±–µ—Ä—ë–º –∫–∞—Ä—Ç—É RU –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
      const anchored = attachSidIfMissing(
        mergedCards as any,
        initialSentences.map(s => s.normalized)
      );
      const ruBySid = collectRuBySid(anchored as any, initialSentences.length);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ –Ω–∞—à–µ–º –µ–¥–∏–Ω–æ–º –º–∞—Å—Å–∏–≤–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (–∏–Ω–¥–µ–∫—Å ‚Üí –ø–µ—Ä–µ–≤–æ–¥)
      const filled = fillSentenceTranslations(initialSentences, ruBySid);
      const fullTranslation = joinFullTranslation(filled);

      setSentences(filled);
      setTranslationText(fullTranslation);
      setFlashcards(anchored as any);

      console.log(
        `üéâ –ì–æ—Ç–æ–≤–æ: ${anchored.length} –∫–∞—Ä—Ç–æ—á–µ–∫ (–ø–æ—Å–ª–µ merge). –ü–µ—Ä–µ–≤–æ–¥ –¥–ª–∏–Ω–æ–π ${fullTranslation.length}`
      );

      setMode("flashcards");
      setCurrentIndex?.(0);
      setFlipped?.(false);
      setState("ready");
      setProcessingProgress({ current: chunks.length, total: chunks.length, step: "–ì–æ—Ç–æ–≤–æ" });
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
      setState("input");
      setProcessingProgress({ current: 0, total: 0, step: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏" });
    }
  }, [inputText, isBatchEnabled, processChunkWithContextCb, setMode, batchStepText, saveForms]);

  /* =============================================================================
   *       –ü –û –í –¢ –û –† –ù –ê –Ø   –û –ë –† –ê –ë –û –¢ –ö –ê   ( R E T R Y   Q U E U E )
   * ============================================================================= */
  const processRetryQueue = React.useCallback(
    async (onProgress?: (current: number, total: number) => void) => {
      console.log("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ retry queue‚Ä¶");
      setState("loading");
      const runId = nextRunToken();

      const progressCallback = (current: number, total: number) => {
        setProcessingProgress({
          current,
          total,
          step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${current}/${total}`,
        });
        onProgress?.(current, total);
      };

      try {
        const results = await retryQueue.processQueue(progressCallback);
        console.log("üèÅ Retry –∑–∞–≤–µ—Ä—à—ë–Ω:", results);
        if (runTokenRef.current !== runId) return results;

        if (results.cards && results.cards.length > 0) {
          (results.cards as any[]).forEach((c: any) => (c.visible = true));

          // –£–¥–∞–ª—è–µ–º error-–∫–∞—Ä—Ç–æ—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ ‚Äî –∏ –º–µ—Ä–∂–∏–º
          const cleanedPrev = flashcards.filter(
            c => !(c as { needsReprocessing?: boolean }).needsReprocessing
          );
          const merged = mergeCardsByBaseForm([
            ...(cleanedPrev as any[]),
            ...(results.cards as any[]),
          ]) as FlashcardNew[];

          saveForms(merged as any);

          // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º sid –∏ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
          const currentSentences = sentences;
          const anchored = attachSidIfMissing(
            merged as any,
            currentSentences.map(s => s.normalized)
          );
          const ruBySid = collectRuBySid(anchored as any, currentSentences.length);
          const filled = fillSentenceTranslations(currentSentences, ruBySid);
          const fullTranslation = joinFullTranslation(filled);

          setSentences(filled);
          setTranslationText(fullTranslation);
          setFlashcards(anchored as any);

          setMode("flashcards");
          setCurrentIndex?.(0);
          setFlipped?.(false);
        }

        if (results.successful > 0) {
          setState("ready");
          setProcessingProgress({ current: 0, total: 0, step: "ready" });
        }

        return results;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ retry queue:", error);
        throw error;
      } finally {
        if (runTokenRef.current === runId) {
          setProcessingProgress({ current: 0, total: 0, step: "" });
        }
      }
    },
    [retryQueue.processQueue, flashcards, sentences, setMode, saveForms]
  );

  /* =============================================================================
   *        –ê –í –¢ –û - –† –ï –ü –ê –ò –†   (–Ω–∞ —Å–ª—É—á–∞–π —Ä–µ–¥–∫–∏—Ö –ø—É—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π)
   * ============================================================================= */
  React.useEffect(() => {
    if (
      state === "ready" &&
      flashcards.length > 0 &&
      sentences.length > 0 &&
      !translationText.trim()
    ) {
      const ruBySid = collectRuBySid(flashcards, sentences.length);
      const filled = fillSentenceTranslations(sentences, ruBySid);
      const fullTranslation = joinFullTranslation(filled);

      if (fullTranslation) {
        setSentences(filled);
        setTranslationText(fullTranslation);
        console.log("üõ† [useProcessing] auto-repair translation length:", fullTranslation.length);
      }
    }
  }, [state, flashcards, sentences, translationText]);

  /* =============================================================================
   *                        C R U D   /   –î –ï –ô –° –¢ –í –ò –Ø
   * ============================================================================= */

  const updateCard = React.useCallback((index: number, field: string, value: unknown) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        (copy[index] as any)[field] = value;
      }
      return copy as any;
    });
  }, []);

  const toggleCardVisibility = React.useCallback((index: number) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        copy[index] = { ...(copy[index] as any), visible: !(copy[index] as any).visible };
      }
      return copy as any;
    });
  }, []);

  const deleteCard = React.useCallback((index: number) => {
    setFlashcards(prev => (prev as any[]).filter((_, i) => i !== index) as any);
  }, []);

  const addNewCard = React.useCallback(() => {
    const newCard: FlashcardNew = {
      base_form: "",
      base_translation: "",
      contexts: [] as any,
      visible: true,
    } as any;
    setFlashcards(prev => [newCard, ...(prev as any[])] as any);
  }, []);

  const clearAll = React.useCallback(() => {
    console.log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");
    setFlashcards([] as any);
    setTranslationText("");
    setFormTranslations(new Map());
    setState("input");
    setProcessingProgress({ current: 0, total: 0, step: "" });
    setInputText?.("");
    setSentences([]);
    retryQueue.clearQueue();
  }, [retryQueue.clearQueue, setInputText]);

  /* =============================================================================
   *                            –≠ –ö –° –ü –û –† –¢   A P I
   * ============================================================================= */

  return {
    // State
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,

    // Actions
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,

    // Direct set
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,

    // Batch
    isBatchEnabled,
    setBatchEnabled,
    batchId,
    batchError,

    // Retry
    processRetryQueue,
    retryQueue: {
      queue: retryQueue.queue,
      stats: retryQueue.stats,
      isProcessing: retryQueue.isProcessing,
      clearQueue: retryQueue.clearQueue,
      removeFromQueue: retryQueue.removeFromQueue,
    },
  };
}
