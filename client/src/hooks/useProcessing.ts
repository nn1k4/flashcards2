// client/src/hooks/useProcessing.ts
import React from "react";
import type { FlashcardNew, FlashcardOld, AppMode, AppState, ProcessingProgress } from "../types";
import {
  normalizeCards,
  mergeCardsByBaseForm,
  saveFormTranslations,
  splitIntoSentences,
} from "../utils/cardUtils";

// –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { useRetryQueue } from "./useRetryQueue";
import { analyzeError, type ErrorInfo } from "../utils/error-handler";
import { apiClient } from "../services/ApiClient";
import {
  callClaudeBatch,
  fetchBatchResults,
  buildFlashcardPrompt,
  FLASHCARD_TOOL,
} from "../claude-batch"; // üöÄ –±–µ—Ä–µ–º –ø—Ä–æ–º–ø—Ç –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏–∑ batch-–º–æ–¥—É–ª—è

// –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –ü–†–û–ï–ö–¢–ê
import { defaultConfig } from "../config";

import { ErrorType } from "../utils/error-handler";

// --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –¢–ò–ü–´ –î–õ–Ø –ü–ê–†–°–ò–ù–ì–ê –û–¢–í–ï–¢–ê ---
interface ApiCardContext {
  latvian?: string;
  russian?: string;
  // –ù–û–í–û–ï: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Card
  forms?: { form: string; translation: string }[];
  word_in_context?: string; // –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
}

interface ApiCard {
  id?: string;
  unit?: "word" | "phrase";
  base_form?: string;
  front?: string;
  base_translation?: string;
  translations?: string[];
  text_forms?: string[];
  word_form_translation?: string;
  word_form_translations?: string[];
  original_phrase?: string;
  phrase_translation?: string;
  contexts?: ApiCardContext[];
}

export function useProcessing(
  inputText: string,
  setMode: (mode: AppMode) => void,
  setInputText?: (text: string) => void,
  setCurrentIndex?: (index: number) => void,
  setFlipped?: (flipped: boolean) => void
) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [state, setState] = React.useState<AppState>("input");
  const [flashcards, setFlashcards] = React.useState<FlashcardNew[]>([]);
  const [translationText, setTranslationText] = React.useState("");
  const [processingProgress, setProcessingProgress] = React.useState<ProcessingProgress>({
    current: 0,
    total: 0,
    step: "",
  });
  const [formTranslations, setFormTranslations] = React.useState<Map<string, string>>(new Map());
  const [isBatchEnabled, setBatchEnabled] = React.useState(false);
  const [batchId, setBatchId] = React.useState<string | null>(null);
  const [batchError, setBatchError] = React.useState<Error | null>(null);

  // –ù–û–í–û–ï: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è retry queue –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
  const retryQueue = useRetryQueue();

  // –ù–û–í–û–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
  React.useEffect(() => {
    const handleRequestError = (eventData: {
      errorInfo: ErrorInfo;
      chunkInfo?: { description?: string; originalChunk?: string } | string;
      willRetry: boolean;
    }) => {
      const { errorInfo, chunkInfo, willRetry } = eventData;

      console.log("üîç ApiClient error event:", {
        errorType: errorInfo.type,
        willRetry,
        chunkInfo: (chunkInfo as any)?.description || "unknown-chunk",
      });

      // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω ‚Äî —Å—Ä–∞–∑—É –∫–ª–∞–¥–µ–º –≤ –æ—á–µ—Ä–µ–¥—å,
      // —á—Ç–æ–±—ã —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
      if (
        errorInfo.type === ErrorType.NETWORK_ERROR ||
        errorInfo.type === ErrorType.PROXY_UNAVAILABLE
      ) {
        retryQueue.enqueue(
          (chunkInfo as any)?.originalChunk || "",
          errorInfo,
          (chunkInfo as any)?.description || `chunk-${Date.now()}`
        );
      } else if (!willRetry && errorInfo.retryable && (chunkInfo as any)?.originalChunk) {
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫");
        retryQueue.enqueue(
          (chunkInfo as any).originalChunk,
          errorInfo,
          (chunkInfo as any).description || `chunk-${Date.now()}`
        );
      }
    };

    const handleRateLimit = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è Rate limit –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
    };

    const handleApiOverload = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient
    apiClient.on("requestError", handleRequestError);
    apiClient.on("rateLimited", handleRateLimit);
    apiClient.on("apiOverloaded", handleApiOverload);

    return () => {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      apiClient.off("requestError", handleRequestError);
      apiClient.off("rateLimited", handleRateLimit);
      apiClient.off("apiOverloaded", handleApiOverload);
    };
  }, [retryQueue.enqueue]);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const saveForms = React.useCallback((cards: FlashcardOld[]) => {
    setFormTranslations(prev => saveFormTranslations(cards, prev));
  }, []);

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (tool_use)
  const processChunkWithContext = React.useCallback(
    async (
      chunk: string,
      chunkIndex: number,
      totalChunks: number,
      contextChunks?: string[]
    ): Promise<FlashcardNew[]> => {
      console.log(
        `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${chunkIndex + 1}/${totalChunks}: "${chunk.substring(0, 50)}..."`
      );

      // üö® –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
      const safeContextChunks = contextChunks || [];
      const prevChunk = chunkIndex > 0 ? safeContextChunks[chunkIndex - 1] : "";
      const nextChunk =
        chunkIndex < safeContextChunks.length - 1 ? safeContextChunks[chunkIndex + 1] : "";

      try {
        // üß† –ù–û–í–û–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –≠—Ç–∞–ø–∞ 2
        const config = defaultConfig.processing;
        const prompt = buildFlashcardPrompt({
          chunkText: chunk,
          chunkIndex,
          totalChunks,
          enablePhraseExtraction: !!config.enablePhraseExtraction,
          prevText: prevChunk || undefined,
          nextText: nextChunk || undefined,
        });

        // üöÄ –ù–û–í–û–ï: sequential –≤—ã–∑–æ–≤ —Å tools/tool_choice —á–µ—Ä–µ–∑ ApiClient
        const raw = await apiClient.request(prompt, {
          enableEvents: true, // ‚úÖ —Å–æ–±—ã—Ç–∏—è –Ω—É–∂–Ω—ã –¥–ª—è UI-–±–∞—Ä–æ–≤
          chunkInfo: {
            description: `chunk-${chunkIndex + 1}-of-${totalChunks}`,
            originalChunk: chunk,
            index: chunkIndex,
            total: totalChunks,
          },
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: –ø–µ—Ä–µ–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∫ –∑–∞–ø—Ä–æ—Å—É
          tools: [FLASHCARD_TOOL],
          tool_choice: { type: "tool", name: "create_flashcards" },
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
        if (raw.startsWith("[ERROR:")) {
          const errorData = JSON.parse(raw.slice(7, -1));
          const errorInfo = analyzeError(errorData);

          console.log("üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:", errorInfo.userMessage);

          const errorCard: FlashcardNew = {
            // @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
            id: `error_${Date.now()}_${Math.random()}`,
            base_form: `error_${errorInfo.type}_${Date.now()}`,
            // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
            word_type: "other",
            // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
            translations: [errorInfo.userMessage],
            contexts: [
              {
                // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
                latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
                // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
                russian: errorInfo.recommendation,
                // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
                word_in_context: errorInfo.type,
              } as any,
            ] as any,
            visible: true,
            // @ts-expect-error: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ
            needsReprocessing: true,
          } as any;

          return [errorCard];
        }

        // üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–∫—Å–∏
        if (raw.startsWith("[Error:") || raw.includes("Error: Pro")) {
          console.log("üî¥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä–∞:", raw.substring(0, 100));
          throw new Error("üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        // üßπ –ß–∏—Å—Ç–∏–º Markdown-–æ–±—ë—Ä—Ç–∫–∏, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ text –≤–º–µ—Å—Ç–æ tool_use
        const cleanedText = raw
          .replace(/```json\s*/g, "")
          .replace(/```\s*$/g, "")
          .trim();

        if (cleanedText.startsWith("[Error:") || cleanedText.includes("Error:")) {
          throw new Error(`üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${cleanedText.substring(0, 100)}`);
        }

        // üì¶ –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º { flashcards } –∏ –º–∞—Å—Å–∏–≤
        let parsed: any;
        try {
          parsed = JSON.parse(cleanedText);
        } catch (e) {
          // –ï—Å–ª–∏ sequential –Ω–µ –≤–µ—Ä–Ω—É–ª JSON ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
          throw new Error("Invalid JSON from Claude in sequential mode");
        }

        const arrayLike = Array.isArray(parsed)
          ? parsed
          : Array.isArray(parsed?.flashcards)
            ? parsed.flashcards
            : [parsed];

        // üîÅ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º —Ñ–æ—Ä–º–∞—Ç FlashcardOld
        const oldCards: FlashcardOld[] = arrayLike.flatMap((card: ApiCard) => {
          const baseForm = card.base_form || card.front || "";
          const baseTrans =
            card.base_translation ||
            (Array.isArray(card.translations) ? card.translations[0] : "") ||
            "";

          // –ï—Å–ª–∏ –µ—Å—Ç—å contexts ‚Äî —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –Ω–∏–º; –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞–Ω–∫ –∫–∞–∫ fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç
          if (!Array.isArray(card.contexts) || card.contexts.length === 0) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å —Ñ–æ—Ä–º—ã –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –∏–ª–∏ fallback –≤ front
            const textForms: string[] = Array.isArray(card.text_forms)
              ? card.text_forms
              : card.front
                ? [card.front]
                : [];

            const formTrans =
              card.word_form_translation ||
              (Array.isArray(card.word_form_translations)
                ? card.word_form_translations[0]
                : undefined) ||
              (Array.isArray(card.translations) ? card.translations[0] : "") ||
              "";

            return [
              {
                front: card.front || textForms[0] || baseForm,
                back: formTrans,
                word_form_translation: formTrans,
                base_form: baseForm,
                base_translation: baseTrans,
                original_phrase: card.original_phrase || chunk,
                phrase_translation: card.phrase_translation || "",
                text_forms: textForms,
                visible: true,
              } as FlashcardOld,
            ];
          }

          // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
          return card.contexts.map(ctx => {
            const ctxTextForms = Array.isArray(ctx.forms)
              ? ctx.forms.map(f => f.form).filter(Boolean)
              : Array.isArray(card.text_forms)
                ? card.text_forms
                : card.front
                  ? [card.front]
                  : [];

            const ctxFormTrans =
              (Array.isArray(ctx.forms) && ctx.forms[0]?.translation) ||
              card.word_form_translation ||
              (Array.isArray(card.word_form_translations)
                ? card.word_form_translations[0]
                : undefined) ||
              (Array.isArray(card.translations) ? card.translations[0] : "") ||
              "";

            const original_phrase = ctx.latvian || card.original_phrase || chunk;
            const phrase_translation = ctx.russian || card.phrase_translation || "";

            return {
              front: ctxTextForms[0] || card.front || baseForm,
              back: ctxFormTrans,
              word_form_translation: ctxFormTrans,
              base_form: baseForm,
              base_translation: baseTrans,
              original_phrase,
              phrase_translation,
              text_forms: ctxTextForms,
              visible: true,
            } as FlashcardOld;
          });
        });

        const normalizedCards = normalizeCards(oldCards, chunk);
        const processedCards = mergeCardsByBaseForm(normalizedCards);

        console.log(
          `‚úÖ –ß–∞–Ω–∫ ${chunkIndex + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${processedCards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`
        );

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        saveForms(normalizedCards);

        return processedCards as unknown as FlashcardNew[];
      } catch (error) {
        // üõ†Ô∏è –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, error);
        if (error instanceof Error && error.stack) {
          console.error(error.stack);
        }

        // –ê–Ω–∞–ª–∏–∑ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        const errorInfo = analyzeError(error);

        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, errorInfo.userMessage);

        // Error-–∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è UI
        const errorCard: FlashcardNew = {
          // @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
          id: `error_${Date.now()}_${Math.random()}`,
          base_form: errorInfo.userMessage,
          base_translation: errorInfo.recommendation,
          // @ts-expect-error
          word_type: "other",
          // @ts-expect-error
          translations: [errorInfo.userMessage],
          contexts: [
            {
              // @ts-expect-error
              latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
              // @ts-expect-error
              russian: errorInfo.recommendation,
              // @ts-expect-error
              word_in_context: errorInfo.type,
            } as any,
          ] as any,
          visible: true,
          // @ts-expect-error
          needsReprocessing: true,
        } as any;

        return [errorCard];
      }
    },
    [saveForms]
  );

  const generateTranslation = React.useCallback((cards: FlashcardNew[]) => {
    const translations = new Set<string>();
    cards.forEach(card => {
      (card as any).contexts.forEach((ctx: any) => {
        const text = ctx.phrase_translation?.trim();
        if (text) translations.add(text);
      });
    });
    setTranslationText(Array.from(translations).join(" "));
  }, []);

  // –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ retry queue —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  const processRetryQueue = React.useCallback(
    async (onProgress?: (current: number, total: number) => void) => {
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É retry queue");

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      setState("loading");

      // –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      const progressCallback = (current: number, total: number) => {
        setProcessingProgress({
          current,
          total,
          step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${current}/${total}`,
        });
        onProgress?.(current, total);
      };

      try {
        const results = await retryQueue.processQueue(progressCallback);

        console.log("üèÅ Retry queue –æ–±—Ä–∞–±–æ—Ç–∞–Ω:", results);

        if (results.cards && results.cards.length > 0) {
          (results.cards as any[]).forEach((card: any) => (card.visible = true));
          const cleanedPrev = flashcards.filter(
            c => !(c as { needsReprocessing?: boolean }).needsReprocessing
          );
          const merged = mergeCardsByBaseForm([...cleanedPrev, ...(results.cards as any[])]);
          setFlashcards(merged as any);
          generateTranslation(merged as any);
          setMode("flashcards");
          setCurrentIndex?.(0);
          setFlipped?.(false);
        }

        if (results.successful > 0) {
          setState("ready");
          setProcessingProgress({ current: 0, total: 0, step: "ready" });
        }

        return results;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ retry queue:", error);
        throw error;
      } finally {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        setProcessingProgress({ current: 0, total: 0, step: "" });
      }
    },
    [retryQueue.processQueue, flashcards, setFlashcards, setState, setMode, generateTranslation]
  );

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ (—á–∞–Ω–∫-–∑–∞-—á–∞–Ω–∫–æ–º)
  const processText = React.useCallback(async () => {
    if (!inputText.trim()) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞:", inputText.substring(0, 100) + "...");

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    setState("loading");
    setFlashcards([] as any);
    setTranslationText("");
    setFormTranslations(new Map());
    setBatchId(null);
    setBatchError(null);

    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const sentences = splitIntoSentences(inputText);
      console.log(`üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —á–∞–Ω–∫–∏ –ø–æ 1
      const chunkSize = 1;
      const chunks: string[] = [];
      for (let i = 0; i < sentences.length; i += chunkSize) {
        const chunk = sentences
          .slice(i, i + chunkSize)
          .join(" ")
          .trim();
        if (chunk) chunks.push(chunk);
      }

      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      if (isBatchEnabled && chunks.length > 1000) {
        alert("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
        setState("input");
        return;
      }

      setProcessingProgress({
        current: 0,
        total: chunks.length,
        step: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...",
      });

      const allCards: FlashcardNew[] = [];

      if (isBatchEnabled) {
        setProcessingProgress({ current: 0, total: chunks.length, step: "–°–æ–∑–¥–∞–Ω–∏–µ batch..." });
        try {
          const { batchId: createdBatchId } = await callClaudeBatch(chunks);
          setBatchId(createdBatchId);

          const history = JSON.parse(localStorage.getItem("batchHistory") || "[]");
          history.unshift(createdBatchId);
          localStorage.setItem("batchHistory", JSON.stringify(history.slice(0, 20)));

          const resultCards = await fetchBatchResults(createdBatchId);
          (resultCards as any[]).forEach((card: any) => (card.visible = true));

          const mergedCards = normalizeCards(resultCards as any, inputText); // üí° –ó–¥–µ—Å—å —É–∂–µ –µ—Å—Ç—å merge –≤–Ω—É—Ç—Ä–∏
          setFlashcards(mergedCards as any);
          generateTranslation(mergedCards as any);
        } catch (e) {
          console.error("‚ùå Batch processing failed:", e);
          setBatchError(e as Error);
          setState("input");
          return;
        }
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for (let i = 0; i < chunks.length; i++) {
          setProcessingProgress({
            current: i + 1,
            total: chunks.length,
            step: `–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${chunks.length}`,
          });

          console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${i + 1}/${chunks.length}`);

          const chunkCards = await processChunkWithContext(chunks[i], i, chunks.length, chunks);

          if (chunkCards && chunkCards.length > 0) {
            allCards.push(...(chunkCards as any));
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ base_form
      const mergedCards = mergeCardsByBaseForm(allCards as any);

      console.log(
        `üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${mergedCards.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${allCards.length} –æ–±—â–∏—Ö`
      );

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      setFlashcards(mergedCards as any);
      generateTranslation(mergedCards as any);
      setMode("flashcards");
      setCurrentIndex?.(0);
      setFlipped?.(false);
      setState("ready");
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
      setState("input");
      setProcessingProgress({
        current: 0,
        total: 0,
        step: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      });
    }
  }, [inputText, processChunkWithContext, setMode, generateTranslation, isBatchEnabled, saveForms]);

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const updateCard = React.useCallback((index: number, field: string, value: unknown) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        (copy[index] as unknown as Record<string, unknown>)[field] = value;
      }
      return copy as any;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  const toggleCardVisibility = React.useCallback((index: number) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        copy[index] = { ...(copy[index] as any), visible: !(copy[index] as any).visible };
      }
      return copy as any;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  const deleteCard = React.useCallback((index: number) => {
    setFlashcards(prev => (prev as any[]).filter((_, i) => i !== index) as any);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const addNewCard = React.useCallback(() => {
    const newCard: FlashcardNew = {
      base_form: "",
      base_translation: "",
      contexts: [] as any,
      visible: true,
    } as any;
    setFlashcards(prev => [newCard, ...(prev as any[])] as any);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const clearAll = React.useCallback(() => {
    console.log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");

    setFlashcards([] as any);
    setTranslationText("");
    setFormTranslations(new Map());
    setState("input");
    setProcessingProgress({ current: 0, total: 0, step: "" });

    if (setInputText) {
      setInputText("");
    }

    // –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º retry queue –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
    retryQueue.clearQueue();
  }, [retryQueue.clearQueue, setInputText]);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
  return {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,

    // –°–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞/—ç–∫—Å–ø–æ—Ä—Ç–∞)
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,

    // Batch —Ä–µ–∂–∏–º
    isBatchEnabled,
    setBatchEnabled,
    batchId,
    batchError,

    // –ù–û–í–û–ï: Retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    processRetryQueue,
    retryQueue: {
      queue: retryQueue.queue,
      stats: retryQueue.stats,
      isProcessing: retryQueue.isProcessing,
      clearQueue: retryQueue.clearQueue,
      removeFromQueue: retryQueue.removeFromQueue,
    },
  };
}
