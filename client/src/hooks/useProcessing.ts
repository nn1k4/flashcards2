// client/src/hooks/useProcessing.ts
import React from "react";
import type { FlashcardNew, FlashcardOld, AppMode, AppState, ProcessingProgress } from "../types";
import { mergeCardsByBaseForm, saveFormTranslations, splitIntoSentences } from "../utils/cardUtils";

// Retry-–æ—á–µ—Ä–µ–¥—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
import { useRetryQueue } from "./useRetryQueue";
import { analyzeError, type ErrorInfo, ErrorType } from "../utils/error-handler";

// –ö–ª–∏–µ–Ω—Ç —Å–æ–±—ã—Ç–∏–π/—Ä–µ—Ç—Ä–∞–µ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏—è)
import { apiClient } from "../services/ApiClient";

// Batch + –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π tool-calling
import { callClaudeBatch, fetchBatchResults, processChunkWithTools } from "../claude-batch";

// –ö–æ–Ω—Ñ–∏–≥ (–¥–ª—è —Ñ–ª–∞–≥–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ —Ç.–ø.)
import { defaultConfig } from "../config";

/** –•—É–∫ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞—Ä—Ç–æ—á–∫–∏ */
export function useProcessing(
  inputText: string,
  setMode: (mode: AppMode) => void,
  setInputText?: (text: string) => void,
  setCurrentIndex?: (index: number) => void,
  setFlipped?: (flipped: boolean) => void
) {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [state, setState] = React.useState<AppState>("input");
  const [flashcards, setFlashcards] = React.useState<FlashcardNew[]>([]);
  const [translationText, setTranslationText] = React.useState("");
  const [processingProgress, setProcessingProgress] = React.useState<ProcessingProgress>({
    current: 0,
    total: 0,
    step: "",
  });
  const [formTranslations, setFormTranslations] = React.useState<Map<string, string>>(new Map());
  const [isBatchEnabled, setBatchEnabled] = React.useState(false);
  const [batchId, setBatchId] = React.useState<string | null>(null);
  const [batchError, setBatchError] = React.useState<Error | null>(null);

  // –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è retry-–æ—á–µ—Ä–µ–¥—å
  const retryQueue = useRetryQueue();

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è ApiClient (–¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞/–æ—á–µ—Ä–µ–¥–∏)
  React.useEffect(() => {
    const handleRequestError = (eventData: {
      errorInfo: ErrorInfo;
      chunkInfo?: { description?: string; originalChunk?: string } | string;
      willRetry: boolean;
    }) => {
      const { errorInfo, chunkInfo, willRetry } = eventData;

      console.log("üîç ApiClient error event:", {
        errorType: errorInfo.type,
        willRetry,
        chunkInfo: (chunkInfo as any)?.description || "unknown-chunk",
      });

      if (
        errorInfo.type === ErrorType.NETWORK_ERROR ||
        errorInfo.type === ErrorType.PROXY_UNAVAILABLE
      ) {
        retryQueue.enqueue(
          (chunkInfo as any)?.originalChunk || "",
          errorInfo,
          (chunkInfo as any)?.description || `chunk-${Date.now()}`
        );
      } else if (!willRetry && errorInfo.retryable && (chunkInfo as any)?.originalChunk) {
        console.log("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –≤ retry queue –∏–∑-–∑–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫");
        retryQueue.enqueue(
          (chunkInfo as any).originalChunk,
          errorInfo,
          (chunkInfo as any).description || `chunk-${Date.now()}`
        );
      }
    };

    const handleRateLimit = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è Rate limit –æ–±–Ω–∞—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
    };

    const handleApiOverload = (errorInfo: ErrorInfo) => {
      console.warn("‚ö†Ô∏è API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω:", errorInfo.userMessage);
    };

    apiClient.on("requestError", handleRequestError);
    apiClient.on("rateLimited", handleRateLimit);
    apiClient.on("apiOverloaded", handleApiOverload);

    return () => {
      apiClient.off("requestError", handleRequestError);
      apiClient.off("rateLimited", handleRateLimit);
      apiClient.off("apiOverloaded", handleApiOverload);
    };
  }, [retryQueue.enqueue]);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã —Ñ–æ—Ä–º —Å–ª–æ–≤ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
  const saveForms = React.useCallback((cards: FlashcardNew[] | FlashcardOld[]) => {
    setFormTranslations(prev => saveFormTranslations(cards as any, prev));
  }, []);

  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π tool-calling —Å–ª–æ–π)
  const processChunkWithContext = React.useCallback(
    async (
      chunk: string,
      chunkIndex: number,
      totalChunks: number,
      contextChunks?: string[]
    ): Promise<FlashcardNew[]> => {
      console.log(
        `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${chunkIndex + 1}/${totalChunks}: "${chunk.substring(0, 50)}..."`
      );

      try {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ Card[] (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞)
        const cards = await processChunkWithTools(
          chunk,
          chunkIndex,
          totalChunks,
          contextChunks || []
        );

        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–ª—å—ë–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è base_form –≤ —á–∞–Ω–∫e (idempotent)
        const merged = mergeCardsByBaseForm(cards as any) as FlashcardNew[];

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º
        saveForms(merged);

        console.log(`‚úÖ –ß–∞–Ω–∫ ${chunkIndex + 1} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${merged.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
        return merged;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${chunkIndex + 1}:`, error);
        const errorInfo = analyzeError(error);

        // –ö–∞—Ä—Ç–æ—á–∫–∞-–æ—à–∏–±–∫–∞ –¥–ª—è UI (–≤–∏–¥–∏–º–∞ –∏ –ø–æ–º–µ—á–µ–Ω–∞ –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ)
        const errorCard: FlashcardNew = {
          // @ts-expect-error: –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
          id: `error_${Date.now()}_${Math.random()}`,
          base_form: errorInfo.userMessage,
          base_translation: errorInfo.recommendation,
          contexts: [
            {
              // –ø–æ–ª—è –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã
              // @ts-expect-error: –¥–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ UI
              latvian: chunk.substring(0, 100) + (chunk.length > 100 ? "..." : ""),
              // @ts-expect-error
              russian: errorInfo.recommendation,
              // @ts-expect-error
              word_in_context: errorInfo.type,
              // –Ω–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–æ–ø—É—Å–∫–∞–µ—Ç forms, –Ω–æ —Ç—É—Ç –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å
            } as any,
          ],
          visible: true,
          // @ts-expect-error
          needsReprocessing: true,
        } as any;

        return [errorCard];
      }
    },
    [saveForms]
  );

  // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º –∫–∞—Ä—Ç–æ—á–µ–∫
  const generateTranslation = React.useCallback((cards: FlashcardNew[]) => {
    const translations = new Set<string>();
    cards.forEach(card => {
      (card as any).contexts?.forEach((ctx: any) => {
        // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ –Ω–æ–≤—É—é (`russian`), –∏ —Å—Ç–∞—Ä—É—é (`phrase_translation`) —Å—Ö–µ–º—ã
        const t = (ctx?.russian || ctx?.phrase_translation || "").trim();
        if (t) translations.add(t);
      });
    });
    setTranslationText(Array.from(translations).join(" "));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ retry-–æ—á–µ—Ä–µ–¥–∏
  const processRetryQueue = React.useCallback(
    async (onProgress?: (current: number, total: number) => void) => {
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É retry queue");
      setState("loading");

      const progressCallback = (current: number, total: number) => {
        setProcessingProgress({
          current,
          total,
          step: `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ${current}/${total}`,
        });
        onProgress?.(current, total);
      };

      try {
        const results = await retryQueue.processQueue(progressCallback);
        console.log("üèÅ Retry queue –æ–±—Ä–∞–±–æ—Ç–∞–Ω:", results);

        if (results.cards && results.cards.length > 0) {
          (results.cards as any[]).forEach((card: any) => (card.visible = true));

          const cleanedPrev = flashcards.filter(
            c => !(c as { needsReprocessing?: boolean }).needsReprocessing
          );
          const merged = mergeCardsByBaseForm([
            ...(cleanedPrev as any[]),
            ...(results.cards as any[]),
          ]);

          setFlashcards(merged as any);
          generateTranslation(merged as any);
          setMode("flashcards");
          setCurrentIndex?.(0);
          setFlipped?.(false);
        }

        if (results.successful > 0) {
          setState("ready");
          setProcessingProgress({ current: 0, total: 0, step: "ready" });
        }

        return results;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ retry queue:", error);
        throw error;
      } finally {
        setProcessingProgress({ current: 0, total: 0, step: "" });
      }
    },
    [retryQueue.processQueue, flashcards, setFlashcards, setState, setMode, generateTranslation]
  );

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const processText = React.useCallback(async () => {
    if (!inputText.trim()) {
      console.warn("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏");
      return;
    }

    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–∞:", inputText.substring(0, 100) + "...");
    setState("loading");
    setFlashcards([] as any);
    setTranslationText("");
    setFormTranslations(new Map());
    setBatchId(null);
    setBatchError(null);

    try {
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const sentences = splitIntoSentences(inputText);
      console.log(`üìù –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é)
      const chunkSize = 1;
      const chunks: string[] = [];
      for (let i = 0; i < sentences.length; i += chunkSize) {
        const chunk = sentences
          .slice(i, i + chunkSize)
          .join(" ")
          .trim();
        if (chunk) chunks.push(chunk);
      }
      console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${chunks.length} —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

      if (isBatchEnabled && chunks.length > 1000) {
        alert("‚ùóÔ∏è–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç.");
        setState("input");
        return;
      }

      setProcessingProgress({
        current: 0,
        total: chunks.length,
        step: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...",
      });

      if (isBatchEnabled) {
        // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        setProcessingProgress({ current: 0, total: chunks.length, step: "–°–æ–∑–¥–∞–Ω–∏–µ batch..." });
        try {
          const { batchId: createdBatchId } = await callClaudeBatch(chunks);
          setBatchId(createdBatchId);

          // —Å–æ—Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é
          const history = JSON.parse(localStorage.getItem("batchHistory") || "[]");
          history.unshift(createdBatchId);
          localStorage.setItem("batchHistory", JSON.stringify(history.slice(0, 20)));

          const resultCards = await fetchBatchResults(createdBatchId); // —É–∂–µ —Å–ª–∏—Ç—ã –ø–æ base_form
          (resultCards as any[]).forEach((c: any) => (c.visible = true));

          // —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
          const mergedCards = mergeCardsByBaseForm(resultCards as any);
          setFlashcards(mergedCards as any);
          generateTranslation(mergedCards as any);
        } catch (e) {
          console.error("‚ùå Batch processing failed:", e);
          setBatchError(e as Error);
          setState("input");
          return;
        }
      } else {
        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        const allCards: FlashcardNew[] = [];
        for (let i = 0; i < chunks.length; i++) {
          setProcessingProgress({
            current: i + 1,
            total: chunks.length,
            step: `–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${chunks.length}`,
          });

          console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ ${i + 1}/${chunks.length}`);
          const chunkCards = await processChunkWithContext(chunks[i], i, chunks.length, chunks);

          if (chunkCards && chunkCards.length > 0) {
            allCards.push(...(chunkCards as any));
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
          await new Promise(resolve => setTimeout(resolve, 1000));
        }

        const mergedCards = mergeCardsByBaseForm(allCards as any);
        console.log(
          `üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${mergedCards.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ ${allCards.length} –æ–±—â–∏—Ö`
        );

        setFlashcards(mergedCards as any);
        generateTranslation(mergedCards as any);
      }

      setMode("flashcards");
      setCurrentIndex?.(0);
      setFlipped?.(false);
      setState("ready");
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
      setState("input");
      setProcessingProgress({ current: 0, total: 0, step: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏" });
    }
  }, [inputText, isBatchEnabled, processChunkWithContext, setMode, generateTranslation]);

  // CRUD –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
  const updateCard = React.useCallback((index: number, field: string, value: unknown) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        (copy[index] as any)[field] = value;
      }
      return copy as any;
    });
  }, []);

  const toggleCardVisibility = React.useCallback((index: number) => {
    setFlashcards(prev => {
      const copy = [...(prev as any[])];
      if (copy[index]) {
        copy[index] = { ...(copy[index] as any), visible: !(copy[index] as any).visible };
      }
      return copy as any;
    });
  }, []);

  const deleteCard = React.useCallback((index: number) => {
    setFlashcards(prev => (prev as any[]).filter((_, i) => i !== index) as any);
  }, []);

  const addNewCard = React.useCallback(() => {
    const newCard: FlashcardNew = {
      base_form: "",
      base_translation: "",
      contexts: [] as any,
      visible: true,
    } as any;
    setFlashcards(prev => [newCard, ...(prev as any[])] as any);
  }, []);

  const clearAll = React.useCallback(() => {
    console.log("üßπ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö");

    setFlashcards([] as any);
    setTranslationText("");
    setFormTranslations(new Map());
    setState("input");
    setProcessingProgress({ current: 0, total: 0, step: "" });

    setInputText?.("");

    // –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    retryQueue.clearQueue();
  }, [retryQueue.clearQueue, setInputText]);

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API —Ö—É–∫–∞
  return {
    // State
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,

    // Actions
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,

    // Direct set
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,

    // Batch
    isBatchEnabled,
    setBatchEnabled,
    batchId,
    batchError,

    // Retry
    processRetryQueue,
    retryQueue: {
      queue: retryQueue.queue,
      stats: retryQueue.stats,
      isProcessing: retryQueue.isProcessing,
      clearQueue: retryQueue.clearQueue,
      removeFromQueue: retryQueue.removeFromQueue,
    },
  };
}
