// –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥—å—é retry —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ localStorage
import { useState, useCallback, useEffect } from "react";
import { ErrorInfo } from "../utils/error-handler";
import { apiClient } from "../services/ApiClient";

export interface QueueItem {
  id: string;
  chunk: string;
  errorInfo: ErrorInfo;
  attempts: number;
  timestamp: number;
  chunkInfo?: string;
  lastAttemptTime?: number;
}

export interface RetryQueueStats {
  totalItems: number;
  processing: boolean;
  processed: number;
  failed: number;
  lastProcessTime?: number;
}

export interface UseRetryQueueReturn {
  queue: QueueItem[];
  stats: RetryQueueStats;
  enqueue: (chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => void;
  processQueue: (onProgress?: (current: number, total: number) => void) => Promise<{
    processed: number;
    successful: number;
    failed: number;
  }>;
  removeFromQueue: (id: string) => void;
  clearQueue: () => void;
  isProcessing: boolean;
}

const STORAGE_KEY = "latvian-app-retry-queue";
const MAX_QUEUE_SIZE = 50; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

export function useRetryQueue(): UseRetryQueueReturn {
  const [queue, setQueue] = useState<QueueItem[]>(() => {
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ localStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved) {
        const parsed = JSON.parse(saved);
        console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—á–µ—Ä–µ–¥—å retry: ${parsed.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return parsed;
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ localStorage:", error);
    }
    return [];
  });

  const [isProcessing, setIsProcessing] = useState(false);
  const [stats, setStats] = useState<RetryQueueStats>({
    totalItems: 0,
    processing: false,
    processed: 0,
    failed: 0,
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(queue));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setStats(prev => ({
        ...prev,
        totalItems: queue.length,
      }));

      console.log(`üíæ –û—á–µ—Ä–µ–¥—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    } catch (error) {
      console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ localStorage:", error);
    }
  }, [queue]);

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  const enqueue = useCallback((chunk: string, errorInfo: ErrorInfo, chunkInfo?: string) => {
    const item: QueueItem = {
      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      chunk,
      errorInfo,
      attempts: 0,
      timestamp: Date.now(),
      chunkInfo,
    };

    setQueue(prevQueue => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞–Ω–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      const existingIndex = prevQueue.findIndex(existingItem => existingItem.chunk === chunk);

      if (existingIndex !== -1) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
        const updatedQueue = [...prevQueue];
        updatedQueue[existingIndex] = {
          ...updatedQueue[existingIndex],
          errorInfo,
          timestamp: Date.now(),
          chunkInfo,
        };
        console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥–∏: ${item.id}`);
        return updatedQueue;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const newQueue = [...prevQueue, item];

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
      if (newQueue.length > MAX_QUEUE_SIZE) {
        console.warn(`‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –£–¥–∞–ª—è—é—Ç—Å—è —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.`);
        return newQueue.slice(-MAX_QUEUE_SIZE);
      }

      console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å retry: ${item.id} (${errorInfo.userMessage})`);
      return newQueue;
    });
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const processQueue = useCallback(
    async (
      onProgress?: (current: number, total: number) => void
    ): Promise<{ processed: number; successful: number; failed: number }> => {
      if (isProcessing) {
        console.warn("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è");
        return { processed: 0, successful: 0, failed: 0 };
      }

      if (queue.length === 0) {
        console.log("‚ÑπÔ∏è –û—á–µ—Ä–µ–¥—å retry –ø—É—Å—Ç–∞");
        return { processed: 0, successful: 0, failed: 0 };
      }

      setIsProcessing(true);
      setStats(prev => ({ ...prev, processing: true, processed: 0, failed: 0 }));

      console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏: ${queue.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);

      const results = {
        processed: 0,
        successful: 0,
        failed: 0,
      };

      const queueCopy = [...queue];
      const successfulIds: string[] = [];

      for (let i = 0; i < queueCopy.length; i++) {
        const item = queueCopy[i];

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          onProgress?.(i + 1, queueCopy.length);

          setStats(prev => ({
            ...prev,
            processed: i + 1,
          }));

          console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ ${i + 1}/${queueCopy.length}: ${item.id}`);

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
          item.attempts++;
          item.lastAttemptTime = Date.now();

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ApiClient
          const result = await apiClient.request(item.chunk, {
            chunkInfo: item.chunkInfo || `retry-queue-item-${i + 1}`,
          });

          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${item.id}`);

          successfulIds.push(item.id);
          results.successful++;
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item.id}:`, error);
          results.failed++;

          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ –æ—á–µ—Ä–µ–¥–∏
          if (error && typeof error === "object") {
            item.errorInfo = error as ErrorInfo;
          }
        }

        results.processed++;
      }

      // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      if (successfulIds.length > 0) {
        setQueue(prevQueue => prevQueue.filter(item => !successfulIds.includes(item.id)));
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${successfulIds.length} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      }

      setIsProcessing(false);
      setStats(prev => ({
        ...prev,
        processing: false,
        lastProcessTime: Date.now(),
      }));

      console.log(`üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, results);
      return results;
    },
    [queue, isProcessing]
  );

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  const removeFromQueue = useCallback((id: string) => {
    setQueue(prevQueue => {
      const filtered = prevQueue.filter(item => item.id !== id);
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${id}`);
      return filtered;
    });
  }, []);

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–π –æ—á–µ—Ä–µ–¥–∏
   */
  const clearQueue = useCallback(() => {
    setQueue([]);
    setStats(prev => ({
      ...prev,
      totalItems: 0,
      processed: 0,
      failed: 0,
    }));
    console.log("üßπ –û—á–µ—Ä–µ–¥—å retry –æ—á–∏—â–µ–Ω–∞");
  }, []);

  return {
    queue,
    stats,
    enqueue,
    processQueue,
    removeFromQueue,
    clearQueue,
    isProcessing,
  };
}
