import React from "react";
import type { FlashcardNew, TooltipState, BaseComponentProps } from "../types";
import { findPhraseAtPosition, getContainingSentence } from "../utils/textUtils";
import { findTranslationForText, findFormTranslation } from "../utils/cardUtils";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è ReadingView –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface ReadingViewProps extends BaseComponentProps {
  inputText: string; // –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∞—Ç—ã—à—Å–∫–∏–π —Ç–µ–∫—Å—Ç
  formTranslations: Map<string, string>; // Map –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º —Å–ª–æ–≤
  flashcards: FlashcardNew[]; // –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
export const ReadingView: React.FC<ReadingViewProps> = ({
  inputText,
  formTranslations,
  flashcards,
  className = "",
  "data-testid": testId,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ tooltip
  const [tooltip, setTooltip] = React.useState<TooltipState>({
    show: false,
    text: "",
    context: "",
    x: 0,
    y: 0,
    isPhrase: false,
  });

  // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è tooltip —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∏–ª–µ–π DOM
  const hideTooltip = React.useCallback((event?: React.MouseEvent) => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∏–ª–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ event –ø–µ—Ä–µ–¥–∞–Ω
    if (event?.currentTarget) {
      const element = event.currentTarget as HTMLElement;
      if (element.style) {
        element.style.backgroundColor = ""; // –£–±–∏—Ä–∞–µ–º –∂—ë–ª—Ç—ã–π —Ñ–æ–Ω
      }
    }

    setTooltip({
      show: false,
      text: "",
      context: "",
      x: 0,
      y: 0,
      isPhrase: false,
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ hover –Ω–∞ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É
  const handleWordHover = React.useCallback(
    (
      card: FlashcardNew,
      text: string,
      event: React.MouseEvent,
      isPhrase: boolean,
      currentSentence?: string
    ) => {
      if (!card || !event?.currentTarget) return;

      console.log(`üéØ handleWordHover called:`, {
        text,
        isPhrase,
        currentSentence: currentSentence ? currentSentence.substring(0, 50) + "..." : "none",
        cardBaseForm: card.base_form,
        formTranslationsSize: formTranslations.size,
      });

      try {
        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();
        const containerRect = event.currentTarget.closest(".bg-white")?.getBoundingClientRect();

        if (!containerRect) return;

        let translationText = "";
        let contextInfo = "";

        if (isPhrase) {
          // –î–õ–Ø –§–†–ê–ó: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Ñ—Ä–∞–∑—ã
          console.log(`üîç Searching phrase translation for: "${text}"`);

          const cleanPhrase = text
            .toLowerCase()
            .trim()
            .replace(/[.,!?;:]/g, "");

          // 1. –°–ù–ê–ß–ê–õ–ê –∏—â–µ–º —Ç–æ—á–Ω—É—é —Ñ–æ—Ä–º—É —Ñ—Ä–∞–∑—ã –≤ formTranslations
          let foundTranslation = formTranslations?.get?.(cleanPhrase);

          if (foundTranslation) {
            translationText = foundTranslation;
            contextInfo = `Phrase form: ${card.base_form?.trim()} ‚Üí ${text}`;
            console.log(`‚úÖ Found exact phrase form: "${text}" ‚Üí "${foundTranslation}"`);
          } else {
            // 2. –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            const phraseVariants = [
              cleanPhrase.replace(/ /g, "_"), // dzim≈°anas_dienas
              cleanPhrase.replace(/ /g, ""), // dzim≈°anasdienas
              cleanPhrase.replace(/ /g, "-"), // dzim≈°anas-dienas
            ];

            for (const variant of phraseVariants) {
              foundTranslation = formTranslations?.get?.(variant);
              if (foundTranslation) {
                translationText = foundTranslation;
                contextInfo = `Phrase variant: ${variant}`;
                console.log(`‚úÖ Found phrase variant: "${variant}" ‚Üí "${foundTranslation}"`);
                break;
              }
            }
          }

          // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
          if (!translationText && cleanPhrase.includes(" ")) {
            console.log(`üîß Building phrase translation from words: "${cleanPhrase}"`);

            const words = cleanPhrase.split(" ");
            const wordTranslations = words
              .map(word => formTranslations?.get?.(word.trim()))
              .filter(t => t && t.length > 0);

            if (wordTranslations.length > 0) {
              // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ª–∞—Ç—ã—à—Å–∫–∏—Ö —Ñ—Ä–∞–∑
              if (
                words.length === 2 &&
                (words.includes("dzim≈°anas") || words.includes("diena") || words.includes("dienas"))
              ) {
                // –î–ª—è "dzim≈°anas dienas" = "—Ä–æ–∂–¥–µ–Ω–∏—è" + "–¥–Ω—è" ‚Üí "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"
                translationText = wordTranslations.reverse().join(" ");
                console.log(`üîß Built Latvian phrase (reversed): "${translationText}"`);
              } else {
                translationText = wordTranslations.join(" ");
                console.log(`üîß Built phrase (normal order): "${translationText}"`);
              }
              contextInfo = `Built from: ${words.join(" ")}`;
            }
          }

          // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å base_form –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–æ–±–µ–ª–æ–≤)
          if (!translationText) {
            const cardBaseForm = (card.base_form || "")
              .toLowerCase()
              .trim()
              .replace(/[.,!?;:]/g, "");

            if (
              cardBaseForm === cleanPhrase ||
              cardBaseForm.includes(cleanPhrase) ||
              cleanPhrase.includes(cardBaseForm)
            ) {
              translationText = card.base_translation || "";
              contextInfo = `Phrase base: ${card.base_form?.trim()}`;
              console.log(`‚ö†Ô∏è Using base translation for phrase: "${text}" ‚Üí "${translationText}"`);
            }
          }

          // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
          if (!translationText) {
            translationText = card.base_translation || card.back || "Phrase translation not found";
            contextInfo = `Phrase fallback: ${card.base_form?.trim() || text}`;
            console.log(`‚ùå Using fallback for phrase: "${text}" ‚Üí "${translationText}"`);
          }

          // 6. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
          if (typeof translationText !== "string") {
            console.error("‚ö†Ô∏è Phrase translationText is not string:", translationText);
            translationText = String(translationText) || "Phrase translation error";
          }
        } else {
          // –î–õ–Ø –°–õ–û–í: –∏—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
          console.log(
            `üîç Searching word form translation for: "${text}" in sentence: "${currentSentence || "unknown"}"`
          );

          let foundTranslation = null;
          let foundContext = "";

          if (currentSentence) {
            // 1. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
            const formResult = findFormTranslation(text, currentSentence, formTranslations);

            if (formResult) {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
              if (typeof formResult === "string") {
                foundTranslation = formResult;
              } else if (typeof formResult === "object" && formResult.translation) {
                foundTranslation = formResult.translation;
              }

              if (foundTranslation) {
                foundContext = `Form: ${card.base_form} ‚Üí ${text}`;
                console.log(`‚úÖ Found form translation: "${text}" ‚Üí "${foundTranslation}"`);
              }
            }

            // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤—É—Ö—Å–ª–æ–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            if (!foundTranslation) {
              const cleanText = text.toLowerCase().replace(/[.,!?;:]/g, "");
              const sentenceWords = currentSentence.toLowerCase().split(/\s+/);
              const wordIndex = sentenceWords.findIndex(
                w => w.replace(/[.,!?;:]/g, "") === cleanText
              );

              if (wordIndex >= 0 && wordIndex < sentenceWords.length - 1) {
                const nextWord = sentenceWords[wordIndex + 1]?.replace(/[.,!?;:]/g, "");

                if (nextWord) {
                  const twoWordPhrase = `${cleanText} ${nextWord}`;
                  console.log(`üîç Checking two-word phrase: "${twoWordPhrase}"`);

                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã —Ü–µ–ª–∏–∫–æ–º
                  const phraseTranslation = formTranslations?.get?.(twoWordPhrase);

                  if (phraseTranslation) {
                    foundTranslation = phraseTranslation;
                    foundContext = `Phrase: ${cleanText} ${nextWord}`;
                    console.log(
                      `‚úÖ Found phrase translation: "${twoWordPhrase}" ‚Üí "${phraseTranslation}"`
                    );
                  } else {
                    // –°–æ–±–∏—Ä–∞–µ–º –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
                    const word1Trans = formTranslations?.get?.(cleanText);
                    const word2Trans = formTranslations?.get?.(nextWord);

                    if (word1Trans && word2Trans) {
                      if (
                        cleanText === "dzim≈°anas" &&
                        (nextWord === "dienas" || nextWord === "diena")
                      ) {
                        // –î–ª—è –ª–∞—Ç—ã—à—Å–∫–æ–≥–æ: "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è" –∏–ª–∏ "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
                        foundTranslation = `${word2Trans} ${word1Trans}`;
                        foundContext = `Built phrase: ${nextWord} ${cleanText}`;
                        console.log(`üîß Built "${twoWordPhrase}": "${foundTranslation}"`);
                      } else {
                        foundTranslation = `${word1Trans} ${word2Trans}`;
                        foundContext = `Built phrase: ${cleanText} ${nextWord}`;
                        console.log(`üîß Built phrase: "${foundTranslation}"`);
                      }
                    }
                  }
                }
              }
            }
          }

          // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ fallback
          if (foundTranslation) {
            translationText = foundTranslation;
            contextInfo = foundContext;
          } else {
            // Fallback –∫ base_translation
            translationText = card.base_translation || card.back || "Translation not found";
            contextInfo = `Base: ${card.base_form}`;
            console.log(`‚ö†Ô∏è Using base translation: "${text}" ‚Üí "${translationText}"`);
          }

          // 4. –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ translationText —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
          if (typeof translationText !== "string") {
            console.error("‚ö†Ô∏è translationText is not string:", translationText);
            translationText = String(translationText) || "Error: invalid translation";
          }
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ tooltip
        const tooltipX = rect.left - containerRect.left + rect.width / 2;
        const tooltipY = rect.top - containerRect.top - 60;

        setTooltip({
          show: true,
          text: translationText,
          context: contextInfo,
          x: tooltipX,
          y: tooltipY,
          isPhrase: isPhrase,
        });

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        if ((event.currentTarget as HTMLElement).style) {
          (event.currentTarget as HTMLElement).style.backgroundColor = "#fef3c7"; // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω –ø—Ä–∏ –ø–æ–∫–∞–∑–µ tooltip
        }
      } catch (error) {
        console.error("‚ùå Tooltip positioning error:", error);

        // Fallback tooltip –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setTooltip({
          show: true,
          text: card.base_translation || card.back || "Translation error",
          context: "Error occurred",
          x: 0,
          y: 0,
          isPhrase: isPhrase,
        });
      }
    },
    [formTranslations]
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
  console.log("üìñ [ReadingView] inputText length:", inputText?.length);
  console.log("üìñ [ReadingView] flashcards:", flashcards.length);

  if (!inputText) {
    return (
      <div className={`text-center text-white ${className}`} data-testid={testId}>
        <p style={{ fontFamily: "Noto Sans Display, sans-serif" }}>No text available for reading</p>
      </div>
    );
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–æ–≤
  const words = inputText.split(/(\s+)/);
  const renderedElements: React.ReactNode[] = [];
  let i = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
  while (i < words.length) {
    const word = words[i];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    if (/^\s+$/.test(word)) {
      renderedElements.push(<span key={i}>{word}</span>);
      i++;
      continue;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å—Ç—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    if (!word.trim() || /^[.,!?;:]+$/.test(word.trim())) {
      renderedElements.push(<span key={i}>{word}</span>);
      i++;
      continue;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É
    const phraseMatch = findPhraseAtPosition(words, i, flashcards);

    if (phraseMatch) {
      // –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ - —Å–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      const phraseElements = [];
      let phraseWordsCollected = 0;
      let j = i;

      while (j < words.length && phraseWordsCollected < phraseMatch.length) {
        if (/^\s+$/.test(words[j])) {
          phraseElements.push(words[j]);
        } else {
          phraseElements.push(words[j]);
          phraseWordsCollected++;
        }
        j++;
      }

      const phraseText = phraseElements.join("");

      renderedElements.push(
        <span
          key={`phrase-${i}`}
          className="hover:bg-blue-100 cursor-pointer border-b-2 border-dotted border-blue-400 bg-blue-50"
          onMouseEnter={e =>
            handleWordHover(
              phraseMatch.card,
              phraseText,
              e,
              true,
              getContainingSentence(i, words, inputText)
            )
          }
          onMouseLeave={hideTooltip}
        >
          {phraseText}
        </span>
      );

      i = j;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
    const wordMatch = findTranslationForText(word.trim(), flashcards);

    if (wordMatch) {
      renderedElements.push(
        <span
          key={i}
          className="hover:bg-yellow-100 cursor-pointer border-b border-dotted border-orange-300"
          onMouseEnter={e =>
            handleWordHover(
              wordMatch.card,
              word,
              e,
              false,
              getContainingSentence(i, words, inputText)
            )
          }
          onMouseLeave={hideTooltip}
        >
          {word}
        </span>
      );
    } else {
      renderedElements.push(<span key={i}>{word}</span>);
    }

    i++;
  }

  return (
    <div className={`w-full max-w-4xl mx-auto p-8 ${className}`} data-testid={testId}>
      {/* –õ–µ–≥–µ–Ω–¥–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤ */}
      <div
        className="rounded-2xl p-4 shadow-lg mb-4"
        style={{ backgroundColor: "rgba(106, 155, 204, 0.3)" }}
      >
        <div
          className="flex items-center justify-center space-x-6 text-sm"
          style={{ fontFamily: "Noto Sans Display, sans-serif" }}
        >
          <div className="flex items-center space-x-2">
            <span className="px-2 py-1 bg-blue-50 border-b-2 border-dotted border-blue-400 rounded">
              phrase example
            </span>
            <span className="text-white">üìñ Phrases (blue)</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="px-2 py-1 bg-yellow-50 border-b border-dotted border-orange-300 rounded">
              word
            </span>
            <span className="text-white">üìù Words (yellow)</span>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
      <div className="bg-white rounded-3xl p-8 shadow-lg relative">
        <div
          className="text-gray-900 leading-relaxed"
          style={{
            fontFamily: "Noto Sans Display, sans-serif",
            fontSize: "18px",
            lineHeight: "1.8",
          }}
          data-testid="interactive-text"
        >
          {renderedElements}
        </div>

        {/* Tooltip */}
        {tooltip.show && (
          <div
            className={`absolute z-50 px-3 py-2 rounded-lg shadow-lg pointer-events-none max-w-xs ${
              tooltip.isPhrase ? "bg-blue-800 text-white" : "bg-gray-800 text-white"
            }`}
            style={{
              left: tooltip.x,
              top: tooltip.y,
              transform: "translateX(-50%)",
              fontFamily: "Noto Sans Display, sans-serif",
              fontSize: "14px",
            }}
            data-testid="tooltip"
          >
            <div className="font-medium">{tooltip.text}</div>
            {tooltip.context && <div className="text-xs opacity-90 mt-1">{tooltip.context}</div>}
          </div>
        )}
      </div>
    </div>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default ReadingView;
