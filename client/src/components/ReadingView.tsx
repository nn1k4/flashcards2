import React from "react";
import type { FlashcardNew, TooltipState, BaseComponentProps } from "../types";
import { findPhraseAtPosition, getContainingSentence } from "../utils/textUtils";
import { findTranslationForText } from "../utils/cardUtils";

// ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –•–ï–õ–ü–ï–†–´ ==================
const cleanToken = (s: string): string =>
  (s || "")
    .toLowerCase()
    .trim()
    .replace(/[.,!?;:()\[\]"'`¬´¬ª]/g, "");

/**
 * –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã/—Ñ—Ä–∞–∑—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
 * 1) –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: contexts[].forms[{ form, translation }]
 * 2) –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: context.text_forms[] + context.word_form_translations[] (–ø–æ –∏–Ω–¥–µ–∫—Å—É)
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { translation, source } –∏–ª–∏ null
 */
function lookupFormTranslationFromCard(
  card: any,
  rawText: string
): { translation: string; source: "new.forms" | "old.context" } | null {
  if (!card || !Array.isArray(card.contexts)) return null;
  const needle = cleanToken(rawText);

  for (const ctx of card.contexts) {
    // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞
    if (Array.isArray(ctx?.forms) && ctx.forms.length > 0) {
      for (const f of ctx.forms) {
        const form = cleanToken(f?.form || "");
        if (form && form === needle) {
          const tr = (f?.translation || "").toString().trim();
          if (tr) return { translation: tr, source: "new.forms" };
        }
      }
    }

    // –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞
    if (Array.isArray(ctx?.text_forms) && ctx.text_forms.length > 0) {
      const index = ctx.text_forms.findIndex((t: string) => cleanToken(t) === needle);
      if (index >= 0) {
        // –ë–µ—Ä–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ word_form_translations –ø–æ –∏–Ω–¥–µ–∫—Å—É
        const tr =
          (Array.isArray(ctx.word_form_translations) &&
            (ctx.word_form_translations[index] || ctx.word_form_translations[0])) ||
          "";
        const trClean = (tr || "").toString().trim();
        if (trClean) return { translation: trClean, source: "old.context" };
      }
    }
  }

  return null;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–ø—Å–æ–≤ –¥–ª—è ReadingView –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface ReadingViewProps extends BaseComponentProps {
  inputText: string; // –∏—Å—Ö–æ–¥–Ω—ã–π –ª–∞—Ç—ã—à—Å–∫–∏–π —Ç–µ–∫—Å—Ç
  formTranslations: Map<string, string>; // Map –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º —Å–ª–æ–≤
  flashcards: FlashcardNew[]; // –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º–∏
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
export const ReadingView: React.FC<ReadingViewProps> = ({
  inputText,
  formTranslations,
  flashcards,
  className = "",
  "data-testid": testId,
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ tooltip
  const [tooltip, setTooltip] = React.useState<TooltipState>({
    show: false,
    text: "",
    context: "",
    x: 0,
    y: 0,
    isPhrase: false,
  });

  // –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è tooltip —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∏–ª–µ–π DOM
  const hideTooltip = React.useCallback((event?: React.MouseEvent) => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∏–ª–∏ DOM —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ event –ø–µ—Ä–µ–¥–∞–Ω
    if (event?.currentTarget) {
      const element = event.currentTarget as HTMLElement;
      if (element.style) {
        element.style.backgroundColor = ""; // –£–±–∏—Ä–∞–µ–º –∂—ë–ª—Ç—ã–π —Ñ–æ–Ω
      }
    }

    setTooltip({
      show: false,
      text: "",
      context: "",
      x: 0,
      y: 0,
      isPhrase: false,
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ hover –Ω–∞ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É
  const handleWordHover = React.useCallback(
    (
      card: FlashcardNew,
      text: string,
      event: React.MouseEvent,
      isPhrase: boolean,
      currentSentence?: string
    ) => {
      if (!card || !event?.currentTarget) return;

      console.log(`üéØ handleWordHover called:`, {
        text,
        isPhrase,
        currentSentence: currentSentence ? currentSentence.substring(0, 50) + "..." : "none",
        cardBaseForm: card.base_form,
        hasWordFormTranslation: !!(card as any).word_form_translation,
      });

      try {
        const rect = (event.currentTarget as HTMLElement).getBoundingClientRect();
        const containerRect = event.currentTarget.closest(".bg-white")?.getBoundingClientRect();

        if (!containerRect) return;

        let translationText = "";
        let contextInfo = "";

        // ===== –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞/—Ñ—Ä–∞–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏ (–Ω–æ–≤–∞—è/—Å—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞) =====
        const fromCard = lookupFormTranslationFromCard(card as any, text);
        if (fromCard?.translation) {
          translationText = fromCard.translation;
          contextInfo = isPhrase
            ? `Phrase (contexts): ${card.base_form || text}`
            : `Form (contexts): ${card.base_form} ‚Üí ${text}`;
          console.log(`‚úÖ Using ${fromCard.source}: "${text}" ‚Üí "${translationText}"`);
        }

        // ===== –ü–†–ò–û–†–ò–¢–ï–¢ 2: word_form_translation –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ) =====
        if (!translationText && (card as any).word_form_translation) {
          translationText = (card as any).word_form_translation!;
          contextInfo = isPhrase
            ? `Phrase: ${card.base_form || text}`
            : `Form: ${card.base_form} ‚Üí ${text}`;
          console.log(`‚úÖ Using word_form_translation: "${text}" ‚Üí "${translationText}"`);
        }

        // ===== –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ü–æ–∏—Å–∫ –≤ formTranslations (–≥–ª–æ–±–∞–ª—å–Ω–∞—è Map) =====
        if (!translationText && formTranslations && formTranslations.size > 0) {
          const cleanText = cleanToken(text);

          if (isPhrase) {
            console.log(`üîç Searching phrase in formTranslations: "${cleanText}"`);
            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            translationText = formTranslations.get(cleanText) || "";

            // –í–∞—Ä–∏–∞–Ω—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            if (!translationText) {
              const variants = [
                cleanText.replace(/ /g, "_"),
                cleanText.replace(/ /g, ""),
                cleanText.replace(/ /g, "-"),
              ];
              for (const variant of variants) {
                const found = formTranslations.get(variant);
                if (found) {
                  translationText = found;
                  console.log(`‚úÖ Found phrase variant: "${variant}" ‚Üí "${found}"`);
                  break;
                }
              }
            }

            // –°–æ–±—Ä–∞—Ç—å –∏–∑ —Å–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
            if (!translationText && cleanText.includes(" ")) {
              const words = cleanText.split(" ").filter(Boolean);
              const translations = words
                .map(w => formTranslations.get(w))
                .filter(Boolean) as string[];

              if (translations.length > 0) {
                // –°–ø–µ—Ü-–∫–µ–π—Å: "dzim≈°anas dienas" ‚Üí "–¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"
                if (
                  words.includes("dzim≈°anas") &&
                  (words.includes("diena") || words.includes("dienas"))
                ) {
                  translationText = translations.reverse().join(" ");
                } else {
                  translationText = translations.join(" ");
                }
                console.log(`üîß Built phrase from words: "${translationText}"`);
              }
            }

            if (translationText) {
              contextInfo = `Phrase: ${card.base_form || text}`;
            }
          } else {
            // –î–ª—è —Å–ª–æ–≤
            console.log(`üîç Searching word in formTranslations: "${cleanText}"`);
            const formTranslation = formTranslations.get(cleanText);
            if (formTranslation) {
              translationText = formTranslation;
              contextInfo = `Form: ${card.base_form} ‚Üí ${text}`;
              console.log(`‚úÖ Found in formTranslations: "${cleanText}" ‚Üí "${formTranslation}"`);
            }

            // –î–≤—É—Ö—Å–ª–æ–≤–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if (!translationText && currentSentence) {
              const sentenceWords = currentSentence
                .split(/\s+/)
                .map(w => cleanToken(w))
                .filter(Boolean);
              const w = cleanToken(text);
              const wordIndex = sentenceWords.findIndex(sw => sw === w);

              if (wordIndex >= 0 && wordIndex < sentenceWords.length - 1) {
                const phrase = `${w} ${sentenceWords[wordIndex + 1]}`;
                const phraseTranslation = formTranslations.get(phrase);
                if (phraseTranslation) {
                  translationText = phraseTranslation;
                  contextInfo = `Phrase: ${phrase}`;
                  console.log(`‚úÖ Found two-word phrase: "${phrase}" ‚Üí "${phraseTranslation}"`);
                }
              }
            }
          }
        }

        // ===== –ü–†–ò–û–†–ò–¢–ï–¢ 4: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ (findTranslationForText) =====
        if (!translationText && currentSentence) {
          const viaCard = findTranslationForText(text.trim(), flashcards, currentSentence);
          if (viaCard?.contextTranslation) {
            translationText = viaCard.contextTranslation;
            contextInfo = isPhrase
              ? "Sentence translation (context)"
              : "Sentence translation (context)";
            console.log(`üß† Using context sentence translation: "${translationText}"`);
          }
        }

        // ===== –ü–†–ò–û–†–ò–¢–ï–¢ 5: card.back (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ), –∑–∞—Ç–µ–º base_translation =====
        if (!translationText && (card as any).back) {
          translationText = (card as any).back!;
          contextInfo = `Card back: ${card.base_form}`;
          console.log(`üìù Using card.back: "${text}" ‚Üí "${translationText}"`);
        }
        if (!translationText && card.base_translation) {
          translationText = card.base_translation;
          contextInfo = `Base: ${card.base_form}`;
          console.log(`‚ö†Ô∏è Using base_translation: "${text}" ‚Üí "${translationText}"`);
        }

        // ===== FALLBACK =====
        if (!translationText) {
          translationText = "Translation not found";
          contextInfo = "No translation available";
          console.log(`‚ùå No translation found for: "${text}"`);
        }

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ tooltip
        const tooltipX = rect.left - containerRect.left + rect.width / 2;
        const tooltipY = rect.top - containerRect.top - 60;

        setTooltip({
          show: true,
          text: typeof translationText === "string" ? translationText : String(translationText),
          context: contextInfo,
          x: tooltipX,
          y: tooltipY,
          isPhrase: isPhrase,
        });

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const element = event.currentTarget as HTMLElement;
        if (element.style) {
          element.style.backgroundColor = "#fef3c7"; // –ñ–µ–ª—Ç—ã–π —Ñ–æ–Ω
        }
      } catch (error) {
        console.error("‚ùå Tooltip error:", error);

        // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
        setTooltip({
          show: true,
          text: (card.base_translation || (card as any).back || "Error") as string,
          context: "Error occurred",
          x: 0,
          y: 0,
          isPhrase: isPhrase,
        });
      }
    },
    [formTranslations, flashcards]
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
  console.log("üìñ [ReadingView] inputText length:", inputText?.length);
  console.log("üìñ [ReadingView] flashcards:", flashcards.length);

  if (!inputText) {
    return (
      <div className={`text-center text-white ${className}`} data-testid={testId}>
        <p style={{ fontFamily: "Noto Sans Display, sans-serif" }}>No text available for reading</p>
      </div>
    );
  }

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–µ–ª–æ–≤
  const words = inputText.split(/(\s+)/);
  const renderedElements: React.ReactNode[] = [];
  let i = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
  while (i < words.length) {
    const word = words[i];

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    if (/^\s+$/.test(word)) {
      renderedElements.push(<span key={i}>{word}</span>);
      i++;
      continue;
    }

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å—Ç—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    if (!word.trim() || /^[.,!?;:]+$/.test(word.trim())) {
      renderedElements.push(<span key={i}>{word}</span>);
      i++;
      continue;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ—Ä–∞–∑—É
    const phraseMatch = findPhraseAtPosition(words, i, flashcards);

    if (phraseMatch) {
      // –ù–∞–π–¥–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ - —Å–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
      const phraseElements: string[] = [];
      let phraseWordsCollected = 0;
      let j = i;

      while (j < words.length && phraseWordsCollected < phraseMatch.length) {
        if (/^\s+$/.test(words[j])) {
          phraseElements.push(words[j]);
        } else {
          phraseElements.push(words[j]);
          phraseWordsCollected++;
        }
        j++;
      }

      const phraseText = phraseElements.join("");

      renderedElements.push(
        <span
          key={`phrase-${i}`}
          className="hover:bg-blue-100 cursor-pointer border-b-2 border-dotted border-blue-400 bg-blue-50"
          onMouseEnter={e =>
            handleWordHover(
              phraseMatch.card,
              phraseText,
              e,
              true,
              getContainingSentence(i, words, inputText)
            )
          }
          onMouseLeave={hideTooltip}
        >
          {phraseText}
        </span>
      );

      i = j;
      continue;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ
    const wordMatch = findTranslationForText(word.trim(), flashcards);

    if (wordMatch) {
      renderedElements.push(
        <span
          key={i}
          className="hover:bg-yellow-100 cursor-pointer border-b border-dotted border-orange-300"
          onMouseEnter={e =>
            handleWordHover(
              wordMatch.card,
              word,
              e,
              false,
              getContainingSentence(i, words, inputText)
            )
          }
          onMouseLeave={hideTooltip}
        >
          {word}
        </span>
      );
    } else {
      renderedElements.push(<span key={i}>{word}</span>);
    }

    i++;
  }

  return (
    <div className={`w-full max-w-4xl mx-auto p-8 ${className}`} data-testid={testId}>
      {/* –õ–µ–≥–µ–Ω–¥–∞ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤ */}
      <div
        className="rounded-2xl p-4 shadow-lg mb-4"
        style={{ backgroundColor: "rgba(106, 155, 204, 0.3)" }}
      >
        <div
          className="flex items-center justify-center space-x-6 text-sm"
          style={{ fontFamily: "Noto Sans Display, sans-serif" }}
        >
          <div className="flex items-center space-x-2">
            <span className="px-2 py-1 bg-blue-50 border-b-2 border-dotted border-blue-400 rounded">
              phrase example
            </span>
            <span className="text-white">üìñ Phrases (blue)</span>
          </div>
          <div className="flex items-center space-x-2">
            <span className="px-2 py-1 bg-yellow-50 border-b border-dotted border-orange-300 rounded">
              word
            </span>
            <span className="text-white">üìù Words (yellow)</span>
          </div>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */}
      <div className="bg-white rounded-3xl p-8 shadow-lg relative">
        <div
          className="text-gray-900 leading-relaxed"
          style={{
            fontFamily: "Noto Sans Display, sans-serif",
            fontSize: "18px",
            lineHeight: "1.8",
          }}
          data-testid="interactive-text"
        >
          {renderedElements}
        </div>

        {/* Tooltip */}
        {tooltip.show && (
          <div
            className={`absolute z-50 px-3 py-2 rounded-lg shadow-lg pointer-events-none max-w-xs ${
              tooltip.isPhrase ? "bg-blue-800 text-white" : "bg-gray-800 text-white"
            }`}
            style={{
              left: tooltip.x,
              top: tooltip.y,
              transform: "translateX(-50%)",
              fontFamily: "Noto Sans Display, sans-serif",
              fontSize: "14px",
            }}
            data-testid="tooltip"
          >
            <div className="font-medium">{tooltip.text}</div>
            {tooltip.context && <div className="text-xs opacity-90 mt-1">{tooltip.context}</div>}
          </div>
        )}
      </div>
    </div>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default ReadingView;
