import React, { useState } from "react";
import type { FlashcardNew, BaseComponentProps, Context } from "../types";

// ================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –•–ï–õ–ü–ï–†–´ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–∞—Ä–æ–π/–Ω–æ–≤–æ–π —Å—Ö–µ–º) ==================
function getUnit(card: any): "word" | "phrase" {
  return card?.unit === "phrase" ? "phrase" : "word";
}

function getContextCount(card: any): number {
  return Array.isArray(card?.contexts) ? card.contexts.length : 0;
}

function getPreviewContext(card: any): { lv: string; ru: string } | null {
  if (!Array.isArray(card?.contexts) || card.contexts.length === 0) return null;
  const c = card.contexts[0] || {};
  const lv = (c.original_phrase || c.latvian || "").toString();
  const ru = (c.phrase_translation || c.russian || "").toString();
  if (!lv && !ru) return null;
  return { lv, ru };
}

// ================== –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ==================
interface EditViewProps extends BaseComponentProps {
  flashcards: FlashcardNew[]; // –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  onCardUpdate: (index: number, field: string, value: string | boolean | Context[]) => void; // —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  onToggleVisibility?: (index: number) => void; // ‚úÖ optional if not required internally
  onDeleteCard: (index: number) => void; // —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
  onAddCard: () => void; // —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  onClearAll: () => void; // –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
}

// ================== –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–ª–µ—à-–∫–∞—Ä—Ç ==================
export const EditView: React.FC<EditViewProps> = ({
  flashcards,
  onCardUpdate,
  onToggleVisibility,
  onDeleteCard,
  onAddCard,
  onClearAll,
  className = "",
  "data-testid": testId,
}) => {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(0);

  // üìå –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  React.useEffect(() => {
    setCurrentPage(0);
  }, [searchTerm]);

  const cardsPerPage = 20;

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—É—á–∏—Ç—ã–≤–∞–µ–º base_form/base_translation/unit)
  const filteredCards = React.useMemo(() => {
    if (!searchTerm.trim()) return flashcards;
    const q = searchTerm.toLowerCase();
    return flashcards.filter(card => {
      const bf = (card.base_form || "").toLowerCase();
      const bt = (card.base_translation || "").toLowerCase();
      const u = getUnit(card);
      return bf.includes(q) || bt.includes(q) || u.includes(q);
    });
  }, [flashcards, searchTerm]);

  // –ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const visibleCards = filteredCards.filter(card => card.visible !== false);
  const totalPages = Math.ceil(filteredCards.length / cardsPerPage);
  const startIndex = currentPage * cardsPerPage;
  const endIndex = Math.min(startIndex + cardsPerPage, filteredCards.length);
  const cards = filteredCards.slice(startIndex, endIndex);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  React.useEffect(() => {
    console.log(
      `üìä EditView: –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${filteredCards.length} | –≤–∏–¥–∏–º—ã—Ö: ${visibleCards.length}`
    );
  }, [filteredCards.length, visibleCards.length]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageChange = (page: number) => {
    setCurrentPage(Math.max(0, Math.min(page, totalPages - 1)));
  };

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
  const handleTextChange =
    (index: number, field: "base_form" | "base_translation") =>
    (e: React.ChangeEvent<HTMLInputElement>) => {
      onCardUpdate(index, field, e.target.value);
    };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã unit
  const handleUnitChange = (index: number) => (e: React.ChangeEvent<HTMLSelectElement>) => {
    onCardUpdate(index, "unit", e.target.value);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º onToggleVisibility –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
  const handleVisibilityToggle = (index: number, currentVisible: boolean) => {
    if (typeof onToggleVisibility === "function") {
      onToggleVisibility(index);
    } else {
      onCardUpdate(index, "visible", !currentVisible);
    }
  };

  return (
    <div className={`w-full max-w-7xl mx-auto p-8 ${className}`} data-testid={testId}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="bg-white rounded-3xl p-6 shadow-lg mb-6">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
          <h2
            className="text-2xl font-bold text-gray-800"
            style={{ fontFamily: "Noto Sans Display, sans-serif" }}
          >
            Edit Flashcards ({filteredCards.length} total)
          </h2>
          <div className="flex items-center gap-2">
            <button
              onClick={onAddCard}
              className="px-4 py-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors"
              style={{ fontFamily: "Noto Sans Display, sans-serif" }}
              data-testid="add-card-button"
            >
              + Add New Card
            </button>
            <button
              onClick={onClearAll}
              className="px-4 py-2 bg-red-600 text-white rounded-full hover:bg-red-700 transition-colors"
              style={{ fontFamily: "Noto Sans Display, sans-serif" }}
              data-testid="clear-all-button"
              title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
            >
              Clear All
            </button>
          </div>
        </div>

        {/* –ü–æ–∏—Å–∫ */}
        <input
          type="text"
          placeholder="Search cards by base form, translation or unit..."
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
          style={{ fontFamily: "Noto Sans Display, sans-serif" }}
          data-testid="search-input"
        />
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ */}
      <div className="bg-white rounded-3xl shadow-lg overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase w-16">
                  VISIBLE
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase w-48">
                  BASE FORM
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase w-48">
                  BASE TRANSLATION
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase w-28">
                  UNIT
                </th>
                <th className="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase w-28">
                  CONTEXTS
                </th>
                <th className="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase w-24">
                  ACTIONS
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {cards.map((card, idx) => {
                const realIndex = startIndex + idx;
                const needsReprocessing =
                  (card as { needsReprocessing?: boolean }).needsReprocessing === true;
                const preview = getPreviewContext(card);
                const contextCount = getContextCount(card);
                const unit = getUnit(card);
                const isVisible = card.visible !== false;

                return (
                  <tr
                    key={realIndex}
                    className={`${!isVisible ? "opacity-50 bg-gray-100" : ""}`}
                    data-testid={`card-row-${realIndex}`}
                  >
                    {/* VISIBLE checkbox */}
                    <td className="px-3 py-4 align-top">
                      <div className="flex items-center gap-2">
                        <input
                          type="checkbox"
                          disabled={needsReprocessing}
                          checked={isVisible}
                          onChange={() => handleVisibilityToggle(realIndex, isVisible)}
                          className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
                          data-testid="visibility-checkbox"
                          title="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"
                        />
                        {needsReprocessing && (
                          <span className="text-[10px] px-2 py-0.5 rounded bg-amber-100 text-amber-700">
                            needs reprocessing
                          </span>
                        )}
                      </div>
                    </td>

                    {/* BASE FORM + –ø—Ä–µ–≤—å—é —Ñ—Ä–∞–∑—ã */}
                    <td className="px-3 py-4 align-top">
                      <input
                        type="text"
                        disabled={needsReprocessing}
                        value={card.base_form || ""}
                        onChange={handleTextChange(realIndex, "base_form")}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É..."
                        className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
                        style={{ fontFamily: "Noto Sans Display, sans-serif" }}
                        data-testid="base-form-input"
                      />
                      {preview?.lv && (
                        <div className="mt-1 text-xs text-gray-500 line-clamp-2">
                          <span className="font-medium">LV:</span> {preview.lv}
                        </div>
                      )}
                    </td>

                    {/* BASE TRANSLATION + –ø—Ä–µ–≤—å—é –ø–µ—Ä–µ–≤–æ–¥–∞ */}
                    <td className="px-3 py-4 align-top">
                      <input
                        type="text"
                        disabled={needsReprocessing}
                        value={card.base_translation || ""}
                        onChange={handleTextChange(realIndex, "base_translation")}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥..."
                        className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
                        style={{ fontFamily: "Noto Sans Display, sans-serif" }}
                        data-testid="base-translation-input"
                      />
                      {preview?.ru && (
                        <div className="mt-1 text-xs text-gray-500 line-clamp-2">
                          <span className="font-medium">RU:</span> {preview.ru}
                        </div>
                      )}
                    </td>

                    {/* UNIT */}
                    <td className="px-3 py-4 align-top">
                      <select
                        className="w-full p-2 border border-gray-300 rounded focus:outline-none focus:border-blue-500"
                        value={unit}
                        onChange={handleUnitChange(realIndex)}
                        disabled={needsReprocessing}
                        title="–¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏"
                      >
                        <option value="word">word</option>
                        <option value="phrase">phrase</option>
                      </select>
                    </td>

                    {/* CONTEXTS count */}
                    <td className="px-3 py-4 align-top">
                      <span className="inline-flex items-center gap-2 text-sm">
                        <span className="inline-block w-2 h-2 rounded-full bg-emerald-500" />
                        {contextCount}
                      </span>
                    </td>

                    {/* ACTIONS */}
                    <td className="px-3 py-4 text-center align-top">
                      {!needsReprocessing && (
                        <button
                          onClick={() => onDeleteCard(realIndex)}
                          className="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded transition-colors"
                          title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"
                          data-testid="delete-card-button"
                        >
                          üóëÔ∏è
                        </button>
                      )}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>

        {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
        {totalPages > 1 && (
          <div className="px-6 py-4 bg-gray-50 border-t">
            <div className="flex justify-between items-center">
              <div className="text-sm text-gray-700">
                Showing {startIndex + 1} to {endIndex} of {filteredCards.length} cards
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 0}
                  className={`px-3 py-1 rounded ${
                    currentPage === 0
                      ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                      : "bg-blue-600 text-white hover:bg-blue-700"
                  }`}
                  style={{ fontFamily: "Noto Sans Display, sans-serif" }}
                  data-testid="previous-page"
                >
                  Previous
                </button>

                <span
                  className="px-3 py-1 text-gray-700"
                  style={{ fontFamily: "Noto Sans Display, sans-serif" }}
                >
                  Page {currentPage + 1} of {totalPages}
                </span>

                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage >= totalPages - 1}
                  className={`px-3 py-1 rounded ${
                    currentPage >= totalPages - 1
                      ? "bg-gray-300 text-gray-500 cursor-not-allowed"
                      : "bg-blue-600 text-white hover:bg-blue-700"
                  }`}
                  style={{ fontFamily: "Noto Sans Display, sans-serif" }}
                  data-testid="next-page"
                >
                  Next
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="mt-6 text-center">
        <p
          className="text-white/80 text-sm"
          style={{ fontFamily: "Noto Sans Display, sans-serif" }}
        >
          üíæ All changes are saved automatically. Simple and clean interface.
        </p>
      </div>
    </div>
  );
};

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export default EditView;
