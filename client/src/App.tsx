// client/src/App.tsx
import React from "react";
import type { AppMode, Card, Context } from "./types";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
import Header from "./components/Header";
import ModeSelector from "./components/ModeSelector";
import Footer from "./components/Footer";
import TextInputView from "./components/TextInputView";
import FlashcardsView from "./components/FlashcardsView";
import ReadingView from "./components/ReadingView";
import TranslationView from "./components/TranslationView";
import EditView from "./components/EditView";
import BatchResultRetriever from "./components/BatchResultRetriever";
import { saveFormTranslations } from "./utils/cardUtils";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö—É–∫–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
import { useProcessing } from "./hooks/useProcessing";
import { useKeyboardNavigation } from "./hooks/useKeyboardNavigation";
import { useFileOperations } from "./hooks/useFileOperations";

// –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π retry –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { ErrorType } from "./utils/error-handler";
import type { QueueItem, RetryQueueStats } from "./hooks/useRetryQueue";

// ================== –õ–û–ö–ê–õ–¨–ù–´–ï –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ù–û–í–û–ô –°–•–ï–ú–´ ==================
// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è/–∫–ª—é—á–µ–π
const cleanToken = (s: string) =>
  (s || "")
    .toLowerCase()
    .trim()
    .replace(/[.,!?;:()\[\]"'`¬´¬ª]/g, "");

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ Map –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º –∏–∑ –ù–û–í–û–ô –∏ –°–¢–ê–†–û–ô —Å—Ç—Ä—É–∫—Ç—É—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
function deriveFormTranslations(cards: any[]): Map<string, string> {
  const map = new Map<string, string>();

  for (const card of cards || []) {
    const contexts = Array.isArray(card?.contexts) ? card.contexts : [];

    for (const ctx of contexts) {
      // –ù–æ–≤–∞—è —Å—Ö–µ–º–∞: contexts[].forms[] —Å { form, translation }
      if (Array.isArray(ctx?.forms) && ctx.forms.length > 0) {
        for (const f of ctx.forms) {
          const form = cleanToken(f?.form || "");
          const tr = (f?.translation || "").toString().trim();
          if (form && tr && !map.has(form)) map.set(form, tr);
        }
      }

      // –°—Ç–∞—Ä–∞—è —Å—Ö–µ–º–∞: contexts[].text_forms[] + word_form_translations[]
      if (Array.isArray(ctx?.text_forms) && ctx.text_forms.length > 0) {
        const wfts = Array.isArray(ctx?.word_form_translations) ? ctx.word_form_translations : [];
        ctx.text_forms.forEach((t: string, i: number) => {
          const key = cleanToken(t);
          const tr = (wfts[i] || wfts[0] || "").toString().trim();
          if (key && tr && !map.has(key)) map.set(key, tr);
        });
      }
    }
  }

  return map;
}

// ================== API Status Bar (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ==================
interface APIStatusBarProps {
  flashcards: Card[];
  retryQueue?: {
    queue: QueueItem[];
    stats: RetryQueueStats;
    isProcessing: boolean;
    clearQueue?: () => void;
  };
  onRetryProcessing?: () => Promise<{ processed: number; successful: number; failed: number }>;
  error?: string | null;
}

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ô APIStatusBar —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π retry queue
const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  retryQueue,
  onRetryProcessing,
  error,
}) => {
  // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª–µ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
  const cardsNeedingReprocessing = flashcards.filter(
    (card: any) => card?.needsReprocessing === true
  );

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º retry queue –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
  const totalProblems = retryQueue ? retryQueue.queue.length : cardsNeedingReprocessing.length;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ò–õ–ò –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  if (totalProblems === 0 && !error) return null;

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –∏–∑ retry queue
  const problemTypes = retryQueue
    ? retryQueue.queue.map(item => item.errorInfo?.type).filter(Boolean)
    : [];

  const hasApiOverload = problemTypes.includes(ErrorType.API_OVERLOADED);
  const hasRateLimit = problemTypes.includes(ErrorType.RATE_LIMITED);
  const hasNetworkErrors =
    problemTypes.includes(ErrorType.NETWORK_ERROR) ||
    problemTypes.includes(ErrorType.PROXY_UNAVAILABLE);
  const hasAuthErrors =
    problemTypes.includes(ErrorType.AUTHENTICATION) ||
    problemTypes.includes(ErrorType.INSUFFICIENT_QUOTA);

  const getMessage = () => {
    if (hasAuthErrors) return "üîë –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π API";
    if (hasApiOverload) return "üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω";
    if (hasRateLimit) return "üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤";
    if (hasNetworkErrors) return "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º";
    return `üîÑ ${totalProblems} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
  };

  const getRecommendation = () => {
    if (hasAuthErrors) return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞";
    if (hasApiOverload) return "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç";
    if (hasRateLimit) return "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π";
    if (hasNetworkErrors) return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞";
    return '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤';
  };

  const getStatusColor = () => {
    if (hasAuthErrors) return "#f44336"; // –∫—Ä–∞—Å–Ω—ã–π
    if (hasApiOverload) return "#ff5722"; // —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    if (hasRateLimit) return "#ff9800"; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    if (hasNetworkErrors) return "#2196f3"; // —Å–∏–Ω–∏–π
    return "#6A9BCC"; // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  };

  const isRetryDisabled = () => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º retry –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    return hasAuthErrors || retryQueue?.isProcessing;
  };

  return (
    <div
      data-testid="api-status-bar"
      style={{
        background: "rgba(255,255,255,0.15)",
        padding: "16px",
        borderRadius: "12px",
        margin: "16px 0",
        border: `2px solid ${getStatusColor()}`,
        backdropFilter: "blur(10px)",
      }}
    >
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      <div
        style={{
          marginBottom: "12px",
          fontSize: "16px",
          fontWeight: "bold",
          color: "white",
          fontFamily: "Noto Sans Display, sans-serif",
        }}
      >
        {getMessage()}
        {retryQueue?.isProcessing && (
          <span
            style={{
              marginLeft: "12px",
              color: "#4CAF50",
              fontSize: "14px",
            }}
          >
            üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...
          </span>
        )}
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */}
      <div
        style={{
          fontSize: "14px",
          opacity: 0.9,
          marginBottom: "12px",
          color: "white",
          fontFamily: "Noto Sans Display, sans-serif",
        }}
      >
        {getRecommendation()}
      </div>

      {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ retry queue */}
      {retryQueue && retryQueue.queue.length > 0 && (
        <div
          style={{
            fontSize: "12px",
            marginBottom: "12px",
            background: "rgba(0,0,0,0.2)",
            padding: "8px",
            borderRadius: "6px",
          }}
        >
          <div
            style={{
              fontWeight: "bold",
              marginBottom: "6px",
              color: "white",
              fontFamily: "Noto Sans Display, sans-serif",
            }}
          >
            –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:
          </div>
          {retryQueue.queue.slice(0, 3).map(item => (
            <div
              key={item.id}
              style={{
                marginLeft: "8px",
                opacity: 0.8,
                marginBottom: "4px",
                color: "white",
                fontFamily: "Noto Sans Display, sans-serif",
              }}
            >
              ‚Ä¢ {item.chunk.substring(0, 50)}...
              <span
                style={{
                  marginLeft: "8px",
                  fontSize: "11px",
                  opacity: 0.7,
                }}
              >
                ({item.errorInfo?.userMessage || "–æ—à–∏–±–∫–∞"})
              </span>
            </div>
          ))}
          {retryQueue.queue.length > 3 && (
            <div
              style={{
                marginLeft: "8px",
                opacity: 0.6,
                fontSize: "11px",
                color: "white",
                fontFamily: "Noto Sans Display, sans-serif",
              }}
            >
              ... –∏ –µ—â–µ {retryQueue.queue.length - 3}
            </div>
          )}
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry queue (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) */}
      {retryQueue?.stats && (
        <div
          style={{
            fontSize: "12px",
            opacity: 0.7,
            marginBottom: "12px",
            color: "white",
            fontFamily: "Noto Sans Display, sans-serif",
          }}
        >
          –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {retryQueue.stats.totalItems} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {retryQueue.stats.processed}{" "}
          | –ù–µ—É–¥–∞—á–Ω–æ: {retryQueue.stats.failed}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: "flex", gap: "8px", alignItems: "center" }}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ retry */}
        <button
          onClick={onRetryProcessing}
          disabled={isRetryDisabled()}
          style={{
            background: isRetryDisabled() ? "#666" : "#4CAF50",
            color: "white",
            border: "none",
            padding: "10px 20px",
            borderRadius: "6px",
            cursor: isRetryDisabled() ? "not-allowed" : "pointer",
            fontSize: "14px",
            fontWeight: "bold",
            transition: "all 0.2s ease",
            opacity: isRetryDisabled() ? 0.6 : 1,
            fontFamily: "Noto Sans Display, sans-serif",
          }}
          title={
            problemTypes.includes(ErrorType.AUTHENTICATION)
              ? "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
              : retryQueue?.isProcessing
                ? "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                : "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤"
          }
        >
          {retryQueue?.isProcessing
            ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
            : problemTypes.includes(ErrorType.AUTHENTICATION)
              ? "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
              : "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"}
        </button>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ */}
        {retryQueue && retryQueue.queue.length > 0 && !retryQueue.isProcessing && (
          <button
            onClick={() => retryQueue.clearQueue?.()}
            style={{
              background: "transparent",
              color: "white",
              border: "1px solid rgba(255,255,255,0.3)",
              padding: "6px 12px",
              borderRadius: "4px",
              cursor: "pointer",
              fontSize: "12px",
              transition: "all 0.2s ease",
              fontFamily: "Noto Sans Display, sans-serif",
            }}
            title="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å retry"
          >
            –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
          </button>
        )}
      </div>
    </div>
  );
};

// ================== –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==================
function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [mode, setMode] = React.useState<AppMode>("text");
  const [inputText, setInputText] = React.useState("");

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
  const [currentIndex, setCurrentIndex] = React.useState(0);
  const [flipped, setFlipped] = React.useState(false);

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å useProcessing ‚Äî —Ç–µ–ø–µ—Ä—å flashcards: Card[]
  const {
    state,
    flashcards, // ‚Üê Card[]
    translationText,
    processingProgress,
    formTranslations,
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,
    // retry + batch
    processRetryQueue,
    retryQueue,
    isBatchEnabled,
    setBatchEnabled,
    batchId,
    batchError,
  } = useProcessing(inputText, setMode, setInputText, setCurrentIndex, setFlipped);

  // –ö–æ–ª–±—ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
  const handleIndexChange = React.useCallback((idx: number) => setCurrentIndex(idx), []);
  const handleFlip = React.useCallback((value: boolean) => setFlipped(value), []);

  const handleHideCard = React.useCallback(() => {
    const visible = flashcards.map((c, i) => ({ c, i })).filter(({ c }) => c.visible !== false);
    const item = visible[Math.min(currentIndex, Math.max(visible.length - 1, 0))];
    if (item) toggleCardVisibility(item.i);
  }, [flashcards, currentIndex, toggleCardVisibility]);

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–µ —Å retry queue
  const handleClearWithRetry = React.useCallback(() => {
    clearAll();
    setCurrentIndex(0);
    setFlipped(false);
    setMode("text");
  }, [clearAll, setMode]);

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useKeyboardNavigation({
    mode,
    state,
    flashcards, // Card[]
    currentIndex,
    flipped,
    onIndexChange: handleIndexChange,
    onFlip: handleFlip,
    onHideCard: handleHideCard,
  });

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
  const { exportData, importData } = useFileOperations({
    flashcards, // Card[]
    inputText,
    translationText,
    formTranslations,
    onDataLoad: data => {
      setInputText(data.inputText);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ Card[]
      setFlashcards(data.flashcards as Card[]);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
      setTranslationText(data.translationText);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Map –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º
      if (data.formTranslations && Array.isArray(data.formTranslations)) {
        setFormTranslations(new Map(data.formTranslations));
      }

      setState("ready");
      setMode("flashcards");
    },
  });

  // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ retry —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
  const [retryInProgress, setRetryInProgress] = React.useState(false);
  const handleRetryProcessing = React.useCallback(async () => {
    if (retryInProgress || !processRetryQueue) {
      console.warn("‚ö†Ô∏è Retry —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ processRetryQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      return { processed: 0, successful: 0, failed: 0 };
    }

    try {
      setRetryInProgress(true);
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º retry –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ App.tsx");

      const progressCallback = (current: number, total: number) => {
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å retry: ${current}/${total}`);
      };

      const results = await processRetryQueue(progressCallback);
      console.log("üèÅ Retry –∑–∞–≤–µ—Ä—à–µ–Ω:", results);

      if (results.successful > 0) {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.successful} –∏–∑ ${results.processed} —á–∞–Ω–∫–æ–≤`);
      }

      setCurrentIndex(0);
      setFlipped(false);
      setMode("flashcards");

      return results;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ retry:", error);
      return { processed: 0, successful: 0, failed: 0 };
    } finally {
      setRetryInProgress(false);
    }
  }, [processRetryQueue, retryInProgress, setCurrentIndex, setFlipped, setMode]);

  // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null
  const [apiError, setApiError] = React.useState<string | null>(null);

  // –°–ª–µ–¥–∏–º –∑–∞ progress –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—á–µ—Ä–µ–¥–∏ retry
  React.useEffect(() => {
    const step = (processingProgress.step || "").trim();
    const hasExplicitError =
      step.includes("–û—à–∏–±–∫–∞") ||
      step.toLowerCase().includes("error") ||
      step.startsWith("üî¥") ||
      step.startsWith("üåê");
    const hasProblems = retryQueue?.queue?.length > 0;

    if (hasExplicitError || hasProblems) {
      setApiError(step || "error");
    } else if (step === "ready" || step === "") {
      setApiError(null);
    }
  }, [processingProgress.step, retryQueue?.queue]);

  return (
    <div
      className="min-h-screen p-8"
      style={{
        background: "linear-gradient(135deg, #6A9BCC 0%, #8BB6D6 50%, #A8C8E1 100%)",
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–º–ø–æ—Ä—Ç–æ–º/—ç–∫—Å–ø–æ—Ä—Ç–æ–º */}
      <Header onImport={importData} onExport={exportData} isProcessed={flashcards.length > 0} />

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <ModeSelector
        mode={mode}
        onChange={setMode}
        onClear={handleClearWithRetry}
        isProcessed={flashcards.length > 0}
      />

      {/* –û–ë–ù–û–í–õ–ï–ù–ù–´–ô APIStatusBar —Å retry queue –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π */}
      <APIStatusBar
        flashcards={flashcards}
        retryQueue={retryQueue}
        onRetryProcessing={handleRetryProcessing}
        error={apiError}
      />

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ —Ä–µ–∂–∏–º–∞–º */}
      {mode === "text" && (
        <>
          <TextInputView
            inputText={inputText}
            setInputText={setInputText}
            onProcessText={processText}
            state={state}
            processingProgress={processingProgress}
            isBatchEnabled={isBatchEnabled}
            setBatchEnabled={setBatchEnabled}
            batchId={batchId}
            batchError={batchError}
          />

          <BatchResultRetriever
            onResults={(cards: any[]) => {
              console.log("üêû [App] raw cards:", cards);
              console.log("üêû [App] first card sample:", cards?.[0]);

              // üìå –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–π/—Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã)
              const rebuiltText = Array.from(
                new Set(
                  cards.flatMap((card: any) =>
                    (card?.contexts || [])
                      .map((ctx: any) =>
                        (ctx?.latvian || ctx?.original_phrase || "").toString().trim()
                      )
                      .filter(Boolean)
                  )
                )
              ).join(" ");

              const rebuiltTranslation = Array.from(
                new Set(
                  cards.flatMap((card: any) =>
                    (card?.contexts || [])
                      .map((ctx: any) =>
                        (ctx?.russian || ctx?.phrase_translation || "").toString().trim()
                      )
                      .filter(Boolean)
                  )
                )
              ).join(" ");

              // üìå –°—Ç—Ä–æ–∏–º Map –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Ñ–æ—Ä–º (–Ω–æ–≤–∞—è —Å—Ö–µ–º–∞) —Å —Ñ–æ–ª–±—ç–∫–æ–º –Ω–∞ —Å—Ç–∞—Ä—É—é
              const derivedForms = deriveFormTranslations(cards);

              // üéØ –ï—Å–ª–∏ –ø–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø—Ä–∏—à–ª–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (FlashcardOld[]),
              // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –ø—Ä–µ–∂–Ω–∏–π –º–µ—Ö–∞–Ω–∏–∑–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:
              const rebuiltFormTranslations =
                derivedForms.size > 0
                  ? derivedForms
                  : saveFormTranslations(cards as any, new Map());

              console.log("‚úÖ [App] rebuiltText:", rebuiltText);
              console.log("‚úÖ [App] rebuiltTranslation:", rebuiltTranslation);

              setInputText(rebuiltText);
              setTranslationText(rebuiltTranslation);
              setFormTranslations(rebuiltFormTranslations);

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∫ Card[]
              setFlashcards(cards as Card[]);
              setState("ready");
              setMode("flashcards");
            }}
            setInputText={setInputText}
            setTranslationText={setTranslationText}
            setFormTranslations={setFormTranslations}
          />
        </>
      )}

      {mode === "flashcards" && (
        <FlashcardsView
          // –í–ê–ñ–ù–û: —É —Ñ–∏–ª—å—Ç—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞
          flashcards={flashcards.filter(card => card.visible) as unknown as any[]}
          currentIndex={currentIndex}
          flipped={flipped}
          onIndexChange={handleIndexChange}
          onFlip={handleFlip}
          onHideCard={handleHideCard}
        />
      )}

      {mode === "reading" && (
        <ReadingView
          inputText={inputText}
          // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          flashcards={flashcards.filter(card => card.visible) as unknown as any[]}
          formTranslations={formTranslations}
        />
      )}

      {mode === "translation" && <TranslationView translationText={translationText} />}

      {mode === "edit" && (
        <EditView
          // –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Å—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          flashcards={flashcards as unknown as any[]}
          onCardUpdate={updateCard}
          onToggleVisibility={toggleCardVisibility}
          onDeleteCard={deleteCard}
          onAddCard={addNewCard}
          onClearAll={clearAll}
        />
      )}

      {/* TODO: Footer –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—à–∏–±–æ–∫, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–¥—É—Ç —á–µ—Ä–µ–∑ APIStatusBar */}
      <Footer
        flashcards={flashcards as any[]}
        error={apiError || undefined}
        processingProgress={processingProgress}
      />
    </div>
  );
}

export default App;
