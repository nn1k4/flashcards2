import React from "react";
import type { AppMode, FlashcardNew } from "./types";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
import Header from "./components/Header";
import ModeSelector from "./components/ModeSelector";
import Footer from "./components/Footer";
import TextInputView from "./components/TextInputView";
import FlashcardsView from "./components/FlashcardsView";
import ReadingView from "./components/ReadingView";
import TranslationView from "./components/TranslationView";
import EditView from "./components/EditView";

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ö—É–∫–æ–≤ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
import { useProcessing } from "./hooks/useProcessing";
import { useKeyboardNavigation } from "./hooks/useKeyboardNavigation";
import { useFileOperations } from "./hooks/useFileOperations";

// –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–¥—É–ª—å–Ω–æ–π retry –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import { ErrorType } from "./utils/error-handler";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è APIStatusBar —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π retry queue
interface APIStatusBarProps {
  flashcards: FlashcardNew[];
  retryQueue?: {
    queue: any[];
    stats: any;
    isProcessing: boolean;
  };
  onRetryProcessing?: () => Promise<any>;
}

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ô APIStatusBar —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π retry queue
const APIStatusBar: React.FC<APIStatusBarProps> = ({
  flashcards,
  retryQueue,
  onRetryProcessing,
  error,
  processingProgress,
}) => {
  // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π)
  const cardsNeedingReprocessing = flashcards.filter(
    card => (card as any).needsReprocessing === true
  );

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º retry queue –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
  const totalProblems = retryQueue ? retryQueue.queue.length : cardsNeedingReprocessing.length;
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ò–õ–ò –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  if (totalProblems === 0 && !error) {
    return null; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –∏–∑ retry queue
  const problemTypes = retryQueue
    ? retryQueue.queue.map(item => item.errorInfo?.type).filter(Boolean)
    : [];

  const hasApiOverload = problemTypes.includes(ErrorType.API_OVERLOADED);
  const hasRateLimit = problemTypes.includes(ErrorType.RATE_LIMITED);
  const hasNetworkErrors =
    problemTypes.includes(ErrorType.NETWORK_ERROR) ||
    problemTypes.includes(ErrorType.PROXY_UNAVAILABLE);
  const hasAuthErrors =
    problemTypes.includes(ErrorType.AUTHENTICATION) ||
    problemTypes.includes(ErrorType.INSUFFICIENT_QUOTA);

  const getMessage = () => {
    if (hasAuthErrors) return "üîë –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π API";
    if (hasApiOverload) return "üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω";
    if (hasRateLimit) return "üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤";
    if (hasNetworkErrors) return "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º";
    return `üîÑ ${totalProblems} —á–∞–Ω–∫–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
  };

  const getRecommendation = () => {
    if (hasAuthErrors) return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞";
    if (hasApiOverload) return "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç";
    if (hasRateLimit) return "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π";
    if (hasNetworkErrors) return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞";
    return '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å" –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤';
  };

  const getStatusColor = () => {
    if (hasAuthErrors) return "#f44336"; // –∫—Ä–∞—Å–Ω—ã–π
    if (hasApiOverload) return "#ff5722"; // —Ç–µ–º–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
    if (hasRateLimit) return "#ff9800"; // –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    if (hasNetworkErrors) return "#2196f3"; // —Å–∏–Ω–∏–π
    return "#6A9BCC"; // –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  };

  const isRetryDisabled = () => {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º retry –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
    return hasAuthErrors || retryQueue?.isProcessing;
  };

  return (
    <div
      style={{
        background: "rgba(255,255,255,0.15)",
        padding: "16px",
        borderRadius: "12px",
        margin: "16px 0",
        border: `2px solid ${getStatusColor()}`,
        backdropFilter: "blur(10px)",
      }}
    >
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      <div
        style={{
          marginBottom: "12px",
          fontSize: "16px",
          fontWeight: "bold",
          color: "white",
          fontFamily: "Noto Sans Display, sans-serif",
        }}
      >
        {getMessage()}
        {retryQueue?.isProcessing && (
          <span
            style={{
              marginLeft: "12px",
              color: "#4CAF50",
              fontSize: "14px",
            }}
          >
            üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...
          </span>
        )}
      </div>

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é */}
      <div
        style={{
          fontSize: "14px",
          opacity: 0.9,
          marginBottom: "12px",
          color: "white",
          fontFamily: "Noto Sans Display, sans-serif",
        }}
      >
        {getRecommendation()}
      </div>

      {/* –ü—Ä–µ–≤—å—é –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ retry queue */}
      {retryQueue && retryQueue.queue.length > 0 && (
        <div
          style={{
            fontSize: "12px",
            marginBottom: "12px",
            background: "rgba(0,0,0,0.2)",
            padding: "8px",
            borderRadius: "6px",
          }}
        >
          <div
            style={{
              fontWeight: "bold",
              marginBottom: "6px",
              color: "white",
              fontFamily: "Noto Sans Display, sans-serif",
            }}
          >
            –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞–Ω–∫–∏:
          </div>
          {retryQueue.queue.slice(0, 3).map((item, index) => (
            <div
              key={item.id}
              style={{
                marginLeft: "8px",
                opacity: 0.8,
                marginBottom: "4px",
                color: "white",
                fontFamily: "Noto Sans Display, sans-serif",
              }}
            >
              ‚Ä¢ {item.chunk.substring(0, 50)}...
              <span
                style={{
                  marginLeft: "8px",
                  fontSize: "11px",
                  opacity: 0.7,
                }}
              >
                ({item.errorInfo?.userMessage || "–æ—à–∏–±–∫–∞"})
              </span>
            </div>
          ))}
          {retryQueue.queue.length > 3 && (
            <div
              style={{
                marginLeft: "8px",
                opacity: 0.6,
                fontSize: "11px",
                color: "white",
                fontFamily: "Noto Sans Display, sans-serif",
              }}
            >
              ... –∏ –µ—â–µ {retryQueue.queue.length - 3}
            </div>
          )}
        </div>
      )}

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ retry queue (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞) */}
      {retryQueue?.stats && (
        <div
          style={{
            fontSize: "12px",
            opacity: 0.7,
            marginBottom: "12px",
            color: "white",
            fontFamily: "Noto Sans Display, sans-serif",
          }}
        >
          –í—Å–µ–≥–æ –≤ –æ—á–µ—Ä–µ–¥–∏: {retryQueue.stats.totalItems} | –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {retryQueue.stats.processed}{" "}
          | –ù–µ—É–¥–∞—á–Ω–æ: {retryQueue.stats.failed}
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div style={{ display: "flex", gap: "8px", alignItems: "center" }}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ retry */}
        <button
          onClick={onRetryProcessing}
          disabled={isRetryDisabled()}
          style={{
            background: isRetryDisabled() ? "#666" : "#4CAF50",
            color: "white",
            border: "none",
            padding: "10px 20px",
            borderRadius: "6px",
            cursor: isRetryDisabled() ? "not-allowed" : "pointer",
            fontSize: "14px",
            fontWeight: "bold",
            transition: "all 0.2s ease",
            opacity: isRetryDisabled() ? 0.6 : 1,
            fontFamily: "Noto Sans Display, sans-serif",
          }}
          title={
            hasAuthErrors
              ? "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
              : retryQueue?.isProcessing
                ? "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
                : "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞–Ω–∫–æ–≤"
          }
        >
          {retryQueue?.isProcessing
            ? "–û–±—Ä–∞–±–æ—Ç–∫–∞..."
            : hasAuthErrors
              ? "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
              : "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"}
        </button>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ */}
        {retryQueue && retryQueue.queue.length > 0 && !retryQueue.isProcessing && (
          <button
            onClick={() => retryQueue.clearQueue?.()}
            style={{
              background: "transparent",
              color: "white",
              border: "1px solid rgba(255,255,255,0.3)",
              padding: "6px 12px",
              borderRadius: "4px",
              cursor: "pointer",
              fontSize: "12px",
              transition: "all 0.2s ease",
              fontFamily: "Noto Sans Display, sans-serif",
            }}
            title="–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å retry"
          >
            –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
          </button>
        )}
      </div>
    </div>
  );
};

// –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
function App() {
  // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [mode, setMode] = React.useState<AppMode>("text");
  const [inputText, setInputText] = React.useState("");

  // –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å useProcessing - –¥–æ–±–∞–≤–ª—è–µ–º retry —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
  const {
    state,
    flashcards,
    translationText,
    processingProgress,
    formTranslations,
    processText,
    updateCard,
    toggleCardVisibility,
    deleteCard,
    addNewCard,
    clearAll,
    setFlashcards,
    setTranslationText,
    setState,
    setFormTranslations,
    // –ù–û–í–´–ï –ø–æ–ª—è –¥–ª—è retry
    processRetryQueue,
    retryQueue,
  } = useProcessing(inputText, setMode);

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
  useKeyboardNavigation(mode, setMode, flashcards, updateCard);

  // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
  const { exportData, importData } = useFileOperations({
    flashcards,
    inputText,
    translationText,
    formTranslations,
    onDataLoad: data => {
      setInputText(data.inputText);
      setFlashcards(data.flashcards as FlashcardNew[]);
      setTranslationText(data.translationText);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
      if (data.formTranslations && Array.isArray(data.formTranslations)) {
        setFormTranslations(new Map(data.formTranslations));
      }

      setState("ready");
      setMode("flashcards");
    },
  });

  // –ù–û–í–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ retry —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
  const [retryInProgress, setRetryInProgress] = React.useState(false);

  const handleRetryProcessing = React.useCallback(async () => {
    if (retryInProgress || !processRetryQueue) {
      console.warn("‚ö†Ô∏è Retry —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∏–ª–∏ processRetryQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      return { processed: 0, successful: 0, failed: 0 };
    }

    try {
      setRetryInProgress(true);
      console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º retry –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑ App.tsx");

      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ retry
      const progressCallback = (current: number, total: number) => {
        console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å retry: ${current}/${total}`);
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ UI –≤ –±—É–¥—É—â–µ–º
      };

      const results = await processRetryQueue(progressCallback);

      console.log("üèÅ Retry –∑–∞–≤–µ—Ä—à–µ–Ω:", results);

      if (results.successful > 0) {
        // –£—Å–ø–µ—à–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤—è—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ ApiClient —Å–æ–±—ã—Ç–∏—è
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.successful} –∏–∑ ${results.processed} —á–∞–Ω–∫–æ–≤`);
      }

      return results;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ retry:", error);
      return { processed: 0, successful: 0, failed: 0 };
    } finally {
      setRetryInProgress(false);
    }
  }, [processRetryQueue, retryInProgress]);

  const [apiError, setApiError] = React.useState(null);

  // –î–æ–±–∞–≤—å—Ç–µ useEffect –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫:
  React.useEffect(() => {
    if (processingProgress.step.includes("üî¥") || processingProgress.step.includes("–û—à–∏–±–∫–∞")) {
      setApiError(processingProgress.step);
    } else if (processingProgress.step === "ready") {
      setApiError(null);
    }
  }, [processingProgress.step]);

  return (
    <div
      className="min-h-screen p-8"
      style={{
        background: "linear-gradient(135deg, #6A9BCC 0%, #8BB6D6 50%, #A8C8E1 100%)",
      }}
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏–º–ø–æ—Ä—Ç–æ–º/—ç–∫—Å–ø–æ—Ä—Ç–æ–º */}
      <Header onImport={importData} onExport={exportData} isProcessed={flashcards.length > 0} />

      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤ */}
      <ModeSelector currentMode={mode} onModeChange={setMode} />

      {/* –û–ë–ù–û–í–õ–ï–ù–ù–´–ô APIStatusBar —Å retry queue –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π */}
      <APIStatusBar
        flashcards={flashcards}
        retryQueue={retryQueue}
        onRetryProcessing={handleRetryProcessing}
      />
      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ - —É—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ —Ä–µ–∂–∏–º–∞–º */}
      {mode === "text" && (
        <TextInputView
          inputText={inputText}
          setInputText={setInputText}
          onProcessText={processText}
          state={state}
          processingProgress={processingProgress}
        />
      )}

      {mode === "flashcards" && (
        <FlashcardsView flashcards={flashcards.filter(card => card.visible)} />
      )}

      {mode === "reading" && (
        <ReadingView
          inputText={inputText}
          flashcards={flashcards.filter(card => card.visible)}
          formTranslations={formTranslations}
        />
      )}

      {mode === "translation" && <TranslationView translationText={translationText} />}

      {mode === "edit" && (
        <EditView
          flashcards={flashcards}
          onUpdateCard={updateCard}
          onToggleVisibility={toggleCardVisibility}
          onDeleteCard={deleteCard}
          onAddCard={addNewCard}
          onClearAll={clearAll}
        />
      )}

      {/* –§—É—Ç–µ—Ä —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <Footer flashcards={flashcards} error={apiError} processingProgress={processingProgress} />
    </div>
  );
}

export default App;
