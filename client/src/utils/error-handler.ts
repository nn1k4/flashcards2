// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ API
export enum ErrorType {
  PROXY_UNAVAILABLE = "proxy_unavailable", // –ø—Ä–æ–∫—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  NETWORK_ERROR = "network_error", // –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  API_OVERLOADED = "api_overloaded", // API –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω (529)
  RATE_LIMITED = "rate_limited", // –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç (429)
  AUTHENTICATION = "authentication", // –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º (401, 403)
  INSUFFICIENT_QUOTA = "insufficient_quota", // –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (402)
  UNKNOWN = "unknown", // –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏
}

export interface ErrorInfo {
  type: ErrorType;
  code?: number;
  message: string;
  originalError?: any;
  retryable: boolean;
  userMessage: string; // –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  recommendation: string; // –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  retryAfter?: number; // –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (–º—Å)
  severity: "low" | "medium" | "high" | "critical";
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
export function analyzeError(error: any): ErrorInfo {
  console.log("üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:", error);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥–∞
  if (error?.response?.status || error?.status) {
    const status = error.response?.status || error.status;
    return analyzeHttpError(status, error);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ network –æ—à–∏–±–æ–∫
  if (error?.code || error?.message) {
    return analyzeNetworkError(error);
  }

  // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.UNKNOWN,
    message: error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    originalError: error,
    retryable: true,
    userMessage: "üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
    recommendation: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
    severity: "medium",
  };
}

function analyzeHttpError(status: number, error: any): ErrorInfo {
  switch (status) {
    case 429:
      return {
        type: ErrorType.RATE_LIMITED,
        code: 429,
        message: "Rate limit exceeded",
        originalError: error,
        retryable: true,
        userMessage: "üü° –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Claude API",
        recommendation: "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π",
        retryAfter: extractRetryAfter(error),
        severity: "medium",
      };

    case 529:
      return {
        type: ErrorType.API_OVERLOADED,
        code: 529,
        message: "Service temporarily overloaded",
        originalError: error,
        retryable: true,
        userMessage: "üî¥ Claude API –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω",
        recommendation: "–û–±—ã—á–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª–∏—Ç—Å—è 10-30 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
        severity: "high",
      };

    case 401:
    case 403:
      return {
        type: ErrorType.AUTHENTICATION,
        code: status,
        message: "Authentication failed",
        originalError: error,
        retryable: false,
        userMessage: "üîë –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API",
        recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞",
        severity: "critical",
      };

    case 402:
      return {
        type: ErrorType.INSUFFICIENT_QUOTA,
        code: 402,
        message: "Insufficient quota",
        originalError: error,
        retryable: false,
        userMessage: "üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ API –∞–∫–∫–∞—É–Ω—Ç–µ",
        recommendation: "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Anthropic",
        severity: "critical",
      };

    case 500:
    case 502:
    case 503:
    case 504:
      return {
        type: ErrorType.API_OVERLOADED,
        code: status,
        message: "Server error",
        originalError: error,
        retryable: true,
        userMessage: "üî¥ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Claude API",
        recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç",
        severity: "high",
      };

    default:
      return {
        type: ErrorType.UNKNOWN,
        code: status,
        message: `HTTP ${status}`,
        originalError: error,
        retryable: status >= 500,
        userMessage: `üî¥ –û—à–∏–±–∫–∞ HTTP ${status}`,
        recommendation: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        severity: "medium",
      };
  }
}

function analyzeNetworkError(error: any): ErrorInfo {
  const errorCode = error.code?.toUpperCase() || "";
  const errorMessage = error.message?.toLowerCase() || "";

  // –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  if (errorCode === "ECONNREFUSED" || errorMessage.includes("econnrefused")) {
    return {
      type: ErrorType.PROXY_UNAVAILABLE,
      message: "Connection refused to proxy",
      originalError: error,
      retryable: true,
      userMessage: "üü† –ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
      recommendation: '–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π "npm start" –≤ –ø–∞–ø–∫–µ server',
      severity: "high",
    };
  }

  // –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
  if (
    errorCode.includes("ENOTFOUND") ||
    errorCode.includes("ECONNRESET") ||
    errorMessage.includes("network error") ||
    errorMessage.includes("timeout")
  ) {
    return {
      type: ErrorType.NETWORK_ERROR,
      message: "Network connectivity issues",
      originalError: error,
      retryable: true,
      userMessage: "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º",
      recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
      severity: "medium",
    };
  }

  // Fallback –¥–ª—è network –æ—à–∏–±–æ–∫
  return {
    type: ErrorType.NETWORK_ERROR,
    message: error.message || "Network error",
    originalError: error,
    retryable: true,
    userMessage: "üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏",
    recommendation: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
    severity: "medium",
  };
}

function extractRetryAfter(error: any): number | undefined {
  const retryAfter = error?.response?.headers?.["retry-after"];
  if (retryAfter) {
    const seconds = parseInt(retryAfter, 10);
    if (!isNaN(seconds)) {
      return seconds * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    }
  }
  return undefined;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è retry –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function getRetryDelay(errorType: ErrorType, attempt: number, retryAfter?: number): number {
  // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∫–∞–∑–∞–ª Retry-After, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (retryAfter) {
    return retryAfter;
  }

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
  const configs = {
    [ErrorType.API_OVERLOADED]: { base: 10000, multiplier: 1.5 }, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 10 —Å–µ–∫
    [ErrorType.RATE_LIMITED]: { base: 5000, multiplier: 2 }, // –Ω–∞—á–∏–Ω–∞–µ–º —Å 5 —Å–µ–∫
    [ErrorType.PROXY_UNAVAILABLE]: { base: 2000, multiplier: 1.8 }, // –ø—Ä–æ–∫—Å–∏
    [ErrorType.NETWORK_ERROR]: { base: 1000, multiplier: 2 }, // –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
    [ErrorType.UNKNOWN]: { base: 1000, multiplier: 2 }, // –æ—Å—Ç–∞–ª—å–Ω—ã–µ
  };

  const config = configs[errorType] || configs[ErrorType.UNKNOWN];
  const delay = config.base * Math.pow(config.multiplier, attempt - 1);

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - 60 —Å–µ–∫—É–Ω–¥
  return Math.min(delay, 60000);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
 */
export function isRetryable(errorType: ErrorType): boolean {
  const nonRetryableTypes = [ErrorType.AUTHENTICATION, ErrorType.INSUFFICIENT_QUOTA];

  return !nonRetryableTypes.includes(errorType);
}
