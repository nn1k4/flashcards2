// –ú–æ–¥—É–ª—å–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ callClaude —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ retry
import { callClaude } from "../claude";
import {
  analyzeError,
  ErrorInfo,
  getRetryDelay,
  isRetryable,
  ErrorType,
} from "../utils/error-handler";

// –ü—Ä–æ—Å—Ç–∞—è –±—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è EventEmitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Node.js
class SimpleEventEmitter {
  private events: Map<string, Function[]> = new Map();

  on(event: string, listener: Function): void {
    if (!this.events.has(event)) {
      this.events.set(event, []);
    }
    this.events.get(event)!.push(listener);
  }

  off(event: string, listener: Function): void {
    const listeners = this.events.get(event);
    if (listeners) {
      const index = listeners.indexOf(listener);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    }
  }

  emit(event: string, ...args: any[]): void {
    const listeners = this.events.get(event);
    if (listeners) {
      listeners.forEach(listener => {
        try {
          listener(...args);
        } catch (error) {
          console.error(`Error in event listener for ${event}:`, error);
        }
      });
    }
  }

  removeAllListeners(event?: string): void {
    if (event) {
      this.events.delete(event);
    } else {
      this.events.clear();
    }
  }
}

export interface ApiClientOptions {
  maxRetries?: number;
  debug?: boolean;
  enableEvents?: boolean;
}

export interface ApiClientStats {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  retriesPerformed: number;
  lastRequestTime: number;
  errorsByType: Record<string, number>;
}

export class ApiClient extends SimpleEventEmitter {
  private options: Required<ApiClientOptions>;
  private stats: ApiClientStats;

  constructor(options: ApiClientOptions = {}) {
    super();

    this.options = {
      maxRetries: 5,
      debug: false,
      enableEvents: true,
      ...options,
    };

    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {},
    };

    if (this.options.debug) {
      console.log("üöÄ ApiClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:", this.options);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry
   */
  async request(prompt: string, options: { chunkInfo?: string } = {}): Promise<string> {
    this.stats.totalRequests++;
    this.stats.lastRequestTime = Date.now();

    if (this.options.debug) {
      console.log(`üì§ ApiClient: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ 1/${this.options.maxRetries})`);
    }

    for (let attempt = 1; attempt <= this.options.maxRetries; attempt++) {
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        if (this.options.enableEvents) {
          this.emit("requestStart", {
            attempt,
            maxRetries: this.options.maxRetries,
            chunkInfo: options.chunkInfo,
          });
        }

        const result = await callClaude(prompt);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
        if (result.startsWith("[ERROR:")) {
          const errorData = JSON.parse(result.slice(7, -1));
          throw errorData;
        }

        // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.stats.successfulRequests++;

        if (this.options.enableEvents) {
          this.emit("requestSuccess", {
            attempt,
            result: result.substring(0, 100) + "...",
            chunkInfo: options.chunkInfo,
          });
        }

        if (this.options.debug) {
          console.log(`‚úÖ ApiClient: –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞ ${attempt} –ø–æ–ø—ã—Ç–æ–∫`);
        }

        return result;
      } catch (error) {
        const errorInfo = analyzeError(error);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.stats.errorsByType[errorInfo.type] =
          (this.stats.errorsByType[errorInfo.type] || 0) + 1;

        if (this.options.debug) {
          console.log(`‚ùå ApiClient: –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, errorInfo.userMessage);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (this.options.enableEvents) {
          this.emit("requestError", {
            attempt,
            maxRetries: this.options.maxRetries,
            errorInfo,
            chunkInfo: options.chunkInfo,
            willRetry: attempt < this.options.maxRetries && isRetryable(errorInfo.type),
          });

          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
          if (errorInfo.type === ErrorType.RATE_LIMITED) {
            this.emit("rateLimited", errorInfo);
          } else if (errorInfo.type === ErrorType.API_OVERLOADED) {
            this.emit("apiOverloaded", errorInfo);
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        if (attempt >= this.options.maxRetries || !isRetryable(errorInfo.type)) {
          this.stats.failedRequests++;

          if (this.options.enableEvents) {
            this.emit("requestFailed", {
              finalAttempt: attempt,
              errorInfo,
              chunkInfo: options.chunkInfo,
            });
          }

          throw errorInfo;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –∂–¥–µ–º
        const delay = getRetryDelay(errorInfo.type, attempt, errorInfo.retryAfter);

        if (this.options.debug) {
          console.log(`‚è≥ ApiClient: –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π ${attempt + 1}`);
        }

        if (this.options.enableEvents) {
          this.emit("retryDelay", {
            attempt: attempt + 1,
            delay,
            errorType: errorInfo.type,
            chunkInfo: options.chunkInfo,
          });
        }

        this.stats.retriesPerformed++;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }

    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    throw new Error("Unexpected end of retry loop");
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
   */
  getStats(): ApiClientStats {
    return { ...this.stats };
  }

  /**
   * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats(): void {
    this.stats = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      retriesPerformed: 0,
      lastRequestTime: 0,
      errorsByType: {},
    };

    if (this.options.debug) {
      console.log("üìä ApiClient: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
   */
  async healthCheck(): Promise<{ status: "ok" | "error"; message: string }> {
    try {
      await this.request("Test connection", { chunkInfo: "health-check" });
      return { status: "ok", message: "API –¥–æ—Å—Ç—É–ø–µ–Ω" };
    } catch (error) {
      const errorInfo = error as ErrorInfo;
      return {
        status: "error",
        message: errorInfo.userMessage,
      };
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const apiClient = new ApiClient({
  debug: process.env.NODE_ENV === "development",
  enableEvents: true,
});
